{"version":3,"sources":["components/Common/Atoms.js","components/Common/ApiError.js","assets/checkout_icon.svg","assets/styles/checkout.styles.js","components/Send/Checkout.js"],"names":["LoadingCtn","styled","div","_templateObject","_taggedTemplateLiteral","props","theme","primary","BalanceHeaderWrap","_templateObject2","wallet","text","BalanceHeaderFiatWrap","_templateObject3","secondary","ZeroBalanceHeader","_templateObject4","TokenParamLabel","span","_templateObject5","AlertMsg","p","_templateObject6","forms","error","ConvertAmount","_templateObject7","ApiError","React","CashLoader","CheckoutHeader","CheckoutStyles","PaymentDetails","PurchaseAuthCode","Heading","h3","ListItem","CheckoutIcon","img","HorizontalSpacer","hr","_templateObject8","AgreeOverlay","_templateObject9","AgreeModal","_templateObject10","SLP","script","Checkout","_ref","_formData$token","_formData$token3","_prInfoFromUrl$paymen","_prInfoFromUrl$paymen2","_prInfoFromUrl$paymen3","_prInfoFromUrl$paymen4","_prInfoFromUrl$paymen5","_prInfoFromUrl$paymen6","_prInfoFromUrl$paymen7","_prInfoFromUrl$paymen8","_prInfoFromUrl$paymen9","tokenFormattedBalance","passLoadingStatus","ContextValue","useContext","WalletContext","useLocation","forceWalletUpdate","fiatPrice","apiError","cashtabSettings","walletState","getWalletState","tokens","balances","purchaseTokenIds","paymentServers","_useState","useState","dirty","value","address","_useState2","_slicedToArray","formData","setFormData","token","find","tokenId","tokenBalance","balance","toString","Math","pow","info","decimals","_useState3","_useState4","sendBchAddressError","_useState5","_useState6","sendBchAmountError","_useState7","currency","ticker","_useState8","selectedCurrency","_useState9","_useState10","prInfoFromUrl","setPrInfoFromUrl","_useState11","_useState12","isModalVisible","setIsModalVisible","_useState13","_useState14","isSending","setIsSending","_useState15","_useState16","hasAgreed","setHasAgreed","_useState17","_useState18","tokensMinted","setTokensMinted","_useState19","_useState20","tokensSent","setTokensSent","_useState21","_useState22","paymentId","setPaymentId","_useState23","_useState24","purchaseTokenAmount","setPurchaseTokenAmount","calculateFiat","exchangeAdditionalAmount","toFixed","feeAmount","Number","totalAmount","_calculateFiat","isSandbox","slice","includes","_useState25","_useState26","setPostageData","_useState27","_useState28","setUsePostage","_useState29","_useState30","uuid","setUuid","_useState31","_useState32","formToken","setFormToken","divRef","useRef","buildUuid","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","uuidHex","prUrlArray","prId","prUrlIndex","buf","aliasUrl","response","alias","formattedUuid","wrap","_context","prev","next","abrupt","url","split","length","findIndex","server","replace","errorNotification","Error","concat","Buffer","from","allocUnsafe","writeUInt32BE","Path1899","slpAddress","fetch","method","sent","json","size","_toConsumableArray","Array","map","floor","random","join","genRanHex","stop","_x","apply","arguments","fetchFormToken","_ref3","_callee2","purchaseAmount","tokenUrl","_context2","headers","body","JSON","stringify","usdamount","buxamount","prurl","_x2","prefixesArray","prefixes","tokenPrefixes","sleep","ms","Promise","resolve","setTimeout","history","useHistory","_useBCH","useBCH","getBcashRestUrl","sendBip70","sendSelfMint","sendSelfMintV2","getPostage","generateBurnTx","getMintVaultAddress","readAuthCode","populateFormsFromPaymentDetails","_x3","_populateFormsFromPaymentDetails","_callee7","paymentDetails","txInfo","postageObj","totalSats","slpScript","tokenIdBuf","tokenAddress","sendRecords","cashAddress","decodedAddress","totalBase","tokenInfo","tokenValue","_context7","type","Script","fromRaw","outputs","getAddress","reduce","total","output","fromSmallestDenomination","isValidSlp","getData","getType","cashaddr","decode","encode","hash","getRecords","record","add","U64","fromBE","fromInt","then","res","toInt","handleSendXecError","errorObj","message","test","send","_x4","_x5","_send","_callee8","rawChainTxs","authCodeB64","attempt","link","_merchantDataJson$cal","merchantDataJson","linkParts","sentTxid","nextAttempt","_args8","_context8","undefined","_objectSpread","Event","defaultFee","sendTokenNotification","sendXecNotification","merchantData","parse","callback","success_url","window","location","assign","t0","console","cause","code","doSelfMint","tokenTicker","useEffect","totalBalance","_formData$token2","rounded","ceil","_callee3","fullQueryString","delimiterIndex","txInfoArr","prInfo","i","_delimiterIndex","param","encodedValue","prefix","queryString","_context3","push","search","indexOf","toLowerCase","log","decodeURIComponent","getUrlFromQueryString","getPaymentRequest","replaceState","origin","_ref5","_callee4","rawBurnTx","doChainedMint","_readAuthCode","rawMintTx","_args4","_context4","version","selfMintTokenNotification","_x6","checkSufficientFunds","fiatPriceString","isNaN","formatFiatBalance","fiatCurrencies","fiatCurrency","symbol","toUpperCase","fiatToCrypto","authorizenetSuccess","_ref6","_callee5","result","_result$messages","_result$paymentMethod","resultCode","_result$paymentMethod2","transResponse","transId","data","_type","_context5","messages","responseCode","current","scrollIntoView","paymentMethodData","tokenizationData","opaqueData","dataDescriptor","dataValue","btoa","opaquedata","customerinformation","customerInformation","t1","authcode","burnTx","t2","_x7","wertSuccess","_ref7","_callee6","_context6","status","_x8","displayTicker","_ref8","ipn_body","invoice","merchant_name","offer_description","offer_name","isStage1","payFormHeaderText","createElement","Fragment","Modal","title","visible","onOk","onCancel","ref","tabindex","src","CheckOutIcon","className","memo","Date","target","rel","href","WertModule","style","height","options","partner_id","click_id","commodity","network","commodities","commodity_amount","listeners","loaded","HostedForm","authData","apiLoginID","clientKey","onSubmit","environment","billingAddressOptions","show","required","buttonStyle","border","color","backgroundImage","transition","backgroundSize","fontSize","width","padding","borderRadius","marginBottom","cursor","buttonText","formHeaderText","GooglePayButton","buttonColor","buttonType","buttonSizeMode","paymentRequest","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","tokenizationSpecification","gateway","gatewayMerchantId","merchantInfo","merchantId","merchantName","transactionInfo","totalPriceStatus","totalPriceLabel","totalPrice","currencyCode","countryCode","onLoadPaymentData","Spin","spinning","indicator","CashLoadingIcon","PrimaryButton","onClick","defaultProps"],"mappings":"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","file":"static/js/15.825b14ba.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const LoadingCtn = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 400px;\r\n    flex-direction: column;\r\n\r\n    svg {\r\n        width: 50px;\r\n        height: 50px;\r\n        fill: ${props => props.theme.primary};\r\n    }\r\n`;\r\n\r\nexport const BalanceHeaderWrap = styled.div`\r\n    color: ${props => props.theme.wallet.text.primary};\r\n    width: 100%;\r\n    font-size: 30px;\r\n    font-weight: bold;\r\n    @media (max-width: 768px) {\r\n        font-size: 23px;\r\n    }\r\n`;\r\n\r\nexport const BalanceHeaderFiatWrap = styled.div`\r\n    color: ${props => props.theme.wallet.text.secondary};\r\n    width: 100%;\r\n    font-size: 18px;\r\n    margin-bottom: 20px;\r\n    font-weight: bold;\r\n    @media (max-width: 768px) {\r\n        font-size: 16px;\r\n    }\r\n`;\r\n\r\nexport const ZeroBalanceHeader = styled.div`\r\n    color: ${props => props.theme.wallet.text.primary};\r\n    width: 100%;\r\n    font-size: 14px;\r\n    margin-bottom: 5px;\r\n`;\r\n\r\nexport const TokenParamLabel = styled.span`\r\n    font-weight: bold;\r\n`;\r\n\r\nexport const AlertMsg = styled.p`\r\n    color: ${props => props.theme.forms.error} !important;\r\n`;\r\n\r\nexport const ConvertAmount = styled.div`\r\n    color: ${props => props.theme.wallet.text.secondary};\r\n    width: 100%;\r\n    font-size: 14px;\r\n    margin-bottom: 10px;\r\n    font-weight: bold;\r\n    @media (max-width: 768px) {\r\n        font-size: 12px;\r\n    }\r\n`;\r\n","import * as React from 'react';\r\nimport { CashLoader } from '@components/Common/CustomIcons';\r\nimport { AlertMsg } from '@components/Common/Atoms';\r\n\r\nconst ApiError = () => {\r\n    return (\r\n        <>\r\n            <AlertMsg>\r\n                <b>API connection lost.</b>\r\n                <br /> Re-establishing connection...\r\n            </AlertMsg>\r\n            <CashLoader />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ApiError;\r\n","export default __webpack_public_path__ + \"static/media/checkout_icon.bd1106d2.svg\";","import styled from \"styled-components\";\r\n\r\nexport const CheckoutHeader = styled.div`\r\n\tdisplay: flex;\r\n\tmargin: 0 auto 1rem;\r\n\tflex-direction: column;\r\n\th4 {\r\n\t\tfont-size: 1rem;\r\n\t\tline-height: 1.5;\r\n\t\ttext-align: center;\r\n\r\n\t\tcolor: #8a8a8a;\r\n\t}\r\n\thr {\r\n\t\tdisplay: inline-flex;\r\n\t\theight: 1px;\r\n\t\twidth: 3rem;\r\n\t\tborder: 0;\r\n\t\tbackground: rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\th1 {\r\n\t\tfont-size: 1.5rem;\r\n\t\tline-height: 1.5;\r\n\t\tfont-weight: 800;\r\n\t\ttext-align: center;\r\n\r\n\t\tcolor: #000000;\r\n\t}\r\n`;\r\n\r\nexport const CheckoutStyles = styled.div`\r\n\ttext-align: left;\r\n\tletter-spacing: -0.01em;\r\n`;\r\nexport const PaymentDetails = styled.div`\r\n\tdisplay: flex;\r\n\tmargin: 0 auto;\r\n\tflex-direction: column;\r\n\ttext-align: left;\r\n\t.title {\r\n\t\tfont-weight: 600;\r\n\t\tfont-size: 1rem;\r\n\t\tmargin-bottom: 0.5rem;\r\n\t\tline-height: 1.25;\r\n\r\n\t\tcolor: #8a8a8a;\r\n\t}\r\n\r\n\t.offer-description {\r\n\t\tfont-weight: 400;\r\n\t\tfont-size: 1rem;\r\n\t\tline-height: 1.25;\r\n\t\tmin-height: 2.5rem;\r\n\t\tmargin: 0 0 0rem;\r\n\r\n\t\tcolor: #000000;\r\n\t}\r\n\r\n\t.merchant {\r\n\t\tdisplay: block;\r\n\t\tfont-weight: 400;\r\n\t\tfont-size: 0.875rem;\r\n\t\tline-height: 1.25;\r\n\r\n\t\tcolor: #000000;\r\n\t}\r\n`;\r\nexport const PurchaseAuthCode = styled.div`\r\n\tdisplay: flex;\r\n\tmargin: 0 auto;\r\n\tflex-direction: column;\r\n\r\n\ttext-align: left;\r\n\t.text-muted {\r\n\t\tdisplay: block;\r\n\t\tfont-weight: 400;\r\n\t\tfont-size: 0.875rem;\r\n\t\tline-height: 1.25;\r\n\t\tmargin-bottom: 0;\r\n\r\n\t\tcolor: #8a8a8a;\r\n\t}\r\n\r\n\t.text-muted-small {\r\n\t\tdisplay: block;\r\n\t\tfont-weight: 400;\r\n\t\tfont-size: 0.7rem;\r\n\t\tline-height: 1.25;\r\n\t\tmargin-bottom: 0;\r\n\r\n\t\tcolor: #8a8a8a;\r\n\t}\r\n\r\n\t.text-red {\r\n\t\tdisplay: block;\r\n\t\tfont-weight: 400;\r\n\t\tfont-size: 0.875rem;\r\n\t\tline-height: 1.25;\r\n\t\tmargin-bottom: 0;\r\n\r\n\t\tcolor: red;\r\n\t}\r\n`;\r\n\r\nexport const Heading = styled.h3`\r\n\tfont-weight: 600;\r\n\tfont-size: 1.125rem;\r\n\tmargin-bottom: 0.75rem;\r\n\tline-height: 1.25;\r\n\r\n\tcolor: #000;\r\n`;\r\nexport const ListItem = styled.div`\r\n\twidth: 100%;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tmargin: 0.75rem auto;\r\n\tflex-direction: row;\r\n\tjustify-content: space-between;\r\n\t&.min-m {\r\n\t\tmargin: 0.25rem auto;\r\n\t}\r\n\t.bold {\r\n\t\tfont-weight: 800;\r\n\t}\r\n\t.gray {\r\n\t\tcolor: #8a8a8a;\r\n\t}\r\n\t.black {\r\n\t\tcolor: #000;\r\n\t}\r\n\r\n\t.key,\r\n\t.value {\r\n\t\tfont-size: 1rem;\r\n\t\tline-height: 1.25;\r\n\t}\r\n\r\n\t.value {\r\n\t\ttext-align: right;\r\n\t}\r\n`;\r\n\r\nexport const CheckoutIcon = styled.img`\r\n\twidth: 2rem;\r\n\tdisplay: block;\r\n\tmargin: 0 auto 0.5rem;\r\n`;\r\n\r\nexport const HorizontalSpacer = styled.hr`\r\n\tdisplay: block;\r\n\theight: 1px;\r\n\twidth: 100%;\r\n\tborder: 0;\r\n\tmargin: 0.6rem 0;\r\n\tbackground: rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nexport const AgreeOverlay = styled.div`\r\n\tposition: absolute;\r\n\ttop: 0;\r\n\tbottom: 0;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbackground: rgba(0, 0, 0, 0.5);\r\n\ttransition: opacity 200ms;\r\n\tz-index: 3000;\r\n`;\r\n\r\nexport const AgreeModal = styled.div`\r\n\tmargin: 30px auto;\r\n\tpadding: 20px;\r\n\tbackground: #fff;\r\n\tborder: 1px solid #666;\r\n\twidth: 80%;\r\n\tborder-radius: 6px;\r\n\tbox-shadow: 0 0 50px rgba(0, 0, 0, 0.5);\r\n\tposition: relative;\r\n\r\n\tp {\r\n\t\tcolor: #8a8a8a;\r\n\t\ttext-align: justify;\r\n  \t\ttext-justify: inter-word;\r\n\t}\r\n\r\n\t.first {\r\n\t\tmargin-top: 1em;\r\n\t}\r\n\r\n\t.key,\r\n\t.value {\r\n\t\tfont-size: 1rem;\r\n\t\tline-height: 1.25;\r\n\t}\r\n\t.black {\r\n\t\tcolor: #000;\r\n\t}\r\n`;","import React, { useState, useEffect, useRef } from 'react';\r\nimport { \r\n    useLocation,\r\n    useHistory\r\n} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { WalletContext } from '@utils/context';\r\nimport {\r\n    Form,\r\n    Modal,\r\n    Spin\r\n} from 'antd';\r\nimport { CashLoadingIcon } from '@components/Common/CustomIcons';\r\nimport PrimaryButton from '@components/Common/PrimaryButton';\r\nimport useBCH from '@hooks/useBCH';\r\nimport {\r\n    sendXecNotification,\r\n    sendTokenNotification,\r\n    selfMintTokenNotification,\r\n    errorNotification,\r\n} from '@components/Common/Notifications';\r\nimport {\r\n    currency\r\n} from '@components/Common/Ticker.js';\r\nimport { Event } from '@utils/GoogleAnalytics';\r\nimport { fiatToCrypto } from '@utils/validation';\r\nimport { \r\n    getWalletState,\r\n    fromSmallestDenomination\r\n} from '@utils/cashMethods';\r\nimport ApiError from '@components/Common/ApiError';\r\nimport { formatFiatBalance } from '@utils/validation';\r\nimport cashaddr from 'ecashaddrjs';\r\nimport { getUrlFromQueryString } from '@utils/bip70';\r\nimport { getPaymentRequest } from '../../utils/bip70';\r\nimport { \r\n    Output,\r\n    Script,\r\n    script\r\n} from 'bcash';\r\nconst { SLP } = script;\r\nimport { U64 } from 'n64';\r\nimport CheckOutIcon from \"@assets/checkout_icon.svg\";\r\nimport {\r\n\tCheckoutHeader,\r\n\tCheckoutStyles,\r\n\tPaymentDetails,\r\n\tPurchaseAuthCode,\r\n\tHeading,\r\n\tListItem,\r\n\tCheckoutIcon,\r\n\tHorizontalSpacer,\r\n    AgreeOverlay,\r\n    AgreeModal,\r\n} from \"../../assets/styles/checkout.styles\";\r\nimport WertModule from '@wert-io/module-react-component';\r\nimport { HostedForm } from 'react-acceptjs';\r\nimport GooglePayButton from \"@google-pay/button-react\";\r\n\r\n\r\nconst Checkout = ({ passLoadingStatus }) => {\r\n    // use balance parameters from wallet.state object and not legacy balances parameter from walletState, if user has migrated wallet\r\n    // this handles edge case of user with old wallet who has not opened latest Cashtab version yet\r\n\r\n    // If the wallet object from ContextValue has a `state key`, then check which keys are in the wallet object\r\n    // Else set it as blank\r\n    const ContextValue = React.useContext(WalletContext);\r\n    const location = useLocation();\r\n    const { \r\n        wallet,\r\n        forceWalletUpdate,\r\n        fiatPrice, \r\n        apiError, \r\n        cashtabSettings \r\n    } = ContextValue;\r\n    const walletState = getWalletState(wallet);\r\n    const { \r\n        tokens,\r\n        balances\r\n    } = walletState;\r\n    // Modal settings\r\n    const purchaseTokenIds = [\r\n        '52b12c03466936e7e3b2dcfcff847338c53c611ba8ab74dd8e4dadf7ded12cf6', // production v2\r\n        '4075459e0ac841f234bc73fc4fe46fe5490be4ed98bc8ca3f9b898443a5a381a' // sandbox v2\r\n    ];\r\n\r\n    const paymentServers = [\r\n        'https://pay.badger.cash/i/'\r\n    ]\r\n\r\n    const blankFormData = {\r\n        dirty: true,\r\n        value: '',\r\n        address: '',\r\n    };\r\n\r\n    const [formData, setFormData] = useState(blankFormData);\r\n    let tokenFormattedBalance;\r\n    if (formData.token) {\r\n        const token = tokens.find(token => \r\n            token.tokenId === formData.token.tokenId\r\n        );\r\n        if (token) {\r\n            const tokenBalance = token.balance.toString();\r\n            tokenFormattedBalance = (tokenBalance / (10 ** token.info.decimals))\r\n                .toString();\r\n        } else {\r\n            tokenFormattedBalance = '0';\r\n        }\r\n    }\r\n\r\n    const [sendBchAddressError, setSendBchAddressError] = useState(false);\r\n    const [sendBchAmountError, setSendBchAmountError] = useState(false);\r\n    const [selectedCurrency, setSelectedCurrency] = useState(currency.ticker);\r\n\r\n    // Support cashtab button from web pages\r\n    const [prInfoFromUrl, setPrInfoFromUrl] = useState(false);\r\n\r\n    // Show a confirmation modal on transactions created by populating form from web page button\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [isSending, setIsSending] = useState(false);\r\n\r\n    const [hasAgreed, setHasAgreed] = useState(false);\r\n\r\n    const [tokensMinted, setTokensMinted] = useState(false);\r\n    const [tokensSent, setTokensSent] = useState(null); // null or txid\r\n    const [paymentId, setPaymentId] = useState(null); // paymentId as stored in the BUX db\r\n    const [purchaseTokenAmount, setPurchaseTokenAmount] = useState(0);\r\n\r\n    const calculateFiat = (purchaseTokenAmount) => {\r\n        const exchangeAdditionalAmount = (purchaseTokenAmount * .01).toFixed(2); // Exchange rate\r\n        const feeAmount = ((Number(purchaseTokenAmount) + Number(exchangeAdditionalAmount)) * .04).toFixed(2); // Add 4% fee\r\n        const totalAmount = (Number(purchaseTokenAmount) + Number(exchangeAdditionalAmount) + Number(feeAmount)).toFixed(2);\r\n        return {\r\n            exchangeAdditionalAmount,\r\n            feeAmount,\r\n            totalAmount\r\n        }\r\n    };\r\n\r\n    const {\r\n        exchangeAdditionalAmount,\r\n        feeAmount,\r\n        totalAmount\r\n    } = calculateFiat(purchaseTokenAmount);\r\n\r\n    const isSandbox = purchaseTokenIds.slice(1).includes(formData.token?.tokenId);\r\n    // const tokenTypeVersion = purchaseTokenIds.slice(2).includes(formData.token?.tokenId) ? 2 : 1;\r\n    const tokenTypeVersion = 2\r\n\r\n    // Postage Protocol Check (for BURN)\r\n    const [postageData, setPostageData] = useState(null);\r\n    const [usePostage, setUsePostage] = useState(false);\r\n\r\n    const [uuid, setUuid] = useState(null);\r\n\r\n    const [formToken, setFormToken] = useState(null);\r\n\r\n    const divRef = useRef(null);\r\n\r\n    const buildUuid = async (purchaseTokenAmount) => {\r\n        if (uuid) {\r\n            // console.log('uuid', uuid);\r\n            return uuid;\r\n        }\r\n\r\n        let uuidHex = '01';\r\n        const prUrlArray = prInfoFromUrl.url.split('/');\r\n        const prId = prUrlArray[prUrlArray.length - 1];\r\n        const prUrlIndex = paymentServers.findIndex(server => server === prInfoFromUrl.url.replace(prId, ''));\r\n        if (prUrlIndex < 0) {\r\n            return errorNotification(new Error(), \r\n                'Invalid payment server', \r\n                `Fetching invoice: ${prInfoFromUrl.url}`\r\n            );\r\n        }\r\n        uuidHex += `0${prUrlIndex}${Buffer.from(prId, 'utf8').toString('hex')}`;\r\n        // Write amount as Big Endian buffer\r\n        const buf = Buffer.allocUnsafe(4);\r\n        buf.writeUInt32BE(purchaseTokenAmount * (10 ** 4), 0); // hardcoded for BUX. fix this\r\n        // console.log('base token amount uuid hex', buf.toString('hex'))\r\n        uuidHex += buf.toString('hex');\r\n        // fetch address alias\r\n        const aliasUrl = `https://${isSandbox ? 'dev-api.' : ''}bux.digital/v2/addressalias/${wallet.Path1899.slpAddress}`\r\n        const response = await fetch(aliasUrl, {\r\n            method: 'get',\r\n        });\r\n\r\n        const alias = (await response.json()).alias;\r\n        uuidHex += alias;\r\n        // add nonce\r\n        const genRanHex = size => [...Array(size)].map(() => Math.floor(Math.random() * 16).toString(16)).join('');\r\n        uuidHex += genRanHex(2);\r\n\r\n        const formattedUuid = `${uuidHex.slice(0, 8)}-${uuidHex.slice(8, 12)}-${uuidHex.slice(12, 16)}-${uuidHex.slice(16, 20)}-${uuidHex.slice(20, 32)}`\r\n        // console.log('formattedUuid', formattedUuid);\r\n        setUuid(formattedUuid);\r\n        return formattedUuid;\r\n    }\r\n\r\n    const fetchFormToken = async (purchaseAmount) => {\r\n        const tokenUrl = `https://${isSandbox ? 'dev-api.' : ''}bux.digital/v2/authpaymenttoken`;\r\n        const response = await fetch(tokenUrl, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                usdamount: Number(calculateFiat(purchaseAmount).totalAmount),\r\n                buxamount: purchaseAmount,\r\n                address: wallet.Path1899.slpAddress,\r\n                prurl: prInfoFromUrl.url\r\n            }),\r\n        });\r\n        const token = (await response.json()).token;\r\n        // console.log('token', token)\r\n        return setFormToken(token);\r\n    }\r\n\r\n    const prefixesArray = [\r\n        ...currency.prefixes,\r\n        ...currency.tokenPrefixes\r\n    ]\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        // setIsModalVisible(false);\r\n        setIsSending(true);\r\n        send();\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const sleep = (ms) => {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    const history = useHistory();\r\n\r\n    const { \r\n        getBcashRestUrl, \r\n        sendBip70,\r\n        sendSelfMint,\r\n        sendSelfMintV2,\r\n        generateBurnTx,\r\n        getMintVaultAddress,\r\n        getPostage,\r\n        readAuthCode\r\n    } = useBCH();\r\n\r\n    // If the balance has changed, unlock the UI\r\n    // This is redundant, if backend has refreshed in 1.75s timeout below, UI will already be unlocked\r\n    useEffect(() => {\r\n        passLoadingStatus(false);\r\n    }, [balances.totalBalance]);\r\n\r\n    useEffect(() => {\r\n        // Check to see if purchase modal should be shown\r\n        if (formData.token) {\r\n            const difference = (Number(tokenFormattedBalance) - Number(formData.value))\r\n                .toFixed(formData.token.decimals);\r\n            if (purchaseTokenIds.includes(formData.token?.tokenId)) {\r\n                // Set amount to purchase\r\n                // TODO allow usage of existing balance\r\n                // let purchaseAmount = difference < 0 ? Math.abs(difference) : 0\r\n                let purchaseAmount = Number(Number(formData.value).toFixed(formData.token.decimals))\r\n                if (purchaseAmount > 0) {\r\n                    const rounded = Math.ceil(purchaseAmount * 100) / 100;\r\n                    purchaseAmount = rounded < 1 ? 1 : rounded;\r\n                }\r\n                setPurchaseTokenAmount(purchaseAmount);\r\n                buildUuid(purchaseAmount);\r\n                fetchFormToken(purchaseAmount);\r\n            }\r\n        }\r\n    }, [tokenFormattedBalance]);\r\n\r\n    useEffect(async () => {\r\n        if (!wallet.Path1899)\r\n            return history.push('/wallet');\r\n        passLoadingStatus(true);\r\n        // Manually parse for prInfo object on page load when SendBip70.js is loaded with a query string\r\n\r\n        // Do not set prInfo in state if query strings are not present\r\n        if (\r\n            !window.location ||\r\n            !window.location.hash ||\r\n            (window.location.search == '' && window.location.hash === '#/sendBip70')\r\n        ) {\r\n            passLoadingStatus(false);\r\n            return;\r\n        }\r\n\r\n        const fullQueryString = window.location.search == '' ? \r\n            window.location.hash : window.location.search;\r\n\r\n        const delimiterIndex = fullQueryString.indexOf('?');\r\n        const txInfoArr = fullQueryString\r\n            .slice(delimiterIndex+1)\r\n            .split('&');\r\n\r\n        // Iterate over this to create object\r\n        const prInfo = {};\r\n        for (let i = 0; i < txInfoArr.length; i += 1) {\r\n            const delimiterIndex = txInfoArr[i].indexOf('=');\r\n            const param = txInfoArr[i]\r\n                .slice(0, delimiterIndex)\r\n                .toLowerCase();\r\n            // Forward to selfMint if auth code is specified\r\n            if (param == 'mintauth') {\r\n                console.log('has mintauth')\r\n                return history.push('/selfMint');\r\n            }\r\n\r\n            const encodedValue = txInfoArr[i].slice(delimiterIndex+1);\r\n            const value = decodeURIComponent(encodedValue);\r\n            const prefix = value.split(':')[0];\r\n            if (param === 'uri' && prefixesArray.includes(prefix)) {\r\n                const queryString = value.split('?')[1];\r\n                const url = getUrlFromQueryString(queryString);\r\n                if (url) {\r\n                    prInfo.type = prefix.toLowerCase();\r\n                    prInfo.url = url;\r\n                }\r\n            }\r\n        }\r\n        // console.log(`prInfo from page params`, prInfo);\r\n        if (prInfo.url && prInfo.type) {\r\n            try {\r\n                prInfo.paymentDetails = (await getPaymentRequest(\r\n                    prInfo.url, \r\n                    prInfo.type\r\n                )).paymentDetails;\r\n                prInfo.paymentDetails.merchantDataJson = JSON.parse(prInfo.paymentDetails.merchantData.toString());\r\n                // console.log('prInfo.paymentDetails.merchantDataJson', prInfo.paymentDetails.merchantDataJson)\r\n            } catch (err) {\r\n                errorNotification(err, \r\n                    'Failed to fetch invoice. May be expired or invalid', \r\n                    `Fetching invoice: ${prInfo.url}`\r\n                );\r\n                await sleep(3000);\r\n                // Manually disable loading\r\n                passLoadingStatus(false);\r\n                window.history.replaceState(null, '', window.location.origin);\r\n                return history.push(`/wallet`);\r\n            }\r\n        } else {\r\n            passLoadingStatus(false);\r\n            return history.push('/wallet');\r\n        }\r\n        setPrInfoFromUrl(prInfo);\r\n        prInfo.paymentDetails.type = prInfo.type;\r\n        await populateFormsFromPaymentDetails(prInfo.paymentDetails);\r\n\r\n        passLoadingStatus(false);\r\n    }, []);\r\n\r\n    async function populateFormsFromPaymentDetails(paymentDetails) {\r\n        if (!paymentDetails)\r\n            return;\r\n        const txInfo = {};\r\n        // Define postage object in case of BURN\r\n        let postageObj;\r\n        // Begin parsing BIP70 Payment Request\r\n        if (paymentDetails.type === 'ecash') {\r\n            const address = Script.fromRaw(\r\n                Buffer.from(paymentDetails.outputs[0].script)\r\n            ).getAddress().toString();\r\n            const totalSats = paymentDetails.outputs.reduce((total, output) => {\r\n                return total + output.value\r\n            }, 0);\r\n            txInfo.address = address;\r\n            txInfo.value = fromSmallestDenomination(totalSats);\r\n\r\n        } else if (paymentDetails.type === 'etoken') {\r\n            const slpScript = SLP.fromRaw(Buffer.from(\r\n                paymentDetails.outputs[0].script\r\n            ));\r\n            // Be sure it is valid SLP transaction\r\n            if (slpScript.isValidSlp()) {\r\n                const tokenIdBuf = slpScript.getData(4);\r\n                // Handle SEND and BURN\r\n                let tokenAddress;\r\n                let sendRecords;\r\n                if (slpScript.getType() === 'SEND') {\r\n                    const cashAddress = Script.fromRaw(\r\n                        Buffer.from(paymentDetails.outputs[1].script)\r\n                    ).getAddress().toString();\r\n                    const decodedAddress = cashaddr.decode(cashAddress);\r\n                    tokenAddress = cashaddr.encode(\r\n                        'etoken',\r\n                        decodedAddress.type,\r\n                        decodedAddress.hash\r\n                    )\r\n                    sendRecords = slpScript.getRecords(tokenIdBuf);\r\n                } else if (slpScript.getType() === 'BURN') {\r\n                    tokenAddress = '**BURN**'\r\n                    sendRecords = [{\r\n                        value: slpScript.getData(5)\r\n                    }]\r\n                    // Get postage info\r\n                    postageObj = await getPostage(\r\n                        tokenIdBuf.toString('hex')\r\n                    );\r\n                } else {\r\n                    throw new Error(\r\n                        `Unsupported SLP transaction type: ${slpScript.getType()}`\r\n                    );\r\n                }\r\n                // Compute total amount to send\r\n                const totalBase = sendRecords.reduce((total, record) => {\r\n                    return total.add(U64.fromBE(Buffer.from(record.value)));\r\n                }, U64.fromInt(0));\r\n                // console.log('totalBase', totalBase);\r\n\r\n                const tokenInfo = await fetch(\r\n                    `${getBcashRestUrl()}/token/${tokenIdBuf.toString('hex')}`\r\n                ).then(res => res.json());\r\n\r\n                txInfo.address = tokenAddress;\r\n                const tokenValue = totalBase.toInt() / (10 ** tokenInfo.decimals);\r\n                txInfo.value = `${tokenValue}`;\r\n                txInfo.token = tokenInfo;\r\n            }\r\n        }\r\n        \r\n        setFormData(txInfo);\r\n        if (postageObj) {\r\n            setPostageData(postageObj);\r\n            setUsePostage(true);\r\n        }\r\n    }\r\n\r\n    function handleSendXecError(errorObj, ticker) {\r\n        // Set loading to false here as well, as balance may not change depending on where error occured in try loop\r\n        passLoadingStatus(false);\r\n        let message;\r\n\r\n        if (!errorObj.error && !errorObj.message) {\r\n            message = `Transaction failed: no response from ${getBcashRestUrl()}.`;\r\n        } else if (\r\n            /Could not communicate with full node or other external service/.test(\r\n                errorObj.error,\r\n            )\r\n        ) {\r\n            message = 'Could not communicate with API. Please try again.';\r\n        } else if (\r\n            errorObj.error &&\r\n            errorObj.error.includes(\r\n                'too-long-mempool-chain, too many unconfirmed ancestors [limit: 50] (code 64)',\r\n            )\r\n        ) {\r\n            message = `The ${currency.ticker} you are trying to send has too many unconfirmed ancestors to send (limit 50). Sending will be possible after a block confirmation. Try again in about 10 minutes.`;\r\n        } else {\r\n            message =\r\n                errorObj.message || errorObj.error || JSON.stringify(errorObj);\r\n        }\r\n\r\n        errorNotification(errorObj, message, `Sending ${ticker}`);\r\n\r\n    }\r\n\r\n    async function send(rawChainTxs, authCodeB64, attempt = 1) {\r\n        setFormData({\r\n            ...formData,\r\n            dirty: false,\r\n        });\r\n\r\n        const { paymentDetails, type } = prInfoFromUrl;\r\n\r\n        // ensure prInfo exists\r\n        if (!paymentDetails) {\r\n            return;\r\n        }\r\n\r\n        // Event(\"Category\", \"Action\", \"Label\")\r\n        // Track number of XEC BIP70 transactions\r\n        Event('SendBip70.js', 'SendBip70', type);\r\n\r\n        passLoadingStatus(\"Please wait while your transaction is broadcast\");\r\n\r\n        try {\r\n            // Send transaction\r\n            const link = await sendBip70(\r\n                wallet,\r\n                paymentDetails,\r\n                currency.defaultFee,\r\n                false, // testOnly\r\n                false, // isPreburn\r\n                rawChainTxs\r\n            );\r\n            if (type == 'ecash')\r\n                sendTokenNotification(link);\r\n            else {\r\n                sendXecNotification(link);\r\n            }\r\n            \r\n            // Send to success page if included in merchantDetails\r\n            if (paymentDetails.merchantData) {\r\n                const merchantDataJson = JSON.parse(paymentDetails.merchantData.toString());\r\n                if (merchantDataJson.callback?.success_url) {\r\n                    return window.location.assign(merchantDataJson.callback.success_url);\r\n                }\r\n            }\r\n\r\n            const linkParts = link.split('/')\r\n            const sentTxid = linkParts[linkParts.length - 1]\r\n            setTokensSent(sentTxid)\r\n            // If doing a chain, force full wallet update\r\n            // UTXOs may not change (ie. in a mint chain)\r\n            if (rawChainTxs)\r\n                await forceWalletUpdate(true);\r\n            else\r\n                await sleep(3000);\r\n            // Manually disable loading\r\n            passLoadingStatus(false);\r\n            // // Return to main wallet screen\r\n            // window.history.replaceState(null, '', window.location.origin);\r\n            // return history.push(`/wallet`);\r\n        } catch (e) {\r\n            console.error(e)\r\n            // Retry send if response is 402 or 404 (mitigates stamp/baton race conditions)\r\n            if ((e.cause.code === 402 || e.cause.code === 404) && attempt < 3) {\r\n                const nextAttempt = attempt + 1;\r\n                passLoadingStatus(`Payment unsuccessful. Retrying... (${nextAttempt}/3)`);\r\n                await sleep(5000);\r\n                if (authCodeB64)\r\n                    return doSelfMint(authCodeB64, nextAttempt);\r\n                else\r\n                    return send(null, null, nextAttempt)\r\n            } else {\r\n                const ticker = type == 'etoken' ?\r\n                    currency.tokenTicker : currency.ticker;\r\n                handleSendXecError(e, ticker);\r\n            }\r\n        }\r\n        \r\n        // Manually disable loading\r\n        passLoadingStatus(false);\r\n    }\r\n\r\n    const doSelfMint = async (authCodeB64, attempt = 1, rawBurnTx) => {\r\n        setFormData({\r\n            ...formData,\r\n            dirty: false,\r\n        });\r\n\r\n        // ensure prInfo exists\r\n        if (!authCodeB64) {\r\n            return;\r\n        }\r\n\r\n        // TODO: Handle many different tokens\r\n        const tokenId = Buffer.from(\r\n            formData.token.tokenId,\r\n            'hex'\r\n        );\r\n\r\n        // Event(\"Category\", \"Action\", \"Label\")\r\n        // Track number of XEC BIP70 transactions\r\n        Event('SelfMint.js', 'SelfMint', authCodeB64);\r\n\r\n        passLoadingStatus(\"Please wait while your tokens are minted\");\r\n\r\n        //const doChainedMint = Number(tokenFormattedBalance) === 0;\r\n        // default to always doing a chained mint here, don't show SEND button\r\n        const doChainedMint = true;\r\n\r\n        try {\r\n            const { \r\n                version\r\n            } = readAuthCode(authCodeB64);\r\n            // Send transaction\r\n            let rawMintTx;\r\n            if (version === 1) {\r\n                rawMintTx = await sendSelfMint(\r\n                    wallet,\r\n                    tokenId,\r\n                    authCodeB64,\r\n                    false, // testOnly\r\n                    doChainedMint\r\n                );\r\n            } else {\r\n                rawMintTx = await sendSelfMintV2(\r\n                    wallet,\r\n                    authCodeB64,\r\n                    false, // testOnly\r\n                    doChainedMint,\r\n                    rawBurnTx,\r\n                    isSandbox\r\n                );\r\n            }\r\n\r\n            setTokensMinted(true);\r\n\r\n            if (doChainedMint)\r\n                return send(\r\n                    [\r\n                        ...rawBurnTx ? [rawBurnTx] : [], \r\n                        rawMintTx\r\n                    ],\r\n                    authCodeB64,\r\n                    attempt\r\n                )\r\n\r\n            selfMintTokenNotification();\r\n            // Sleep for 10 seconds and then \r\n            // await sleep(10000);\r\n            forceWalletUpdate();\r\n            // Manually disable loading\r\n            return passLoadingStatus(true);\r\n            // return window.location.reload();\r\n        } catch (e) {\r\n            handleSendXecError(e, authCodeB64);\r\n        }\r\n    }\r\n\r\n    const checkSufficientFunds = () => {\r\n        if (formData.token) {\r\n            return Number(tokenFormattedBalance) >= Number(formData.value)\r\n        } else if (formData) {\r\n            return Number(balances.totalBalance) > Number(formData.value)\r\n        }\r\n        return false\r\n    }\r\n\r\n    // Display price in USD below input field for send amount, if it can be calculated\r\n    let fiatPriceString = '';\r\n    if (fiatPrice !== null && !isNaN(formData.value)) {\r\n        if (selectedCurrency === currency.ticker) {\r\n            // calculate conversion to fiatPrice\r\n            fiatPriceString = `${(fiatPrice * Number(formData.value)).toFixed(\r\n                2,\r\n            )}`;\r\n\r\n            // formats to fiat locale style\r\n            fiatPriceString = formatFiatBalance(Number(fiatPriceString));\r\n\r\n            // insert symbol and currency before/after the locale formatted fiat balance\r\n            fiatPriceString = `${\r\n                cashtabSettings\r\n                    ? `${\r\n                          currency.fiatCurrencies[cashtabSettings.fiatCurrency]\r\n                              .symbol\r\n                      } `\r\n                    : '$ '\r\n            } ${fiatPriceString} ${\r\n                cashtabSettings && cashtabSettings.fiatCurrency\r\n                    ? cashtabSettings.fiatCurrency.toUpperCase()\r\n                    : 'USD'\r\n            }`;\r\n        } else {\r\n            fiatPriceString = `${\r\n                formData.value\r\n                    ? formatFiatBalance(\r\n                          Number(fiatToCrypto(formData.value, fiatPrice)),\r\n                      )\r\n                    : formatFiatBalance(0)\r\n            } ${currency.ticker}`;\r\n        }\r\n    }\r\n\r\n    const authorizenetSuccess = async (result) => {\r\n        try {\r\n            console.log('result', result);\r\n            const resultCode = result.messages?.resultCode\r\n            console.log('resultCode', resultCode)\r\n            \r\n            if (resultCode && resultCode !== 'Ok') {\r\n                console.log(`authorize.net responseCode ${result.responseCode}`)\r\n                passLoadingStatus(false);\r\n                return;\r\n            }\r\n\r\n            passLoadingStatus('Processing payment information...');\r\n            divRef.current.scrollIntoView();\r\n            let type = 'cc';\r\n            if (!resultCode && result.paymentMethodData?.tokenizationData) {\r\n                type = 'googlepay';\r\n                result.opaqueData = {\r\n                    dataDescriptor: 'COMMON.GOOGLE.INAPP.PAYMENT',\r\n                    dataValue: btoa(result.paymentMethodData?.tokenizationData.token)\r\n                };\r\n            }\r\n            const tokenUrl = `https://${isSandbox ? 'dev-api.' : ''}bux.digital/v2/authpaymenttransaction`;\r\n            const transResponse = await fetch(tokenUrl, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    usdamount: Number(calculateFiat(purchaseTokenAmount).totalAmount),\r\n                    buxamount: purchaseTokenAmount,\r\n                    address: wallet.Path1899.slpAddress,\r\n                    prurl: prInfoFromUrl.url,\r\n                    opaquedata: result.opaqueData,\r\n                    customerinformation: result.customerInformation,\r\n                    type\r\n                }),\r\n            });\r\n            \r\n            let transId;\r\n            try {\r\n                transId = (await transResponse.json()).transId;\r\n            } catch (err) {\r\n                console.log(err)\r\n                throw new Error('Card declined. Please check card information and try again.')\r\n            }\r\n            // Call your server to save the transaction\r\n            passLoadingStatus('Fetching authorization code...');\r\n            let burnTx;\r\n            const response = await fetch(`https://${isSandbox ? 'dev-api.' : ''}bux.digital/v${tokenTypeVersion}/success?paymentId=${result.transId || transId}`, {\r\n                method: 'get',\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                    // ...(burnTx) && ({'x-split-transaction': burnTx.toString('hex')})\r\n                }\r\n            });\r\n\r\n            let data;\r\n            try {\r\n                data = await response.json();\r\n            } catch (err) {\r\n                console.log(err)\r\n                throw new Error('Error retreiving auth code. Please contact merchant for assistance.')\r\n            }\r\n            setPaymentId(result.transId || transId)\r\n            doSelfMint(data.authcode, 1, burnTx);\r\n        } catch (err) {\r\n            console.log(err);\r\n            const { type } = prInfoFromUrl;\r\n            const ticker = type == 'etoken' ?\r\n                currency.tokenTicker : currency.ticker;\r\n            handleSendXecError(err, ticker);\r\n        }\r\n    }\r\n\r\n    const wertSuccess = async (result) => {\r\n        try {\r\n            console.log('result', result);\r\n            \r\n            if (result.status !== 'success') {\r\n                if (result.status === 'pending') {\r\n                    console.log('wert pending')\r\n                    divRef.current.scrollIntoView();\r\n                    // divRef.current.scrollTo({ top: 0, behavior: 'smooth' });\r\n                    passLoadingStatus(\r\n                        'Processing payment. This can take up to 60 seconds.'\r\n                    );\r\n                } else {\r\n                    console.log(`wert ${result.status}`)\r\n                    passLoadingStatus(false);\r\n                }\r\n                return;\r\n            }\r\n\r\n            // Your code here after capture the order\r\n            passLoadingStatus('true');\r\n            // Handle token/fiat split payment\r\n            let burnTx;\r\n            // if (Number(tokenFormattedBalance) >= .01) {\r\n            //     passLoadingStatus('Adding existing wallet balance to payment...');\r\n            //     const mintVaultBatonOutput = new Output({\r\n            //         address: getMintVaultAddress(isSandbox),\r\n            //         value: 5700\r\n            //     })\r\n            //     burnTx = await generateBurnTx(\r\n            //         wallet,\r\n            //         formData.token.tokenId,\r\n            //         [],\r\n            //         mintVaultBatonOutput\r\n            //     );\r\n            // }\r\n            // console.log('burnTx', burnTx && burnTx.toString('hex'))\r\n            // passLoadingStatus('Fetching authorization code...');\r\n            // // Call your server to save the transaction\r\n            // const response = await fetch(`https://${isSandbox ? 'dev-api.' : ''}bux.digital/v${tokenTypeVersion}/success?paymentId=${result.order_id}`, {\r\n            //     method: 'get',\r\n            //     headers: {\r\n            //         'content-type': 'application/json',\r\n            //         ...(burnTx) && ({'x-split-transaction': burnTx.toString('hex')})\r\n            //     }\r\n            // });\r\n\r\n            // const data = await response.json();\r\n            doSelfMint(result.authcode, 1, burnTx);\r\n        } catch (err) {\r\n            console.log(err);\r\n            const { type } = prInfoFromUrl;\r\n            const ticker = type == 'etoken' ?\r\n                currency.tokenTicker : currency.ticker;\r\n            handleSendXecError(err, ticker);\r\n        }\r\n    }\r\n\r\n    const payButtonStyle = {\r\n        border: 'none',\r\n        color: 'rgb(255, 255, 255)',\r\n        backgroundImage: 'linear-gradient(270deg, rgb(0, 116, 194) 0%, rgb(39, 52, 152) 100%)',\r\n        transition: 'all 0.5s ease 0s',\r\n        backgroundSize: '200%',\r\n        fontSize: '18px',\r\n        width: '80%',\r\n        padding: '20px 0px',\r\n        borderRadius: '4px',\r\n        marginBottom: '20px',\r\n        cursor: 'pointer',\r\n    };\r\n\r\n    const priceApiError = fiatPrice === null && selectedCurrency !== 'XEC';\r\n\r\n    const displayBalance = tokenFormattedBalance || balances.totalBalance;\r\n    const displayTicker = formData.token?.ticker || currency.ticker;\r\n    const { invoice, merchant_name, offer_description, offer_name } = prInfoFromUrl.paymentDetails?.merchantDataJson?.ipn_body || {};\r\n    const isStage1 = !checkSufficientFunds() || apiError || sendBchAmountError || sendBchAddressError || !prInfoFromUrl;\r\n    // For making SEND button available\r\n    if (!isStage1) {\r\n        passLoadingStatus(false);\r\n    }\r\n\r\n    const payButtonText = 'PAY WITH CREDIT CARD';\r\n    const payFormHeaderText = `Pay $${totalAmount} - Self-mint Authorization Code (${purchaseTokenAmount} ${displayTicker})`\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                title=\"Confirm Send\"\r\n                visible={isModalVisible}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n            >\r\n                <p>\r\n                    Are you sure you want to send {formData.value}{' '}\r\n                    {displayTicker} to settle this payment request?\r\n                </p>\r\n            </Modal>\r\n\r\n                <CheckoutHeader ref={divRef} tabindex=\"-1\">\r\n                    <CheckoutIcon src={CheckOutIcon} />\r\n                    <h4>CHECKOUT</h4>\r\n                    <hr />             \r\n                    {(offer_name && (\r\n                        <>\r\n                            <h1>{offer_name}</h1>\r\n                        </>\r\n                    ))}                            \r\n                </CheckoutHeader>\r\n\r\n\t\t\t<CheckoutStyles>\r\n\t\t\t\t<PaymentDetails>\r\n\t\t\t\t\t<h3 className=\"title\">{tokensSent ? 'Receipt ' : 'Payment Request '}Details:</h3>\r\n                    {(offer_description && (\r\n                        <>\r\n                            <p className=\"offer-description\">{offer_description}</p>\r\n                            <span className=\"merchant\">From {merchant_name}</span>\r\n                        </>\r\n                    )) || (prInfoFromUrl && prInfoFromUrl.paymentDetails && (\r\n                        <>\r\n                            <p className=\"offer-description\">{prInfoFromUrl.paymentDetails.memo}</p>                        \r\n                        </>\r\n                    ))}\r\n\t\t\t\t</PaymentDetails>\r\n\r\n\t\t\t\t<HorizontalSpacer />\r\n\r\n\t\t\t\t{(isStage1 && (\r\n\t\t\t\t\t<>\r\n                        {!tokensSent ? (\r\n                            <PurchaseAuthCode>\r\n                                {!checkSufficientFunds() && <p className=\"text-muted\">You have insufficient funds in this wallet</p>}\r\n                                <ListItem className=\"min-m\">\r\n                                    <span className=\"key black\">Purchase an Auth Code for</span>\r\n                                    <span className=\"value black bold\">\r\n                                        {purchaseTokenAmount} {displayTicker}\r\n                                    </span>\r\n                                </ListItem>\r\n                                <p className=\"text-muted\">In order to settle this payment request</p>\r\n                            </PurchaseAuthCode>\r\n                        ) : (\r\n                            <PurchaseAuthCode>\r\n                                {!checkSufficientFunds() && <p className=\"text-muted\">Payment Success!</p>}\r\n                                <ListItem className=\"min-m\">\r\n                                    <span className=\"key black\">You purchased and used an Auth Code for</span>\r\n                                    <span className=\"value black bold\">\r\n                                        {purchaseTokenAmount} {displayTicker}\r\n                                    </span>\r\n                                </ListItem>\r\n                                <p className=\"text-muted\">{(new Date()).toString()}</p>\r\n                                {paymentId && (\r\n                                    <p className=\"text-muted\">BUX Order #{paymentId} </p>\r\n                                )}\r\n                                <p className=\"text-muted\">XEC transaction ID:</p>\r\n                                <p className=\"text-muted-small\">\r\n                                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://explorer.cert.cash/tx/${tokensSent}`}>{tokensSent}</a>\r\n                                </p>\r\n                                <p className=\"text-red\">Please screenshot or print this receipt for your records</p>\r\n                            </PurchaseAuthCode>\r\n                        )}\r\n\r\n\t\t\t\t\t\t<HorizontalSpacer />\r\n\r\n\t\t\t\t\t\t<Heading>Transaction Details:</Heading>\r\n\r\n\t\t\t\t\t\t<ListItem>\r\n\t\t\t\t\t\t\t<span className=\"key gray\">Subtotal:</span>\r\n\t\t\t\t\t\t\t<span className=\"value gray\">${purchaseTokenAmount.toFixed(2)}</span>\r\n\t\t\t\t\t\t</ListItem>\r\n\r\n\t\t\t\t\t\t<ListItem>\r\n\t\t\t\t\t\t\t<span className=\"key gray\">Fee:</span>\r\n\t\t\t\t\t\t\t<span className=\"value gray\">${(Number(exchangeAdditionalAmount) + Number(feeAmount)).toFixed(2)}</span>\r\n\t\t\t\t\t\t</ListItem>\r\n\r\n                        {tokensSent && (\r\n                            <ListItem>\r\n                                <span className=\"key gray\">Paid:</span>\r\n                                <span className=\"value gray\">-${totalAmount}</span>\r\n                            </ListItem>\r\n                        )}\r\n\r\n\t\t\t\t\t\t<ListItem>\r\n\t\t\t\t\t\t\t<span className=\"key gray bold\">Total:</span>\r\n\t\t\t\t\t\t\t<span className=\"value gray bold\">${tokensSent ? 0 : totalAmount}</span>\r\n\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t</>\r\n\t\t\t\t)) || (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<PurchaseAuthCode>\r\n\t\t\t\t\t\t\t<ListItem className=\"min-m\">\r\n\t\t\t\t\t\t\t\t<span className=\"key black\">Ready To Send</span>\r\n\t\t\t\t\t\t\t\t<span className=\"value black bold\">\r\n\t\t\t\t\t\t\t\t\t{formData.value} {displayTicker}\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t\t<p className=\"text-muted\">In order to settle this payment request</p>\r\n\t\t\t\t\t\t</PurchaseAuthCode>\r\n\t\t\t\t\t</>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t<HorizontalSpacer />\r\n                \r\n                {merchant_name && (\r\n                    <>\r\n                        <ListItem>\r\n                            <span className=\"key gray\">Merchant:</span>\r\n                            <span className=\"value gray\">{merchant_name}</span>\r\n                        </ListItem>                       \r\n                    </>\r\n                )}\r\n\r\n                {invoice && (\r\n                    <>\r\n                        <ListItem>\r\n                            <span className=\"key gray\">Invoice:</span>\r\n                            <span className=\"value gray\">{invoice}</span>\r\n                        </ListItem>                    \r\n                    </>\r\n                )}\r\n\r\n\t\t\t\t{(merchant_name || invoice) && (\r\n                    <>\r\n                        <HorizontalSpacer />                    \r\n                    </>\r\n                )}\r\n\t\t\t</CheckoutStyles>\r\n         \r\n            {isStage1 ? (\r\n                <>\r\n                    { hasAgreed && (\r\n                        <>\r\n                        {!tokensMinted && uuid && formToken ? \r\n                            <>\r\n                                <p className=\"text-muted\">\r\n                                    By making this purchase you agree to the\r\n                                    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://bux.digital/tos.html\"> Terms Of Service</a>\r\n                                </p>\r\n                                {prInfoFromUrl.paymentDetails.merchantDataJson.ipn_body?.offer_name ? (\r\n                                    <WertModule\r\n                                        style={{height: \"580px\"}}\r\n                                        options={{\r\n                                            partner_id: isSandbox ? '01H97V3M5ZZPVS7RXW2V2NXVN5' : '01HB6ASSZED5SH5V8KWQD1MR87' ,\r\n                                            origin: `https://${isSandbox ? 'sandbox' : 'widget'}.wert.io`,\r\n                                            click_id: uuid, // unique id of purchase in your system\r\n                                            currency: 'USD',\r\n                                            commodity: 'BUX', // name of your token in Wert system\r\n                                            network: isSandbox ? 'testnet' : 'mainnet', \r\n                                            address: wallet.Path1899.cashAddress,\r\n                                            commodities: JSON.stringify([\r\n                                                {\r\n                                                commodity: 'BUX',\r\n                                                network: isSandbox ? 'testnet' : 'mainnet',\r\n                                                }, // this restricts what currencies will be available in the widget\r\n                                            ]),\r\n                                            commodity_amount: purchaseTokenAmount, // amount being minted\r\n                                            listeners: {\r\n                                                loaded: () => console.log('Wert widget loaded'),\r\n                                                \"payment-status\": (result) => wertSuccess(result)\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                ) : (\r\n                                    <>\r\n                                        {isSandbox && (\r\n                                            <>\r\n                                                <HostedForm \r\n                                                    authData={{\r\n                                                        apiLoginID: isSandbox ? '25W2mLe5' : '469zGVDrekmC',\r\n                                                        clientKey: isSandbox ? '8TEqfrHqLh4UWqUY8Sf3H8fq5PyczM9gqfV927Rq8Q5eFwVs2P8UYn7H8MK8Fy4T' : '74AUbX9mjmMFFBs38EG8q46dEaxNy9kC6p8rK4f33nw6yGhFn6g62vrX5d2KGAQ8'\r\n                                                    }} \r\n                                                    onSubmit={authorizenetSuccess}\r\n                                                    environment={isSandbox ? 'SANDBOX' : 'PRODUCTION'}\r\n                                                    billingAddressOptions={{show: true, required: true}}\r\n                                                    buttonStyle={payButtonStyle}\r\n                                                    buttonText={payButtonText}\r\n                                                    formHeaderText={payFormHeaderText}\r\n                                                />\r\n\r\n                                                <GooglePayButton\r\n                                                    environment={isSandbox ? 'TEST' : 'PRODUCTION'}\r\n                                                    buttonColor=\"default\"\r\n                                                    buttonType=\"buy\"\r\n                                                    buttonSizeMode=\"fill\"\r\n                                                    paymentRequest={{\r\n                                                        apiVersion: 2,\r\n                                                        apiVersionMinor: 0,\r\n                                                        allowedPaymentMethods: [\r\n                                                        {\r\n                                                            type: \"CARD\",\r\n                                                            parameters: {\r\n                                                                allowedAuthMethods: [\"PAN_ONLY\", \"CRYPTOGRAM_3DS\"],\r\n                                                                allowedCardNetworks: [\"MASTERCARD\", \"VISA\", \"AMEX\"]\r\n                                                            },\r\n                                                            tokenizationSpecification: {\r\n                                                                type: \"PAYMENT_GATEWAY\",\r\n                                                                parameters: {\r\n                                                                    gateway: \"authorizenet\",\r\n                                                                    gatewayMerchantId: isSandbox ? \"873125\" : \"2601218\"\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                        ],\r\n                                                        merchantInfo: {\r\n                                                            merchantId: \"BCR2DN4TY24ZBPKF\",\r\n                                                            merchantName: \"Badger LLC\"\r\n                                                        },\r\n                                                        transactionInfo: {\r\n                                                        totalPriceStatus: \"FINAL\",\r\n                                                        totalPriceLabel: \"Total\",\r\n                                                        totalPrice: `${totalAmount}`,\r\n                                                        currencyCode: \"USD\",\r\n                                                        countryCode: \"US\"\r\n                                                        }\r\n                                                    }}\r\n                                                    onLoadPaymentData={authorizenetSuccess}\r\n                                                    style={{ width: '80%', height: '68px' }}\r\n                                                />\r\n                                            </>\r\n                                        )}\r\n                                        {!isSandbox && (\r\n                                            <p className=\"text-red\" style={{ color: 'red'}}>\r\n                                                Purchase via credit card is not available at this time.\r\n                                            </p>\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            </>\r\n                            : (\r\n                                <>\r\n                                    {isSending && !tokensSent ? <Spin spinning={true} indicator={CashLoadingIcon}></Spin> :\r\n                                    /* <PrimaryButton onClick={() => handleOk()}>Send</PrimaryButton>*/<></>}\r\n                                </>\r\n                            )\r\n                        }\r\n                        </>\r\n                    )}\r\n                </>\r\n            ) : (\r\n                <>\r\n                    {isSending && !tokensSent ? <Spin spinning={true} indicator={CashLoadingIcon}></Spin> :\r\n                    /* <PrimaryButton onClick={() => handleOk()}>Send</PrimaryButton>*/<></>}\r\n                </>\r\n            )}\r\n\r\n            {apiError && <ApiError />}\r\n\r\n            { !hasAgreed && isStage1 &&\r\n                <AgreeOverlay>\r\n                    <AgreeModal>\r\n                        <Heading>You are about to purchase a BUX Self-Mint Authorization Code</Heading>\r\n                        <HorizontalSpacer />\r\n                        <span className=\"key black\">To proceed you must agree to the following:</span>\r\n                        <p className=\" first\">1. The seller of the digital good in this transaction is \r\n                            <a \r\n                                target=\"_blank\" \r\n                                rel=\"noopener noreferrer\" \r\n                                href={prInfoFromUrl.paymentDetails?.merchantDataJson?.ipn_body?.offer_name ? \"https://wert.io\" : \"https://bux.digital\"}>\r\n                                    {prInfoFromUrl.paymentDetails?.merchantDataJson?.ipn_body?.offer_name ? ' WERT.IO' : ' BADGER LLC'}\r\n                            </a>\r\n                        </p>\r\n                        <p>2. This purchase is for an authorization code ONLY. It is not a purchase of digital currency, credits on any third-party platform, or any other product or service</p>\r\n                        <p>3. This unhosted wallet, upon receiving the authorization code (after your credit card payment is made), will mint and send BUX tokens to settle the payment request</p>\r\n                        <p>4. You have read and understand the BUX <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://bux.digital/tos.html\"> Terms Of Service</a></p>\r\n                        <PrimaryButton onClick={() => setHasAgreed(true)}>I Agree</PrimaryButton>\r\n                    </AgreeModal>\r\n                </AgreeOverlay>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\n/*\r\npassLoadingStatus must receive a default prop that is a function\r\nin order to pass the rendering unit test in SendBip70.test.js\r\n\r\nstatus => {console.log(status)} is an arbitrary stub function\r\n*/\r\n\r\nCheckout.defaultProps = {\r\n    passLoadingStatus: status => {\r\n        console.log(status);\r\n    },\r\n};\r\n\r\nCheckout.propTypes = {\r\n    passLoadingStatus: PropTypes.func,\r\n};\r\n\r\nexport default Checkout;\r\n"],"sourceRoot":""}