{"version":3,"sources":["utils/selfMint.js","assets/logo_primary.png","assets/logo_secondary.png","components/Common/Ticker.js","components/Common/PrimaryButton.js","utils/bip70.js","components/Common/Notifications.js","utils/GoogleAnalytics.js","hooks/useBCH.js","utils/validation.js","utils/mintHistory.js","utils/cashMethods.js","components/Common/CustomIcons.js","assets/fingerprint-solid.svg","assets/styles/theme.js","assets/cashtab_xec.png","components/Common/WalletLabel.js","assets/tabcash.png","assets/logo_topright.png","components/Authentication/SignUp.js","components/Authentication/SignIn.js","components/Authentication/ProtectableComponentWrapper.js","components/App.js","utils/tokenMethods.js","index.js","hooks/useAsyncTimeout.js","hooks/usePrevious.js","hooks/useWallet.js","utils/convertArrBuffBase64.js","hooks/useWebAuthentication.js","utils/context.js"],"names":["bio","require","bcash","MTX","consensus","hashType","Script","_bcash$script","script","hash256","SLP","common","opcodes","Hash256","_require","i64","authPubKeys","u64","tokenId","pubkey","imageUrl","buildOutScript","authPubKey","checkIsFirstInput","arguments","length","undefined","pushSym","pushInt","pushData","compile","TXUtil","_MTX","_inherits","_super","_createSuper","options","_classCallCheck","call","_createClass","key","value","index","prev","type","json","input","this","inputs","prevouts","ZERO_HASH","sequences","outputs","ANYONECANPAY","_hashPrevouts","_step","bw","pool","_iterator","_createForOfIteratorHelper","s","n","done","prevout","toWriter","err","e","f","rawPrevouts","map","toRaw","Buffer","concat","digest","render","mutable","SINGLE","NONE","_hashSequence","_step2","_iterator2","writeU32","sequence","_hashOutputs","_step3","size","_iterator3","getSize","_step4","_iterator4","rawOutputs","output","locktimeBuf","alloc","writeUInt32LE","locktime","typeBuf","version","outpoint","scriptCode","inputValue","fromInt","toLE","inputSequence","getVarSize","writeBytes","writeHash","hash","writeVarBytes","writeI64","currency","name","ticker","appUrl","logo","mainLogo","legacyPrefix","prefixes","coingeckoId","defaultFee","dustSats","etokenSats","cashDecimals","blockExplorerUrl","tokenExplorerUrl","blockExplorerUrlTestnet","tokenName","tokenTicker","tokenIconSubmitApi","tokenLogo","tokenPrefixes","tokenIconsUrl","postageUrl","txHistoryCount","hydrateUtxoBatchSize","defaultSettings","fiatCurrency","notificationDurationShort","notificationDurationLong","newTokenDefaultUrl","opReturn","opReturnPrefixHex","opReturnPushDataHex","opReturnAppPrefixLengthHex","appPrefixesHex","eToken","cashtab","settingsValidation","fiatCurrencies","usd","symbol","slug","aud","bhd","brl","gbp","cad","clp","cny","eur","hkd","inr","idr","ils","jpy","krw","nzd","nok","php","rub","twd","sar","zar","try","vnd","selfMintTokens","getCashtabEncodingSubstring","isCashtabOutput","hexStr","startsWith","extractCashtabMessage","hexSubstring","substring","replace","slice","extractExternalMessage","isValidCashPrefix","addressString","i","includes","isValidTokenPrefix","toCleanArray","addressArray","cleanArray","Error","arrayLength","testedAddress","addressValueArr","split","address","console","log","_cashaddr$decode2","cashaddr","decode","convertedArrayData","encode","push","parseAddress","isValidAddress","isToken","addressInfo","isValid","queryString","amount","paramCheck","cleanAddress","prefix","addrParams","URLSearchParams","has","BigNumber","parseInt","get","div","Math","pow","toString","PrimaryButton","styled","button","_templateObject","_taggedTemplateLiteral","props","theme","buttons","primary","color","backgroundImage","hoverShadow","SecondaryButton","_templateObject2","secondary","background","SmartButton","_templateObject3","_ref","_ref$disabled","disabled","_objectWithoutProperties","_excluded","getUrlFromQueryString","_queryString$split","_queryString$split2","_slicedToArray","queryParameter","queryData","urlString","prUrl","URL","protocol","href","_unused","validatePrUrl","getAsArrayBuffer","url","headers","Promise","accept","reject","req","XMLHttpRequest","open","Object","entries","forEach","_ref2","setRequestHeader","responseType","onload","event","resp","response","onerror","warn","send","postAsArrayBuffer","body","_ref3","_ref4","status","cause","code","getPaymentRequest","_ref5","_asyncToGenerator","_regeneratorRuntime","mark","_callee","paymentRequestUrl","paymentReq","res","resBuf","wrap","_context","next","Accept","sent","from","PaymentRequest","fromRaw","t0","verifyChain","verify","abrupt","stop","_x","_x2","apply","postPayment","_ref6","_callee2","paymentUrl","paymentObj","payment","rawbody","rawPaymentResponse","responseBuf","ack","_context2","Payment","PaymentACK","_x3","_x4","_x5","sendXecNotification","link","notification","success","message","description","React","target","rel","Paragraph","duration","icon","CashReceivedNotificationIcon","style","width","selfMintTokenNotification","TokenReceivedNotificationIcon","sendTokenNotification","xecReceivedNotification","balances","previousBalances","cashtabSettings","fiatPrice","parseFloat","Number","totalBalance","toFixed","toLocaleString","toUpperCase","eTokenReceivedNotification","receivedSlpTicker","receivedSlpQty","receivedSlpName","errorNotification","error","stringDescribingCallEvent","messageSignedNotification","msgSignature","MessageSignedNotificationIcon","GoogleAnalytics","_Component","logPageChange","location","pathname","search","prevLocation","_this$props$location","isDifferentPathname","isDifferentSearch","page","window","ReactGA","_objectSpread","origin","Component","Event","category","action","label","GoogleAnalyticsDefault","RouteTracker","createElement","Route","component","init","process","useBCH","SEND_BCH_ERRORS","POSTAGE_URL","getPostage","postageObj","stamp","fetch","stamps","find","weight","calculatePostage","inputCount","tokenRecipientCount","sendAmountArray","sendOpReturn","buildSendOpReturn","byteCount","getByteCount","P2PKH","stampsNeeded","ceil","rate","getBcashRestUrl","getTxBcash","txid","then","catch","getTxHistoryBcash","_callee3","addresses","limit","reverse","result","utxoPromises","txs","allTxs","_args3","_context3","addr","convertToEcashPrefix","all","_toConsumableArray","parseTokenInfoForTxHistory","unparsedTx","ownAddressArray","transactionType","slp","qtyReceived","qtySent","totalSent","filter","coin","reduce","curr","plus","totalReceived","divisor","slpToken","decimals","gte","minus","cashtabTokenInfo","getUtxoBcash","_callee4","_context4","getUtxosBcash","_callee5","utxos","allUtxos","_context5","_x6","getSlpBalancesAndUtxosBcash","_callee6","nonSlpUtxos","slpUtxos","tokensById","slpUtxo","token","tokens","_context6","utxo","hasBaton","balance","info","values","_x7","getMintHistory","_ref7","_callee7","minterPublicKey","mintHistory","_context7","_x8","broadcastTx","_ref8","_callee8","hex","_context8","method","JSON","stringify","tx","_x9","totalWeight","hasWitness","types","P2WPKH","P2SH","P2WSH","keys","keyParts","newKey","mAndN","item","multiplyer","indexOf","buildGenesisOpReturn","configObj","stringsArray","pushEmptyOp","Opcode","OP_PUSHDATA1","genesisOpReturn","pushPush","pushString","documentHash","isBuffer","decimalInt","mintBatonVout","batonInt","U64","fromString","initialQty","muln","toBE","buildMintOpReturn","mintQuantityBufBE","sendQuantityArray","sendQuantity","buildBurnOpReturn","burnQuantity","createToken","_ref9","_callee9","wallet","feeInSatsPerByte","testOnly","CREATION_ADDR","coins","keyRingArray","broadcast","txidStr","_args9","_context9","isValidStoredWallet","state","slpBalancesAndUtxos","Path1899","cashAddress","Coin","fromJSON","addOutput","fund","changeAddress","KeyRing","fromSecret","Path245","fundingWif","Path145","sign","_x10","_x11","_x12","sendToken","_ref11","_callee10","_ref10","tokenReceiverAddress","postageData","REMAINDER_ADDR","nonSlpCoins","tokenUtxos","tokenInfo","finalTokenAmountSent","postageAmount","tokenAmountBeingSentToAddress","totalTokenOutputAmount","tokenCoins","tokenCoin","postageBaseAmount","tokenAmountArray","tokenChangeAmount","decodedTokenReceiverAddress","cleanTokenReceiverAddress","decodedPostageAddress","cleanPostageAddress","_i","hashTypes","sighashType","rawTx","paymentAck","transactionIds","_args10","_context10","times","lte","gt","addCoin","Input","fromCoin","ALL","SIGHASH_FORKID","merchantData","transactions","refundTo","fromAddress","memo","t","TX","_x13","_x14","_x15","signPkMessage","_ref12","_callee11","pk","keyring","sig","_context11","utils","_x16","_x17","sendXec","_ref13","_callee12","optionalOpReturnMsg","isOneToMany","destinationAddressAndValueArray","destinationAddress","sendAmount","_script","_i2","_arrayLength","_i3","outputAddress","outputValue","_args12","_context12","sum","lt","fromSmallestDenomination","toSmallestDenomination","trim","_x18","_x19","_x20","_x21","_x22","_x23","_x24","sendBip70","_ref14","_callee13","paymentDetails","isPreburn","rawChainTxs","refundOutput","firstOutput","slpScript","isSlp","txOutputs","prOutputs","requestFulfilled","postagePaid","_sendRecords$","tokenIdBuf","listing","slpType","sendRecords","tokenVersion","totalBase","totalTokenBalance","parentTx","_slpScript","records","_loop","_i4","splitDetails","sendTotalString","opReturnOut","preburnOut","splitPayment","_merchantData","availableTokenUtxos","_i5","_tx","sigHashType","_i6","_i7","rawTxs","possibleExternalMint","_slpScript2","isMint","isVersion2","slpOutputs","mintQuantity","_i8","valueU64","_args14","_context14","Output","isValidSlp","toJSON","getData","postage","getType","getRecords","total","record","add","fromBE","_parentTx$outputs$_i","_context13","getAddress","r","vout","fromTX","delegateYield","PaymentDetails","fromOptions","preburn","height","coinbase","sub","toInt","splice","getString","fromNumber","toData","iadd","writeMempoolMint","token_id","block","minter_pubkey","publicKey","mint_total_amount","_x25","_x26","_x27","readAuthCode","authCode","authCodeBuf","readAuthCodeV2","authReader","read","readBytes","stampRawOutpoint","stampOutpoint","Outpoint","txAuthSig","offset","serializedMerkleProof","readVarBytes","mintId","minterPubKeyHash","batonBuf","batonUtxo","txSerializedOutputs","outputsReader","fromReader","sendSelfMint","_ref15","_callee14","returnRawTx","tokenIdString","_readAuthCode","_authPubKeys$find","outscript","outScriptHash","p2shPubKeyScript","p2shAddress","batonAddrUtxos","batonCoin","stampOutscript","stampOutScriptHash","stampUtxo","stampCoin","mintOpReturn","flags","outputSeq","prevoutSeq","p2shCoin","subscript","preimage","items","verified","_args15","_context15","authObj","Hash160","fromScripthash","toCashAddr","u","_u$slp","STANDARD_VERIFY_FLAGS","template","view","getOutput","signature","privateKey","getPreimage","getPublicKey","fromItems","getFee","_x28","_x29","_x30","outscriptHexV2","getOutscriptHexV2","sendSelfMintV2","_ref16","_callee15","rawBurnTx","isSandbox","_readAuthCode2","burnTx","batonFullUtxo","outScript","_args16","_context16","rhash","Address","hash160","_x31","_x32","generateBurnTx","_ref17","_callee16","utxosToBurn","batonOutput","burnOpReturn","estimatedTxSize","postageNeeded","refundScript","_args17","_context17","some","estimateSize","fromPubkeyhash","getKeyHash","_x33","_x34","calcFee","p2pkhOutputNumber","satoshisPerByte","parseTxData","txData","parsedTxHistory","parsedTx","destinationOutput","confirmations","blocktime","time","amountSent","amountReceived","opReturnMessage","isCashtabMessage","outgoingTx","tokenTx","senderAddress","j","thisInput","thisOutput","replyAddress","getMintVaultAddress","outscriptHex","shouldRejectAmountInput","cashAmount","selectedCurrency","totalCashBalance","testedAmount","fiatToCrypto","isNaN","fiatAmount","isValidCashtabSettings","settings","prototype","hasOwnProperty","formatSavedBalance","swBalance","optionalLocale","maximumFractionDigits","formatFiatBalance","fiatBalance","isValidSendToMany","valueString","isValidInput","mempoolMint","mempoolMints","localforage","getItem","setItem","t1","getMempoolMints","updateMempoolMints","unconfirmedMints","removeItem","amountBig","multiplier","toNumber","isBigNumber","dp","conversionFactor","formatBalance","unformattedBalance","loadStoredWallet","walletStateFromStorage","liveWalletState","thisTokenBalance","Array","isArray","_isBigNumber","balancesRebased","normalizeBalance","totalBalanceInSatoshis","previousBalance","getWalletState","hydratedUtxoDetails","bitcoincashPrefixedAddress","newPrefix","_cashaddr$decode","isLegacyMigrationRequired","CashLoadingIcon","LoadingOutlined","className","Image","src","preview","ThemedCopyOutlined","CopyOutlined","icons","outlined","ThemedDollarOutlined","DollarOutlined","ThemedWalletOutlined","WalletOutlined","ThemedQrcodeOutlined","QrcodeOutlined","_templateObject4","ThemedSettingOutlined","SettingOutlined","_templateObject5","ThemedLockOutlined","LockOutlined","_templateObject6","LoadingBlock","_templateObject7","CashLoader","_path","brandSecondary","contrast","app","sidebars","text","switch","activeCash","shadow","activeToken","inactive","borders","tokenListItem","boxShadow","border","hoverBorder","footer","navIconInactive","forms","addonBackground","addonForeground","selectionBackground","modals","delete","qr","copyBorderCash","copyBorderToken","disabledOverlay","collapses","generalSettings","title","WalletName","h4","WalletLabel","StyledSignUp","SignUp","signUpBody","authentication","useContext","AuthenticationContext","handleSignUp","signUp","Modal","content","centered","onClick","turnOffAuthentication","_extends","assign","bind","source","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgFingerprintSolid","svgRef","titleId","focusable","role","xmlns","viewBox","ref","id","fill","d","ForwardRef","StyledSignIn","UnlockButton","StyledFingerprintIcon","SignIn","signInBody","_useState","useState","_useState2","isVisible","setIsVisible","_useState3","_useState4","isLoading","setIsLoading","handleDocVisibilityChange","document","visibilityState","handleSignIn","signIn","handleSignInAndSuppressError","useEffect","addEventListener","removeEventListener","Fragment","FingerprintSVG","Spin","tip","ProtectableComponentWrapper","children","loading","isAuthenticationRequired","isSignedIn","searchParams","Wallet","lazy","Tokens","Send","SendToken","Checkout","SendBip70","Configure","SelfMint","NotFound","GlobalStyle","createGlobalStyle","CustomApp","Footer","NavButton","active","WalletBody","WalletCtn","footerBackground","HeaderCtn","CashTabLogo","img","_templateObject8","AbcLogo","_templateObject9","EasterEgg","_templateObject10","App","ContextValue","WalletContext","loadingUtxosAfterSend","setLoadingUtxosAfterSend","validWallet","useLocation","history","useHistory","selectedKey","substr","hasTab","tokenList","specifiedTokenId","checkForTokenById","codeSplitLoader","navRedirect","replaceState","ThemeProvider","spinning","indicator","TabCash","alt","ABC","CashTab","Suspense","fallback","Switch","path","passLoadingStatus","match","params","Redirect","exact","to","FolderOpenFilled","AppstoreAddOutlined","CaretRightOutlined","SettingFilled","ReactDOM","AuthenticationProvider","WalletProvider","Router","GA","getElementById","navigator","serviceWorker","register","useAsyncTimeout","callback","delay","savedCallback","useRef","current","tick","promise","setTimeout","clearTimeout","usePrevious","useWallet","setWallet","setCashtabSettings","_useState5","_useState6","setFiatPrice","_useState7","_useState8","apiError","setApiError","_useState9","_useState10","checkFiatInterval","setCheckFiatInterval","_useBCH","_useState11","_useState12","setLoading","previousTokens","deriveAccount","masterHDNode","node","decodedAddress","slpAddress","derivePath","toPublic","fromPrivate","toSecret","fundingAddress","legacyAddress","loadWalletFromStorageOnStartup","getWallet","update","forceFullUpdate","_wallet$state","cashAddresses","utxosBcash","txHistory","parsedWithTokens","_tokens","newState","isEqual","writeWalletState","getActiveWalletFromLocalForage","existingWallet","migrateLegacyWallet","parse","localStorage","getWalletDetails","mnemonic","HDPrivateKey","fromPhrase","getSavedWallets","activeWallet","savedWallets","activateWallet","walletToActivate","currentlyActiveWallet","walletInSavedWallets","t2","t3","t4","renameWallet","oldName","newName","deleteWallet","walletToBeDeleted","walletFoundAndRemoved","addNewSavedWallet","importMnemonic","Bip39128BitMnemonic","newSavedWallet","Mnemonic","language","createWallet","handleUpdateWallet","_ref18","loadCashtabSettings","_ref19","localSettings","initializeFiatPriceApi","_ref20","_callee17","selectedFiatCurrency","thisFiatInterval","fetchBchPrice","setInterval","changeCashtabSettings","_ref21","_callee18","newValue","currentSettings","newSettings","_context18","clearInterval","tokenIds","_ref22","previousTokenIds","_ref23","newTokenId","receivedTokenObjectIndex","findIndex","x","forceWalletUpdate","_ref24","_callee19","_args19","_context19","finally","_callee20","_context20","_ref26","_callee21","fiatCode","cryptoId","priceApiUrl","bchPrice","bchPriceJson","bchPriceInFiat","_args21","_context21","_callee22","initialSettings","_context22","validateMnemonic","_createWallet2","_callee23","newWallet","_context23","_activateWallet2","_callee24","_context24","convertArrayBufferToBase64","buffer","dataStr","Uint8Array","str","cur","String","fromCharCode","btoa","convertBase64ToArrayBuffer","base64Str","atob","char","charCodeAt","useWebAuthentication","isWebAuthnSupported","setIsWebAuthnSupported","setIsAuthenticationRequired","credentialId","setCredentialId","setIsSignedIn","Date","now","userId","setUserId","loadAuthenticationConfigFromLocalStorage","saveAuthenticationConfigToLocalStorage","available","authenticationConfig","PublicKeyCredential","isUserVerifyingPlatformAuthenticatorAvailable","publicKeyCredentialCreationOptions","challenge","c","rp","domain","user","displayName","pubKeyCredParams","alg","authenticatorSelection","userVerification","authenticatorAttachment","requireResidentKey","timeout","attestation","excludeCredentials","extensions","publickKeyRequestOptions","allowCredentials","transports","turnOnAuthentication","_signUp","publicKeyCredential","base64Id","credentials","create","rawId","_signIn","assertion","signOut","createContext","Provider"],"mappings":"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","file":"static/js/main.003f9f97.chunk.js","sourcesContent":["const bio = require('bufio');\r\nconst bcash = require('bcash');\r\nconst MTX = bcash.MTX;\r\nconst consensus = bcash.consensus;\r\nconst { hashType } = bcash.Script;\r\nconst { \r\n    SLP,\r\n    common: { opcodes }\r\n} = bcash.script;\r\nconst hash256 = require('bcrypto').Hash256;\r\nconst { i64, u64 } = require('n64');\r\n\r\nexport const authPubKeys = [\r\n    {\r\n        tokenId: '7e7dacd72dcdb14e00a03dd3aff47f019ed51a6f1f4e4f532ae50692f62bc4e5',\r\n        pubkey: '027e6cf8229495afadcb5a7e40365bbc82afcf145eacca3193151e68a61fc81743',\r\n        imageUrl: 'https://bux.digital/assets/img/favicon/favicon-32x32.png'\r\n    },\r\n    {\r\n      tokenId: '52b12c03466936e7e3b2dcfcff847338c53c611ba8ab74dd8e4dadf7ded12cf6',\r\n      imageUrl: 'https://bux.digital/assets/img/favicon/favicon-32x32.png'\r\n    }\r\n]\r\n\r\nexport const buildOutScript = (authPubKey, checkIsFirstInput = false) => {\r\n    const script = new bcash.Script()\r\n        .pushSym('2dup')\r\n        .pushInt(36)\r\n        .pushSym('split')\r\n        .pushSym('drop');\r\n\r\n        if (checkIsFirstInput) {\r\n            script.pushSym('dup')\r\n            script.pushInt(6)\r\n            script.pushSym('pick')\r\n            script.pushInt(104)\r\n            script.pushSym('split')\r\n            script.pushSym('drop')\r\n            script.pushInt(68)\r\n            script.pushSym('split')\r\n            script.pushSym('nip')\r\n            script.pushSym('equalverify');\r\n        }\r\n\r\n        script.pushSym('swap')\r\n        .pushSym('dup')\r\n        .pushInt(78)\r\n        .pushSym('split')\r\n        .pushSym('nip')\r\n        .pushInt(20)\r\n        .pushSym('split')\r\n        .pushSym('drop')\r\n        .pushInt(7)\r\n        .pushSym('pick')\r\n        .pushSym('hash160')\r\n        .pushSym('equalverify')\r\n\r\n        .pushInt(132)\r\n        .pushSym('split')\r\n        .pushSym('drop')\r\n        .pushSym('cat')\r\n        .pushInt(3)\r\n        .pushSym('roll')\r\n        .pushSym('swap')\r\n        .pushData(authPubKey)\r\n        .pushSym('checkdatasigverify')\r\n        .pushInt(2)\r\n        .pushSym('roll')\r\n        .pushSym('dup')\r\n        .pushSym('size')\r\n        .pushInt(40)\r\n        .pushSym('sub')\r\n        .pushSym('split')\r\n        .pushSym('swap')\r\n        .pushInt(4)\r\n        .pushSym('split')\r\n        .pushSym('nip')\r\n        .pushInt(32)\r\n        .pushSym('split')\r\n        .pushSym('drop')\r\n        .pushInt(3)\r\n        .pushSym('roll')\r\n        .pushSym('hash256')\r\n        .pushSym('equalverify')\r\n        .pushInt(32)\r\n        .pushSym('split')\r\n        .pushSym('drop')\r\n        .pushSym('rot')\r\n        .pushSym('hash256')\r\n        .pushSym('equalverify')\r\n        .pushSym('sha256')\r\n        .pushSym('3dup')\r\n        .pushSym('rot')\r\n        .pushSym('size')\r\n        .pushSym('1sub')\r\n        .pushSym('split')\r\n        .pushSym('drop')\r\n        .pushSym('swap')\r\n        .pushSym('rot')\r\n        .pushSym('checkdatasigverify')\r\n        .pushSym('drop')\r\n        .pushSym('checksig')\r\n        .compile();\r\n\r\n    return script;\r\n}\r\n\r\nexport class TXUtil extends MTX {\r\n\r\n    constructor(options) {\r\n        super(options);\r\n    }\r\n\r\n    /**\r\n   * Witness sighashing -- O(n).\r\n   * @private\r\n   * @param {Number} index\r\n   * @param {Script} prev\r\n   * @param {Amount} value\r\n   * @param {SighashType} type\r\n   * @returns {Buffer}\r\n   */\r\n\r\n  getPreimage(index, prev, value, type, json = false) {\r\n    const input = this.inputs[index];\r\n    let prevouts = consensus.ZERO_HASH;\r\n    let sequences = consensus.ZERO_HASH;\r\n    let outputs = consensus.ZERO_HASH;\r\n\r\n    if (!(type & hashType.ANYONECANPAY)) {\r\n      if (this._hashPrevouts) {\r\n        prevouts = this._hashPrevouts;\r\n      } else {\r\n        const bw = bio.pool(this.inputs.length * 36);\r\n\r\n        for (const input of this.inputs)\r\n          input.prevout.toWriter(bw);\r\n\r\n        if (json) {\r\n          const rawPrevouts= this.inputs.map(input => input.prevout.toRaw());\r\n          prevouts = Buffer.concat(rawPrevouts);\r\n        } else\r\n          prevouts = hash256.digest(bw.render());\r\n\r\n        if (!this.mutable && !json)\r\n          this._hashPrevouts = prevouts;\r\n      }\r\n    }\r\n\r\n    if (!(type & hashType.ANYONECANPAY)\r\n        && (type & 0x1f) !== hashType.SINGLE\r\n        && (type & 0x1f) !== hashType.NONE) {\r\n      if (this._hashSequence) {\r\n        sequences = this._hashSequence;\r\n      } else {\r\n        const bw = bio.pool(this.inputs.length * 4);\r\n\r\n        for (const input of this.inputs)\r\n          bw.writeU32(input.sequence);\r\n\r\n        if (json)\r\n          sequences = bw.render();\r\n        else\r\n          sequences = hash256.digest(bw.render());\r\n\r\n        if (!this.mutable && !json)\r\n          this._hashSequence = sequences;\r\n      }\r\n    }\r\n\r\n    if ((type & 0x1f) !== hashType.SINGLE\r\n        && (type & 0x1f) !== hashType.NONE) {\r\n      if (this._hashOutputs) {\r\n        outputs = this._hashOutputs;\r\n      } else {\r\n        let size = 0;\r\n\r\n        for (const output of this.outputs)\r\n          size += output.getSize();\r\n\r\n        const bw = bio.pool(size);\r\n\r\n        for (const output of this.outputs)\r\n          output.toWriter(bw);\r\n\r\n        if (json) {\r\n          const rawOutputs= this.outputs.map(output => output.toRaw());\r\n          outputs = Buffer.concat(rawOutputs);\r\n        } else\r\n          outputs = hash256.digest(bw.render());\r\n\r\n        if (!this.mutable && !json)\r\n          this._hashOutputs = outputs;\r\n      }\r\n    } else if ((type & 0x1f) === hashType.SINGLE) {\r\n      if (index < this.outputs.length) {\r\n        const output = this.outputs[index];\r\n        if (json)\r\n          outputs = output.toRaw();\r\n        else\r\n          outputs = hash256.digest(output.toRaw());\r\n      }\r\n    }\r\n\r\n    if (json) {\r\n        const locktimeBuf = Buffer.alloc(4);\r\n        locktimeBuf.writeUInt32LE(this.locktime);\r\n        const typeBuf = Buffer.alloc(4);\r\n        typeBuf.writeUInt32LE(type);\r\n        return {\r\n            version: this.version,\r\n            prevouts: prevouts,\r\n            sequences: sequences,\r\n            outpoint: input.prevout.toRaw(),\r\n            scriptCode: prev.toRaw(),\r\n            inputValue: i64.fromInt(value).toLE(Buffer),\r\n            inputSequence: input.sequence,\r\n            outputs: outputs,\r\n            locktime: locktimeBuf,\r\n            type: typeBuf  \r\n        }\r\n    }\r\n\r\n    const size = 156 + prev.getVarSize();\r\n    const bw = bio.pool(size);\r\n\r\n    bw.writeU32(this.version);\r\n    bw.writeBytes(prevouts);\r\n    bw.writeBytes(sequences);\r\n    bw.writeHash(input.prevout.hash);\r\n    bw.writeU32(input.prevout.index);\r\n    bw.writeVarBytes(prev.toRaw());\r\n    bw.writeI64(value);\r\n    bw.writeU32(input.sequence);\r\n    bw.writeBytes(outputs);\r\n    bw.writeU32(this.locktime);\r\n    bw.writeU32(type);\r\n\r\n    return bw.render();\r\n  }\r\n}","export default __webpack_public_path__ + \"static/media/logo_primary.eb3ad13b.png\";","export default __webpack_public_path__ + \"static/media/logo_secondary.c38d759b.png\";","import mainLogo from '@assets/logo_primary.png';\r\nimport tokenLogo from '@assets/logo_secondary.png';\r\nimport cashaddr from 'ecashaddrjs';\r\nimport BigNumber from 'bignumber.js';\r\n\r\nexport const currency = {\r\n    name: 'eCash',\r\n    ticker: 'XEC',\r\n    appUrl: 'cashtab.com',\r\n    logo: mainLogo,\r\n    legacyPrefix: 'bitcoincash',\r\n    prefixes: ['ecash'],\r\n    coingeckoId: 'ecash',\r\n    defaultFee: 1.01,\r\n    dustSats: 550,\r\n    etokenSats: 546,\r\n    cashDecimals: 2,\r\n    blockExplorerUrl: 'https://explorer.bitcoinabc.org',\r\n    tokenExplorerUrl: 'https://explorer.cert.cash',\r\n    blockExplorerUrlTestnet: 'https://texplorer.bitcoinabc.org',\r\n    tokenName: 'eToken',\r\n    tokenTicker: 'eToken',\r\n    tokenIconSubmitApi: 'https://icons.etokens.cash/new',\r\n    tokenLogo: tokenLogo,\r\n    tokenPrefixes: ['etoken'],\r\n    tokenIconsUrl: 'https://etoken-icons.s3.us-west-2.amazonaws.com',\r\n    postageUrl: 'https://pay.badger.cash/postage',\r\n    txHistoryCount: 5,\r\n    hydrateUtxoBatchSize: 20,\r\n    defaultSettings: { fiatCurrency: 'usd' },\r\n    notificationDurationShort: 3,\r\n    notificationDurationLong: 5,\r\n    newTokenDefaultUrl: 'https://cashtab.com/',\r\n    opReturn: {\r\n        opReturnPrefixHex: '6a',\r\n        opReturnPushDataHex: '04',\r\n        opReturnAppPrefixLengthHex: '04',\r\n        appPrefixesHex: {\r\n            eToken: '534c5000',\r\n            cashtab: '00746162',\r\n        },\r\n    },\r\n    settingsValidation: {\r\n        fiatCurrency: [\r\n            'usd',\r\n            'idr',\r\n            'krw',\r\n            'cny',\r\n            'zar',\r\n            'vnd',\r\n            'cad',\r\n            'nok',\r\n            'eur',\r\n            'gbp',\r\n            'jpy',\r\n            'try',\r\n            'rub',\r\n            'inr',\r\n            'brl',\r\n            'php',\r\n            'ils',\r\n            'clp',\r\n            'twd',\r\n            'hkd',\r\n            'bhd',\r\n            'sar',\r\n            'aud',\r\n            'nzd',\r\n        ],\r\n    },\r\n    fiatCurrencies: {\r\n        usd: { name: 'US Dollar', symbol: '$', slug: 'usd' },\r\n        aud: { name: 'Australian Dollar', symbol: '$', slug: 'aud' },\r\n        bhd: { name: 'Bahraini Dinar', symbol: 'BD', slug: 'bhd' },\r\n        brl: { name: 'Brazilian Real', symbol: 'R$', slug: 'brl' },\r\n        gbp: { name: 'British Pound', symbol: '£', slug: 'gbp' },\r\n        cad: { name: 'Canadian Dollar', symbol: '$', slug: 'cad' },\r\n        clp: { name: 'Chilean Peso', symbol: '$', slug: 'clp' },\r\n        cny: { name: 'Chinese Yuan', symbol: '元', slug: 'cny' },\r\n        eur: { name: 'Euro', symbol: '€', slug: 'eur' },\r\n        hkd: { name: 'Hong Kong Dollar', symbol: 'HK$', slug: 'hkd' },\r\n        inr: { name: 'Indian Rupee', symbol: '₹', slug: 'inr' },\r\n        idr: { name: 'Indonesian Rupiah', symbol: 'Rp', slug: 'idr' },\r\n        ils: { name: 'Israeli Shekel', symbol: '₪', slug: 'ils' },\r\n        jpy: { name: 'Japanese Yen', symbol: '¥', slug: 'jpy' },\r\n        krw: { name: 'Korean Won', symbol: '₩', slug: 'krw' },\r\n        nzd: { name: 'New Zealand Dollar', symbol: '$', slug: 'nzd' },\r\n        nok: { name: 'Norwegian Krone', symbol: 'kr', slug: 'nok' },\r\n        php: { name: 'Philippine Peso', symbol: '₱', slug: 'php' },\r\n        rub: { name: 'Russian Ruble', symbol: 'р.', slug: 'rub' },\r\n        twd: { name: 'New Taiwan Dollar', symbol: 'NT$', slug: 'twd' },\r\n        sar: { name: 'Saudi Riyal', symbol: 'SAR', slug: 'sar' },\r\n        zar: { name: 'South African Rand', symbol: 'R', slug: 'zar' },\r\n        try: { name: 'Turkish Lira', symbol: '₺', slug: 'try' },\r\n        vnd: { name: 'Vietnamese đồng', symbol: 'đ', slug: 'vnd' },\r\n    },\r\n    selfMintTokens: [\r\n        '7e7dacd72dcdb14e00a03dd3aff47f019ed51a6f1f4e4f532ae50692f62bc4e5'\r\n    ]\r\n};\r\n\r\nexport function getETokenEncodingSubstring() {\r\n    let encodingStr =\r\n        currency.opReturn.opReturnPrefixHex + // 6a\r\n        currency.opReturn.opReturnAppPrefixLengthHex + // 04\r\n        currency.opReturn.appPrefixesHex.eToken; // 534c5000\r\n\r\n    return encodingStr;\r\n}\r\n\r\nexport function getCashtabEncodingSubstring() {\r\n    let encodingStr =\r\n        currency.opReturn.opReturnPrefixHex + // 6a\r\n        currency.opReturn.opReturnAppPrefixLengthHex + // 04\r\n        currency.opReturn.appPrefixesHex.cashtab; // 00746162\r\n\r\n    return encodingStr;\r\n}\r\n\r\nexport function isCashtabOutput(hexStr) {\r\n    if (!hexStr || typeof hexStr !== 'string') {\r\n        return false;\r\n    }\r\n    return hexStr.startsWith(getCashtabEncodingSubstring());\r\n}\r\n\r\nexport function isEtokenOutput(hexStr) {\r\n    if (!hexStr || typeof hexStr !== 'string') {\r\n        return false;\r\n    }\r\n    return hexStr.startsWith(getETokenEncodingSubstring());\r\n}\r\n\r\nexport function extractCashtabMessage(hexSubstring) {\r\n    if (!hexSubstring || typeof hexSubstring !== 'string') {\r\n        return '';\r\n    }\r\n    let substring = hexSubstring.replace(getCashtabEncodingSubstring(), ''); // remove the cashtab encoding\r\n    substring = substring.slice(2); // remove the 2 bytes indicating the size of the next element on the stack e.g. a0 -> 160 bytes\r\n    return substring;\r\n}\r\n\r\nexport function extractExternalMessage(hexSubstring) {\r\n    if (!hexSubstring || typeof hexSubstring !== 'string') {\r\n        return '';\r\n    }\r\n    let substring = hexSubstring.slice(4); // remove the preceding OP_RETURN prefixes\r\n    return substring;\r\n}\r\n\r\nexport function isValidCashPrefix(addressString) {\r\n    // Note that this function validates prefix only\r\n    // Check for prefix included in currency.prefixes array\r\n    // For now, validation is handled by converting to bitcoincash: prefix and checksum\r\n    // and relying on legacy validation methods of bitcoincash: prefix addresses\r\n\r\n    // Also accept an address with no prefix, as some exchanges provide these\r\n    for (let i = 0; i < currency.prefixes.length; i += 1) {\r\n        // If the addressString being tested starts with an accepted prefix or no prefix at all\r\n        if (\r\n            addressString.startsWith(currency.prefixes[i] + ':') ||\r\n            !addressString.includes(':')\r\n        ) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function isValidTokenPrefix(addressString) {\r\n    // Check for prefix included in currency.tokenPrefixes array\r\n    // For now, validation is handled by converting to simpleledger: prefix and checksum\r\n    // and relying on legacy validation methods of simpleledger: prefix addresses\r\n\r\n    // For token addresses, do not accept an address with no prefix\r\n    for (let i = 0; i < currency.tokenPrefixes.length; i += 1) {\r\n        if (addressString.startsWith(currency.tokenPrefixes[i] + ':')) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function toLegacy(address) {\r\n    let testedAddress;\r\n    let legacyAddress;\r\n\r\n    try {\r\n        if (isValidCashPrefix(address)) {\r\n            // Prefix-less addresses may be valid, but the cashaddr.decode function used below\r\n            // will throw an error without a prefix. Hence, must ensure prefix to use that function.\r\n            const hasPrefix = address.includes(':');\r\n            if (!hasPrefix) {\r\n                testedAddress = currency.legacyPrefix + ':' + address;\r\n            } else {\r\n                testedAddress = address;\r\n            }\r\n\r\n            // Note: an `ecash:` checksum address with no prefix will not be validated by\r\n            // parseAddress in Send.js\r\n\r\n            // Only handle the case of prefixless address that is valid `bitcoincash:` address\r\n\r\n            const { type, hash } = cashaddr.decode(testedAddress);\r\n            legacyAddress = cashaddr.encode(currency.legacyPrefix, type, hash);\r\n        } else {\r\n            console.log(`Error: ${address} is not a cash address`);\r\n            throw new Error(\r\n                'Address prefix is not a valid cash address with a prefix from the Ticker.prefixes array',\r\n            );\r\n        }\r\n    } catch (err) {\r\n        return err;\r\n    }\r\n    return legacyAddress;\r\n}\r\n\r\nexport function toCleanArray(addressArray) {\r\n    let cleanArray = []; // array of bch converted addresses to be returned\r\n\r\n    try {\r\n        if (\r\n            addressArray === null ||\r\n            addressArray === undefined ||\r\n            !addressArray.length ||\r\n            addressArray === ''\r\n        ) {\r\n            throw new Error('Invalid addressArray input');\r\n        }\r\n\r\n        const arrayLength = addressArray.length;\r\n\r\n        for (let i = 0; i < arrayLength; i++) {\r\n            let testedAddress;\r\n            let legacyAddress;\r\n            let addressValueArr = addressArray[i].split(',');\r\n            let address = addressValueArr[0];\r\n            let value = addressValueArr[1];\r\n\r\n            if (isValidCashPrefix(address)) {\r\n                // Prefix-less addresses may be valid, but the cashaddr.decode function used below\r\n                // will throw an error without a prefix. Hence, must ensure prefix to use that function.\r\n                const hasPrefix = address.includes(':');\r\n                if (!hasPrefix) {\r\n                    testedAddress = currency.legacyPrefix + ':' + address;\r\n                } else {\r\n                    testedAddress = address;\r\n                }\r\n\r\n                // Note: an `ecash:` checksum address with no prefix will not be validated by\r\n                // parseAddress in Send.js\r\n\r\n                // Only handle the case of prefixless address that is valid `bitcoincash:` address\r\n                const { type, hash } = cashaddr.decode(testedAddress);\r\n                legacyAddress = cashaddr.encode(\r\n                    currency.prefixes[0],\r\n                    type,\r\n                    hash,\r\n                );\r\n\r\n                let convertedArrayData = legacyAddress + ',' + value + '\\n';\r\n                cleanArray.push(convertedArrayData);\r\n            } else {\r\n                console.log(`Error: ${address} is not a cash address`);\r\n                throw new Error(\r\n                    'Address prefix is not a valid cash address with a prefix from the Ticker.prefixes array',\r\n                );\r\n            }\r\n        }\r\n    } catch (err) {\r\n        return err;\r\n    }\r\n    return cleanArray;\r\n}\r\n\r\nexport function parseAddress(addressString, isToken = false) {\r\n    // Build return obj\r\n    const addressInfo = {\r\n        address: '',\r\n        isValid: false,\r\n        queryString: null,\r\n        amount: null,\r\n    };\r\n    // Parse address string for parameters\r\n    const paramCheck = addressString.split('?');\r\n\r\n    let cleanAddress = paramCheck[0];\r\n    addressInfo.address = cleanAddress;\r\n\r\n    // Validate address\r\n    let isValidAddress;\r\n    try {\r\n        // Only accept addresses with ecash: prefix\r\n        const { prefix } = cashaddr.decode(cleanAddress);\r\n        // If the address does not have a valid prefix or token prefix\r\n        if (\r\n            (!isToken && !currency.prefixes.includes(prefix)) ||\r\n            (isToken && !currency.tokenPrefixes.includes(prefix))\r\n        ) {\r\n            // then it is not a valid destination address for XEC sends\r\n            isValidAddress = false;\r\n        } else {\r\n            isValidAddress = true;\r\n        }\r\n    } catch (err) {\r\n        isValidAddress = false;\r\n    }\r\n\r\n    addressInfo.isValid = isValidAddress;\r\n\r\n    // Check for parameters\r\n    // only the amount param is currently supported\r\n    let queryString = null;\r\n    let amount = null;\r\n    if (paramCheck.length > 1) {\r\n        queryString = paramCheck[1];\r\n        addressInfo.queryString = queryString;\r\n\r\n        const addrParams = new URLSearchParams(queryString);\r\n\r\n        if (addrParams.has('amount')) {\r\n            // Amount in satoshis\r\n            try {\r\n                amount = new BigNumber(parseInt(addrParams.get('amount')))\r\n                    .div(10 ** currency.cashDecimals)\r\n                    .toString();\r\n            } catch (err) {\r\n                amount = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    addressInfo.amount = amount;\r\n    return addressInfo;\r\n}\r\n","import styled from 'styled-components';\r\n\r\nconst PrimaryButton = styled.button`\r\n    border: none;\r\n    color: ${props => props.theme.buttons.primary.color};\r\n    background-image: ${props => props.theme.buttons.primary.backgroundImage};\r\n    transition: all 0.5s ease;\r\n    background-size: 200% auto;\r\n    font-size: 18px;\r\n    width: 100%;\r\n    padding: 20px 0;\r\n    border-radius: 4px;\r\n    margin-bottom: 20px;\r\n    cursor: pointer;\r\n    :hover {\r\n        background-position: right center;\r\n        -webkit-box-shadow: ${props => props.theme.buttons.primary.hoverShadow};\r\n        -moz-box-shadow: ${props => props.theme.buttons.primary.hoverShadow};\r\n        box-shadow: ${props => props.theme.buttons.primary.hoverShadow};\r\n    }\r\n    svg {\r\n        fill: ${props => props.theme.buttons.primary.color};\r\n    }\r\n    @media (max-width: 768px) {\r\n        font-size: 16px;\r\n        padding: 15px 0;\r\n    }\r\n`;\r\n\r\nconst SecondaryButton = styled.button`\r\n    border: none;\r\n    color: ${props => props.theme.buttons.secondary.color};\r\n    background: ${props => props.theme.buttons.secondary.background};\r\n    transition: all 0.5s ease;\r\n    font-size: 18px;\r\n    width: 100%;\r\n    padding: 15px 0;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    outline: none;\r\n    margin-bottom: 20px;\r\n    :hover {\r\n        -webkit-box-shadow: ${props =>\r\n            props.theme.buttons.secondary.hoverShadow};\r\n        -moz-box-shadow: ${props => props.theme.buttons.secondary.hoverShadow};\r\n        box-shadow: ${props => props.theme.buttons.secondary.hoverShadow};\r\n    }\r\n    svg {\r\n        fill: ${props => props.theme.buttons.secondary.color};\r\n    }\r\n    @media (max-width: 768px) {\r\n        font-size: 16px;\r\n        padding: 12px 0;\r\n    }\r\n`;\r\n\r\nconst SmartButton = styled.button`\r\n    ${({ disabled = false, ...props }) =>\r\n        disabled === true\r\n            ? `\r\n                background-image: 'none';\r\n                color: ${props.theme.buttons.secondary.color};\r\n                background: ${props.theme.buttons.secondary.background};\r\n                :hover {\r\n                    -webkit-box-shadow: 0px 3px 10px -5px rgba(0, 0, 0, 0.75);\r\n                    -moz-box-shadow: 0px 3px 10px -5px rgba(0, 0, 0, 0.75);\r\n                    box-shadow: 0px 3px 10px -5px rgba(0, 0, 0, 0.75);\r\n                }\r\n                svg {\r\n                    fill: ${props.theme.buttons.secondary.color};\r\n                }\r\n            `\r\n            : `\r\n                background-image: ${props.theme.buttons.primary.backgroundImage};\r\n                color: ${props.theme.buttons.primary.color};\r\n                :hover {\r\n                    background-position: right center;\r\n                    -webkit-box-shadow: ${props.theme.buttons.primary.hoverShadow};\r\n                    -moz-box-shadow: ${props.theme.buttons.primary.hoverShadow};\r\n                    box-shadow: ${props.theme.buttons.primary.hoverShadow};\r\n                }\r\n                svg {\r\n                    fill: ${props.theme.buttons.primary.color};\r\n                }\r\n            `}\r\n\r\n    border: none;\r\n    transition: all 0.5s ease;\r\n    font-size: 18px;\r\n    width: 100%;\r\n    padding: 15px 0;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    outline: none;\r\n    margin-bottom: 20px;\r\n\r\n    @media (max-width: 768px) {\r\n        font-size: 16px;\r\n        padding: 12px 0;\r\n    }\r\n`;\r\n\r\nexport default PrimaryButton;\r\nexport { SecondaryButton, SmartButton };\r\n","import { \r\n    PaymentRequest,\r\n    Payment,\r\n    PaymentACK\r\n} from \"b70\";\r\n\r\nexport const validatePrUrl = (urlString) => {\r\n     // Check for BIP70\r\n     try {\r\n        const prUrl = new URL(urlString);\r\n        if (prUrl.protocol === 'https:')\r\n            return prUrl.href;\r\n    } catch {\r\n        return null;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const getUrlFromQueryString = (queryString) => {\r\n    if (typeof queryString !== 'string')\r\n        return null;\r\n\r\n    const [ queryParameter, queryData ] = queryString.split('=');\r\n    if ( queryParameter === 'r') {\r\n        // Check for BIP70\r\n        return validatePrUrl(queryData);\r\n    }\r\n    return null;\r\n}\r\n\r\nconst getAsArrayBuffer = (url, headers)  => {\r\n    return new Promise((accept, reject) => {\r\n        let req = new XMLHttpRequest();\r\n        req.open(\"GET\", url, true);\r\n        Object.entries(headers).forEach(([key, value]) => {\r\n            req.setRequestHeader(key, value);\r\n        });\r\n        req.responseType = \"arraybuffer\";\r\n\r\n        req.onload = function(event) {\r\n            let resp = req.response;\r\n\r\n            if (resp) {\r\n                accept(resp);\r\n            }\r\n        };\r\n\r\n        req.onerror = function(err) {\r\n            console.warn(err);\r\n            reject(err);\r\n        };\r\n\r\n        req.send(null);\r\n    });\r\n};\r\n\r\nconst postAsArrayBuffer = (url, headers, body) => {\r\n    return new Promise((accept, reject) => {\r\n        let req = new XMLHttpRequest();\r\n\r\n        req.open(\"POST\", url, true);\r\n        Object.entries(headers).forEach(([key, value]) => {\r\n            req.setRequestHeader(key, value);\r\n        });\r\n        req.responseType = \"arraybuffer\";\r\n\r\n        req.onload = function(event) {\r\n            let resp = req.response;\r\n\r\n            if (req.status === 400 || req.status === 404 || req.status === 500 || req.status === 402) {\r\n                console.log(req)\r\n                reject(\r\n                new Error(\r\n                    `Error processing payment, please check with the merchant and try again later.`,\r\n                    { cause: {code: req.status} }\r\n                )\r\n                );\r\n                return;\r\n            }\r\n\r\n            if (resp) {\r\n                accept(resp);\r\n            }\r\n        };\r\n\r\n        req.onerror = function(err) {\r\n            console.warn(err);\r\n            reject(err);\r\n        };\r\n\r\n        req.send(body);\r\n    });\r\n  };\r\n\r\nexport const getPaymentRequest = async (paymentRequestUrl, type) => {\r\n    let paymentReq;\r\n    const headers = {\r\n        Accept: `application/${type}-paymentrequest`,\r\n        \"Content-Type\": \"application/octet-stream\"\r\n    };\r\n    console.log('headers', headers)\r\n    try {\r\n        const res = await getAsArrayBuffer(paymentRequestUrl, headers);\r\n        const resBuf = Buffer.from(res);\r\n        paymentReq = PaymentRequest.fromRaw(resBuf);\r\n    } catch (err) {\r\n        console.log(err)\r\n        throw new Error('Error fetching Payment Request')\r\n    }\r\n\r\n    if (!paymentReq.verifyChain())\r\n            throw new Error('Invalid Payment Request certificate chain');\r\n\r\n    if (!paymentReq.verify())\r\n        throw new Error('Invalid Payment Request signature');\r\n\r\n    return paymentReq;\r\n}\r\n\r\n/* default paymentObj = {\r\n        merchantData: null,\r\n        transactions: [],\r\n        refundTo:[],\r\n        memo:null\r\n    } \r\n*/\r\n\r\nexport const postPayment = async (paymentUrl, paymentObj, type) => {\r\n    const payment = new Payment(paymentObj);\r\n    // serialize and send\r\n    const rawbody = payment.toRaw();\r\n    const headers = {\r\n        Accept:\r\n        `application/${type}-paymentrequest, application/${type}-paymentack`,\r\n        \"Content-Type\": `application/${type}-payment`,\r\n        \"Content-Transfer-Encoding\": \"binary\"\r\n    };\r\n\r\n    const rawPaymentResponse = await postAsArrayBuffer(\r\n        paymentUrl,\r\n        headers,\r\n        rawbody\r\n    );\r\n\r\n    const responseBuf = Buffer.from(rawPaymentResponse);\r\n    const ack = PaymentACK.fromRaw(responseBuf);\r\n\r\n    return ack;\r\n}\r\n","import * as React from 'react';\r\nimport { notification } from 'antd';\r\nimport {\r\n    CashReceivedNotificationIcon,\r\n    TokenReceivedNotificationIcon,\r\n} from '@components/Common/CustomIcons';\r\nimport Paragraph from 'antd/lib/typography/Paragraph';\r\nimport { currency } from '@components/Common/Ticker';\r\nimport { MessageSignedNotificationIcon } from '@components/Common/CustomIcons';\r\n\r\n// Success Notifications:\r\nconst sendXecNotification = link => {\r\n    notification.success({\r\n        message: 'Success',\r\n        description: (\r\n            <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <Paragraph>\r\n                    Transaction successful. Click to view in block explorer.\r\n                </Paragraph>\r\n            </a>\r\n        ),\r\n        duration: currency.notificationDurationShort,\r\n        icon: <CashReceivedNotificationIcon />,\r\n        style: { width: '100%' },\r\n    });\r\n};\r\n\r\nconst createTokenNotification = link => {\r\n    notification.success({\r\n        message: 'Success',\r\n        description: (\r\n            <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <Paragraph>\r\n                    Token created! Click to view in block explorer.\r\n                </Paragraph>\r\n            </a>\r\n        ),\r\n        icon: <TokenReceivedNotificationIcon />,\r\n        style: { width: '100%' },\r\n    });\r\n};\r\n\r\nconst selfMintTokenNotification = () => {\r\n    notification.success({\r\n        message: 'Success',\r\n        description: (\r\n            <Paragraph>\r\n                Tokens successfully minted! Please wait while balance is refreshed.\r\n            </Paragraph>\r\n        ),\r\n        icon: <TokenReceivedNotificationIcon />,\r\n        style: { width: '100%' },\r\n    });\r\n};\r\n\r\nconst tokenIconSubmitSuccess = () => {\r\n    notification.success({\r\n        message: 'Success',\r\n        description: (\r\n            <Paragraph>Your eToken icon was successfully submitted.</Paragraph>\r\n        ),\r\n        icon: <TokenReceivedNotificationIcon />,\r\n        style: { width: '100%' },\r\n    });\r\n};\r\n\r\nconst sendTokenNotification = link => {\r\n    notification.success({\r\n        message: 'Success',\r\n        description: (\r\n            <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <Paragraph>\r\n                    Transaction successful. Click to view in block explorer.\r\n                </Paragraph>\r\n            </a>\r\n        ),\r\n        duration: currency.notificationDurationShort,\r\n        icon: <TokenReceivedNotificationIcon />,\r\n        style: { width: '100%' },\r\n    });\r\n};\r\n\r\nconst xecReceivedNotification = (\r\n    balances,\r\n    previousBalances,\r\n    cashtabSettings,\r\n    fiatPrice,\r\n) => {\r\n    notification.success({\r\n        message: 'Transaction received',\r\n        description: (\r\n            <Paragraph>\r\n                +{' '}\r\n                {parseFloat(\r\n                    Number(\r\n                        balances.totalBalance - previousBalances.totalBalance,\r\n                    ).toFixed(currency.cashDecimals),\r\n                ).toLocaleString()}{' '}\r\n                {currency.ticker}{' '}\r\n                {cashtabSettings &&\r\n                    cashtabSettings.fiatCurrency &&\r\n                    `(${\r\n                        currency.fiatCurrencies[cashtabSettings.fiatCurrency]\r\n                            .symbol\r\n                    }${(\r\n                        Number(\r\n                            balances.totalBalance -\r\n                                previousBalances.totalBalance,\r\n                        ) * fiatPrice\r\n                    ).toFixed(\r\n                        currency.cashDecimals,\r\n                    )} ${cashtabSettings.fiatCurrency.toUpperCase()})`}\r\n            </Paragraph>\r\n        ),\r\n        duration: currency.notificationDurationShort,\r\n        icon: <CashReceivedNotificationIcon />,\r\n        style: { width: '100%' },\r\n    });\r\n};\r\n\r\nconst eTokenReceivedNotification = (\r\n    currency,\r\n    receivedSlpTicker,\r\n    receivedSlpQty,\r\n    receivedSlpName,\r\n) => {\r\n    notification.success({\r\n        message: `${currency.tokenTicker} transaction received: ${receivedSlpTicker}`,\r\n        description: (\r\n            <Paragraph>\r\n                You received {receivedSlpQty.toString()} {receivedSlpName}\r\n            </Paragraph>\r\n        ),\r\n        duration: currency.notificationDurationShort,\r\n        icon: <TokenReceivedNotificationIcon />,\r\n        style: { width: '100%' },\r\n    });\r\n};\r\n\r\n// Error Notification:\r\n\r\nconst errorNotification = (error, message, stringDescribingCallEvent) => {\r\n    console.log(error, message, stringDescribingCallEvent);\r\n    notification.error({\r\n        message: 'Error',\r\n        description: message,\r\n        duration: currency.notificationDurationLong,\r\n    });\r\n};\r\n\r\nconst messageSignedNotification = msgSignature => {\r\n    notification.success({\r\n        message: 'Message Signature Generated',\r\n        description: <Paragraph>{msgSignature}</Paragraph>,\r\n        icon: <MessageSignedNotificationIcon />,\r\n        style: { width: '100%' },\r\n    });\r\n};\r\n\r\nexport {\r\n    sendXecNotification,\r\n    createTokenNotification,\r\n    tokenIconSubmitSuccess,\r\n    sendTokenNotification,\r\n    selfMintTokenNotification,\r\n    xecReceivedNotification,\r\n    eTokenReceivedNotification,\r\n    errorNotification,\r\n    messageSignedNotification,\r\n};\r\n","// utils/GoogleAnalytics.js\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as ReactGA from 'react-ga';\r\nimport { Route } from 'react-router-dom';\r\n\r\nclass GoogleAnalytics extends Component {\r\n    componentDidMount() {\r\n        this.logPageChange(\r\n            this.props.location.pathname,\r\n            this.props.location.search,\r\n        );\r\n    }\r\n\r\n    componentDidUpdate({ location: prevLocation }) {\r\n        const {\r\n            location: { pathname, search },\r\n        } = this.props;\r\n        const isDifferentPathname = pathname !== prevLocation.pathname;\r\n        const isDifferentSearch = search !== prevLocation.search;\r\n\r\n        if (isDifferentPathname || isDifferentSearch) {\r\n            this.logPageChange(pathname, search);\r\n        }\r\n    }\r\n\r\n    logPageChange(pathname, search = '') {\r\n        const page = pathname + search;\r\n        const { location } = window;\r\n        ReactGA.set({\r\n            page,\r\n            location: `${location.origin}${page}`,\r\n            ...this.props.options,\r\n        });\r\n        ReactGA.pageview(page);\r\n    }\r\n\r\n    render() {\r\n        return null;\r\n    }\r\n}\r\n\r\nGoogleAnalytics.propTypes = {\r\n    location: PropTypes.shape({\r\n        pathname: PropTypes.string,\r\n        search: PropTypes.string,\r\n    }).isRequired,\r\n    options: PropTypes.object,\r\n};\r\n\r\nconst RouteTracker = () => <Route component={GoogleAnalytics} />;\r\n\r\nconst init = (options = {}) => {\r\n    const isGAEnabled = process.env.NODE_ENV === 'production';\r\n\r\n    if (isGAEnabled) {\r\n        ReactGA.initialize('UA-183678810-1');\r\n    }\r\n\r\n    return isGAEnabled;\r\n};\r\n\r\nexport const Event = (category, action, label) => {\r\n    ReactGA.event({\r\n        category: category,\r\n        action: action,\r\n        label: label,\r\n    });\r\n};\r\n\r\nconst GoogleAnalyticsDefault = {\r\n    GoogleAnalytics,\r\n    RouteTracker,\r\n    init,\r\n};\r\n\r\nexport default GoogleAnalyticsDefault;\r\n","import BigNumber from 'bignumber.js';\r\nimport {\r\n    currency,\r\n    isCashtabOutput,\r\n    extractCashtabMessage,\r\n    extractExternalMessage,\r\n} from '@components/Common/Ticker';\r\nimport {\r\n    toSmallestDenomination,\r\n    fromSmallestDenomination,\r\n    isValidStoredWallet,\r\n    convertToEcashPrefix,\r\n} from '@utils/cashMethods';\r\nimport { postPayment } from '@utils/bip70';\r\nimport { \r\n    TXUtil,\r\n    authPubKeys,\r\n    buildOutScript\r\n} from '@utils/selfMint';\r\nimport cashaddr from 'ecashaddrjs';\r\nimport { U64 } from 'n64';\r\nimport { \r\n    Address,\r\n    Input,\r\n    Output,\r\n    Outpoint,\r\n    Coin, \r\n    MTX,\r\n    TX,\r\n    KeyRing,\r\n    Script,\r\n    Opcode,\r\n    utils,\r\n    script\r\n} from 'bcash';\r\nimport {\r\n    Hash160\r\n} from 'bcrypto';\r\nimport { read } from 'bufio';\r\nimport { PaymentDetails } from 'b70';\r\nimport { writeMempoolMint } from '@utils/mintHistory';\r\n\r\nconst { \r\n    SLP,\r\n    common: { opcodes }\r\n} = script;\r\n\r\nexport default function useBCH() {\r\n    const SEND_BCH_ERRORS = {\r\n        INSUFFICIENT_FUNDS: 0,\r\n        NETWORK_ERROR: 1,\r\n        INSUFFICIENT_PRIORITY: 66, // ~insufficient fee\r\n        DOUBLE_SPENDING: 18,\r\n        MAX_UNCONFIRMED_TXS: 64,\r\n    };\r\n\r\n    const POSTAGE_URL = `${currency.postageUrl}?currency=${currency.tokenPrefixes[0]}`;\r\n\r\n    const getPostage = async (tokenId) => {\r\n        try {\r\n            const res = await fetch(POSTAGE_URL);\r\n            const postageObj = await res.json();\r\n            const stamp = postageObj.stamps.find(\r\n                s => s.tokenId === tokenId\r\n            );\r\n            if (stamp) {\r\n                return {\r\n                    address: postageObj.address,\r\n                    weight: postageObj.weight,\r\n                    stamp\r\n                };\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n        return null;\r\n    };\r\n\r\n    const calculatePostage = (\r\n        inputCount, \r\n        tokenRecipientCount, \r\n        postageObj\r\n    ) => {\r\n        const sendAmountArray = ['1', '1']; // Begin with stamp output and change\r\n        for (let i = 0; i < tokenRecipientCount; i++) {\r\n            sendAmountArray.push('1');\r\n        }\r\n\r\n        const sendOpReturn = buildSendOpReturn(\r\n            Buffer.alloc(32).toString('hex'),\r\n            sendAmountArray\r\n        )\r\n        let byteCount = getByteCount(\r\n            { P2PKH: inputCount },\r\n            { P2PKH: sendAmountArray.length }\r\n        );\r\n\r\n        byteCount += 8 + 1 + sendOpReturn.length;\r\n        // Account for difference in inputs and outputs\r\n        byteCount += 546 * (sendAmountArray.length - inputCount);\r\n  \r\n        let stampsNeeded = Math.ceil(byteCount / postageObj.weight);\r\n        // console.log('byteCount', byteCount);\r\n        // console.log('stampsNeeded', stampsNeeded);\r\n        if (stampsNeeded < 1) stampsNeeded = 1;\r\n        return postageObj.stamp.rate * stampsNeeded;\r\n    }\r\n\r\n    const getBcashRestUrl = () => {\r\n        return process.env.REACT_APP_BCASH_API;\r\n    }\r\n\r\n    const parseTxData = (wallet, txData) => {\r\n        /*\r\n        Desired output\r\n        [\r\n        {\r\n        txid: '',\r\n        type: send, receive\r\n        receivingAddress: '',\r\n        quantity: amount bcha\r\n        token: true/false\r\n        tokenInfo: {\r\n            tokenId:\r\n            tokenQty:\r\n            txType: mint, send, other\r\n        }\r\n        opReturnMessage: 'message extracted from asm' or ''\r\n        }\r\n        ]\r\n        */\r\n        const ownAddressArray = [\r\n            wallet.Path245.cashAddress,\r\n            wallet.Path145.cashAddress,\r\n            wallet.Path1899.cashAddress\r\n        ];\r\n\r\n        const parsedTxHistory = [];\r\n        for (let i = 0; i < txData.length; i += 1) {\r\n            const tx = txData[i];\r\n\r\n            const parsedTx = {};\r\n\r\n            // Move over info that does not need to be calculated\r\n            parsedTx.txid = tx.hash;\r\n            parsedTx.height = tx.height;\r\n            const destinationOutput = tx.outputs.find(output => output.address)\r\n            const destinationAddress = destinationOutput?.address;\r\n\r\n            // If this tx had too many inputs to be parsed skip it\r\n            // When this occurs, the tx will only have txid and height\r\n            // So, it will not have 'vin'\r\n            if (!Object.keys(tx).includes('inputs')) {\r\n                // Populate as a limited-info tx that can be expanded in a block explorer\r\n                parsedTxHistory.push(parsedTx);\r\n                continue;\r\n            }\r\n\r\n            parsedTx.confirmations = tx.confirmations;\r\n            parsedTx.blocktime = tx.time;\r\n            let amountSent = 0;\r\n            let amountReceived = 0;\r\n            let opReturnMessage = '';\r\n            let isCashtabMessage = false;\r\n            // Assume an incoming transaction\r\n            let outgoingTx = false;\r\n            let tokenTx = false;\r\n            let substring = '';\r\n\r\n            // get the address of the sender for this tx and encode into eCash address\r\n            let senderAddress = tx.inputs[0].coin.address;\r\n\r\n            // If input includes tx address, this is an outgoing tx\r\n            // Note that with bch-input data, we do not have input amounts\r\n            for (let j = 0; j < tx.inputs.length; j += 1) {\r\n                const thisInput = tx.inputs[j];\r\n                if (ownAddressArray.includes(thisInput.coin.address)) {\r\n                    // This is an outgoing transaction\r\n                    outgoingTx = true;\r\n                }\r\n            }\r\n            // Iterate over vout to find how much was sent or received\r\n            for (let j = 0; j < tx.outputs.length; j += 1) {\r\n                const thisOutput = tx.outputs[j];\r\n\r\n                // If there is no addresses object in the output, it's either an OP_RETURN msg or token tx\r\n                if (!thisOutput.address) {\r\n                    let hex = thisOutput.script;\r\n\r\n                    if (tx.slpToken) {\r\n                        // this is an eToken transaction\r\n                        tokenTx = true;\r\n                        parsedTx.tokenInfo = parseTokenInfoForTxHistory(tx, ownAddressArray);\r\n                    } else if (isCashtabOutput(hex)) {\r\n                        // this is a cashtab.com generated message\r\n                        try {\r\n                            substring = extractCashtabMessage(hex);\r\n                            opReturnMessage = Buffer.from(substring, 'hex');\r\n                            isCashtabMessage = true;\r\n                        } catch (err) {\r\n                            // soft error if an unexpected or invalid cashtab hex is encountered\r\n                            opReturnMessage = '';\r\n                            console.log(\r\n                                'useBCH.parsedTxHistory() error: invalid cashtab msg hex: ' +\r\n                                    substring,\r\n                            );\r\n                        }\r\n                    } else {\r\n                        // this is an externally generated message\r\n                        try {\r\n                            substring = extractExternalMessage(hex);\r\n                            opReturnMessage = Buffer.from(substring, 'hex');\r\n                        } catch (err) {\r\n                            // soft error if an unexpected or invalid cashtab hex is encountered\r\n                            opReturnMessage = '';\r\n                            console.log(\r\n                                'useBCH.parsedTxHistory() error: invalid external msg hex: ' +\r\n                                    substring,\r\n                            );\r\n                        }\r\n                    }\r\n                    continue; // skipping the remainder of tx data parsing logic in both token and OP_RETURN tx cases\r\n                }\r\n                if (thisOutput.address && \r\n                    ownAddressArray.includes(thisOutput.address)\r\n                ) {\r\n                    if (outgoingTx) {\r\n                        // This amount is change\r\n                        continue;\r\n                    }\r\n                    amountReceived += fromSmallestDenomination(thisOutput.value);\r\n                } else if (outgoingTx) {\r\n                    amountSent += fromSmallestDenomination(thisOutput.value);\r\n                }\r\n            }\r\n            // Construct parsedTx\r\n            parsedTx.amountSent = amountSent;\r\n            parsedTx.amountReceived = amountReceived;\r\n            parsedTx.tokenTx = tokenTx;\r\n            parsedTx.outgoingTx = outgoingTx;\r\n            parsedTx.replyAddress = senderAddress;\r\n            parsedTx.destinationAddress = destinationAddress;\r\n            parsedTx.opReturnMessage = opReturnMessage;\r\n            parsedTx.isCashtabMessage = isCashtabMessage;\r\n\r\n            // Add token info\r\n            parsedTxHistory.push(parsedTx);\r\n        }\r\n        return parsedTxHistory;\r\n    };\r\n\r\n    const getTxBcash = async (txid) => {\r\n        return fetch(`${getBcashRestUrl()}/tx/${txid}?slp=true`)\r\n            .then(res => res.json())\r\n            .catch(err => null);\r\n    };\r\n\r\n    const getTxHistoryBcash = async (\r\n        addresses,\r\n        limit = 30,\r\n        reverse = true\r\n    ) => {\r\n        const result = []\r\n        const utxoPromises = addresses.map(address => {\r\n            const addr = convertToEcashPrefix(address);\r\n            result.push({\r\n                address: addr\r\n            });\r\n            return fetch(`${getBcashRestUrl()}/tx/address/${addr}?slp=true&limit=${limit}&reverse=${reverse}`)\r\n                .then(res => res.json());\r\n        });\r\n        const txs = await Promise.all(utxoPromises);\r\n        let allTxs = [];\r\n        for (let i = 0; i < txs.length; i++) {\r\n            allTxs = [\r\n                ...allTxs,\r\n                ...txs[i]\r\n            ]\r\n        }\r\n        return allTxs;\r\n    };\r\n\r\n    const parseTokenInfoForTxHistory = (unparsedTx, ownAddressArray) => {\r\n        // Get transaction type by finding first\r\n        const transactionType = unparsedTx.outputs.find(\r\n            output => output.slp\r\n        ).slp.type;\r\n\r\n        let qtyReceived = new BigNumber(0);\r\n        let qtySent = new BigNumber(0);\r\n        // Scan over tx to find out how much was sent and received\r\n        const totalSent = unparsedTx.inputs.filter(input => \r\n                input.coin.slp && \r\n                ownAddressArray.includes(input.coin.address) &&\r\n                transactionType != 'MINT'\r\n            )\r\n            .reduce((prev, curr) => prev.plus(curr.coin.slp.value), \r\n                new BigNumber(0));\r\n\r\n        const totalReceived = unparsedTx.outputs.filter(output => \r\n                output.slp && \r\n                ownAddressArray.includes(output.address) &&\r\n                output.slp.type != 'BATON'\r\n            )\r\n            .reduce((prev, curr) => prev.plus(curr.slp.value), \r\n                new BigNumber(0));\r\n        // Check to see if this is either a sent or received transaction\r\n        const divisor = 10 ** parseInt(unparsedTx.slpToken.decimals);\r\n\r\n        if (totalSent.gte(totalReceived)) {\r\n            qtySent = totalSent.minus(totalReceived)\r\n                .div(divisor);\r\n        } else {\r\n            qtyReceived = totalReceived.minus(totalSent)\r\n                .div(divisor);\r\n        }\r\n\r\n        const cashtabTokenInfo = {};\r\n        cashtabTokenInfo.qtySent = qtySent.toString();\r\n        cashtabTokenInfo.qtyReceived = qtyReceived.toString();\r\n        cashtabTokenInfo.tokenId = unparsedTx.slpToken.tokenId;\r\n        cashtabTokenInfo.tokenName = unparsedTx.slpToken.name;\r\n        cashtabTokenInfo.tokenTicker = unparsedTx.slpToken.ticker;\r\n        cashtabTokenInfo.transactionType = transactionType;\r\n\r\n        return cashtabTokenInfo;\r\n    };\r\n\r\n    const getUtxoBcash = async (hash, index) => {\r\n        return fetch(`${getBcashRestUrl()}/coin/${hash}/${index}?slp=true`)\r\n            .then(res => res.json())\r\n            .catch(err => null);\r\n    };\r\n\r\n    const getUtxosBcash = async (addresses) => {\r\n        const result = []\r\n        const utxoPromises = addresses.map(address => {\r\n            const addr = convertToEcashPrefix(address);\r\n            result.push({\r\n                address: addr\r\n            });\r\n            return fetch(`${getBcashRestUrl()}/coin/address/${addr}?slp=true`)\r\n                .then(res => res.json());\r\n        });\r\n        const utxos = await Promise.all(utxoPromises);\r\n        let allUtxos = [];\r\n        for (let i = 0; i < utxos.length; i++) {\r\n            allUtxos = [\r\n                ...allUtxos,\r\n                ...utxos[i]\r\n            ]\r\n        }\r\n        return allUtxos;\r\n    };\r\n\r\n    const getSlpBalancesAndUtxosBcash = async (utxos) => {\r\n        // Prevent app from treating slpUtxos as nonSlpUtxos\r\n        // Do not classify any utxos that include token information as nonSlpUtxos\r\n        const nonSlpUtxos = utxos.filter(utxo => \r\n            !utxo.slp || (utxo.slp && utxo.slp.value == '0')\r\n        );\r\n\r\n        // To be included in slpUtxos, the utxo must\r\n        // have utxo.isValid = true\r\n        // If utxo has a utxo.tokenQty field, i.e. not a minting baton, then utxo.value !== '0'\r\n        const slpUtxos = utxos.filter(utxo => \r\n            utxo.slp && ( utxo.slp.value != '0' || utxo.slp.type == 'MINT')\r\n        );\r\n\r\n        let tokensById = {};\r\n\r\n        for (let i = 0; i < slpUtxos.length; i++) {\r\n            const slpUtxo = slpUtxos[i];\r\n            let token = tokensById[slpUtxo.slp.tokenId];\r\n\r\n            if (token) {\r\n                // Minting baton does nto have a slpUtxo.tokenQty type\r\n                token.hasBaton = slpUtxo.slp.type === 'BATON';\r\n\r\n                if (!token.hasBaton) {\r\n                    token.balance = new BigNumber(token.balance).plus(\r\n                        new BigNumber(slpUtxo.slp.value)\r\n                    );\r\n                }\r\n\r\n            } else {\r\n                token = {};\r\n                token.info = await fetch(`${getBcashRestUrl()}/token/${slpUtxo.slp.tokenId}`)\r\n                    .then(res => res.json());\r\n                token.tokenId = slpUtxo.slp.tokenId;\r\n                token.hasBaton = slpUtxo.slp.type === 'BATON';\r\n                if (!token.hasBaton) {\r\n                    token.balance = new BigNumber(slpUtxo.slp.value);\r\n                } else {\r\n                    token.balance = new BigNumber(0);\r\n                }\r\n\r\n                tokensById[slpUtxo.slp.tokenId] = token;\r\n            }\r\n        }\r\n\r\n        const tokens = Object.values(tokensById);\r\n        // console.log(`tokens`, tokens);\r\n        return {\r\n            tokens,\r\n            nonSlpUtxos,\r\n            slpUtxos,\r\n        };\r\n    };\r\n\r\n    const getMintHistory = async (minterPublicKey) => {\r\n        const mintHistory = await fetch(\r\n            `https://stats.bux.digital/api/mintsbypubkey/${minterPublicKey}`\r\n        ).then(res => res.json());\r\n\r\n        return mintHistory;\r\n    };\r\n\r\n    const broadcastTx = async (hex) => {\r\n        return fetch(`${getBcashRestUrl()}/broadcast`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({tx: hex})\r\n        }).then(res => res.json());\r\n    }\r\n\r\n    const getByteCount = (inputs, outputs) => {\r\n        // from https://github.com/bitcoinjs/bitcoinjs-lib/issues/921#issuecomment-354394004\r\n        let totalWeight = 0\r\n        let hasWitness = false\r\n        // assumes compressed pubkeys in all cases.\r\n        const types = {\r\n          inputs: {\r\n            \"MULTISIG-P2SH\": 49 * 4,\r\n            \"MULTISIG-P2WSH\": 6 + 41 * 4,\r\n            \"MULTISIG-P2SH-P2WSH\": 6 + 76 * 4,\r\n            P2PKH: 148 * 4,\r\n            P2WPKH: 108 + 41 * 4,\r\n            \"P2SH-P2WPKH\": 108 + 64 * 4\r\n          },\r\n          outputs: {\r\n            P2SH: 32 * 4,\r\n            P2PKH: 34 * 4,\r\n            P2WPKH: 31 * 4,\r\n            P2WSH: 43 * 4\r\n          }\r\n        }\r\n    \r\n        Object.keys(inputs).forEach(function(key) {\r\n          if (key.slice(0, 8) === \"MULTISIG\") {\r\n            // ex. \"MULTISIG-P2SH:2-3\" would mean 2 of 3 P2SH MULTISIG\r\n            const keyParts = key.split(\":\")\r\n            if (keyParts.length !== 2) throw new Error(`invalid input: ${key}`)\r\n            const newKey = keyParts[0]\r\n            const mAndN = keyParts[1].split(\"-\").map(function(item) {\r\n              return parseInt(item)\r\n            })\r\n    \r\n            totalWeight += types.inputs[newKey] * inputs[key]\r\n            const multiplyer = newKey === \"MULTISIG-P2SH\" ? 4 : 1\r\n            totalWeight += (73 * mAndN[0] + 34 * mAndN[1]) * multiplyer\r\n          } else {\r\n            totalWeight += types.inputs[key] * inputs[key]\r\n          }\r\n          if (key.indexOf(\"W\") >= 0) hasWitness = true\r\n        })\r\n    \r\n        Object.keys(outputs).forEach(function(key) {\r\n          totalWeight += types.outputs[key] * outputs[key]\r\n        })\r\n    \r\n        if (hasWitness) totalWeight += 2\r\n    \r\n        totalWeight += 10 * 4\r\n    \r\n        return Math.ceil(totalWeight / 4)\r\n    }\r\n\r\n    const calcFee = (\r\n        utxos,\r\n        p2pkhOutputNumber = 2,\r\n        satoshisPerByte = currency.defaultFee,\r\n    ) => {\r\n        const byteCount = getByteCount(\r\n            { P2PKH: utxos.length },\r\n            { P2PKH: p2pkhOutputNumber },\r\n        );\r\n        const txFee = Math.ceil(satoshisPerByte * byteCount);\r\n        return txFee;\r\n    };\r\n\r\n    const buildGenesisOpReturn = (configObj) => {\r\n        const stringsArray = [\r\n            'ticker',\r\n            'name',\r\n            'documentUrl'\r\n        ];\r\n        const pushEmptyOp = new Opcode(\r\n            opcodes.OP_PUSHDATA1,\r\n            Buffer.alloc(0)\r\n        );\r\n        const genesisOpReturn = new Script()\r\n                .pushSym('return')\r\n                .pushData(Buffer.concat([\r\n                    Buffer.from('SLP', 'ascii'),\r\n                    Buffer.alloc(1)\r\n                ]))\r\n                .pushPush(Buffer.alloc(1, 1))\r\n                .pushData(Buffer.from('GENESIS', 'ascii'));\r\n                // Push metadata strings\r\n                for (let i = 0; i < stringsArray.length; i++) {\r\n                    const item = configObj[stringsArray[i]];\r\n                    if (item && typeof item === 'string' && item.length > 0)\r\n                        genesisOpReturn.pushString(item);\r\n                    else\r\n                        genesisOpReturn.push(pushEmptyOp);\r\n                }\r\n                // Document Hash\r\n                if (configObj.documentHash) {\r\n                    const documentHash = typeof configObj.documentHash === 'string'\r\n                        ? Buffer.from(configObj.documentHash, 'hex')\r\n                        : configObj.documentHash;\r\n                    if (!Buffer.isBuffer(documentHash) || (documentHash.length != 0 && documentHash.length != 32))\r\n                        throw new Error ('documentHash must be hex string or buffer of 32 bytes or less');\r\n                    if (documentHash.length === 0)\r\n                        genesisOpReturn.push(pushEmptyOp);\r\n                    else\r\n                        genesisOpReturn.pushPush(documentHash);\r\n                } else\r\n                    genesisOpReturn.push(pushEmptyOp);\r\n                // Decimals\r\n                const decimalInt = parseInt(configObj.decimals);\r\n                if (decimalInt > 9 || decimalInt < 0)\r\n                    throw new Error ('decimal value must be a number between 0 and 9');\r\n                genesisOpReturn.pushPush(Buffer.alloc(1, decimalInt));\r\n\r\n                // Mint baton\r\n                if (configObj.mintBatonVout) {\r\n                    const batonInt = parseInt(configObj.mintBatonVout)\r\n                    if (batonInt != 2)\r\n                        throw new Error ('mintBaton must equal 2')\r\n                    genesisOpReturn.pushPush(Buffer.alloc(1, batonInt));\r\n                } else \r\n                    genesisOpReturn.push(pushEmptyOp);\r\n                // Quantity\r\n                genesisOpReturn.pushData(U64\r\n                    .fromString(configObj.initialQty)\r\n                    .muln(10 ** decimalInt)\r\n                    .toBE(Buffer)\r\n                )\r\n                .compile();\r\n\r\n        return genesisOpReturn;\r\n    };\r\n\r\n    const buildMintOpReturn = (tokenId, mintQuantityBufBE) => {\r\n        const mintOpReturn = new Script()\r\n                .pushSym('return')\r\n                .pushData(Buffer.concat([\r\n                    Buffer.from('SLP', 'ascii'),\r\n                    Buffer.alloc(1)\r\n                ]))\r\n                .pushPush(Buffer.alloc(1, 1))\r\n                .pushData(Buffer.from('MINT', 'ascii'))\r\n                .pushData(tokenId)\r\n                .pushPush(Buffer.alloc(1, 2))\r\n                .pushData(mintQuantityBufBE)\r\n                .compile();\r\n        return mintOpReturn\r\n    };\r\n\r\n    const buildSendOpReturn = (tokenId, sendQuantityArray, version = 1) => {\r\n        const sendOpReturn = new Script()\r\n                .pushSym('return')\r\n                .pushData(Buffer.concat([\r\n                    Buffer.from('SLP', 'ascii'),\r\n                    Buffer.alloc(1)\r\n                ]))\r\n                .pushPush(Buffer.alloc(1, version))\r\n                .pushData(Buffer.from('SEND', 'ascii'))\r\n                .pushData(Buffer.from(tokenId, 'hex'))\r\n                for (let i = 0; i < sendQuantityArray.length; i++) {\r\n                    const sendQuantity = sendQuantityArray[i]\r\n                    sendOpReturn.pushData(U64.fromString(sendQuantity).toBE(Buffer))\r\n                }\r\n        return sendOpReturn.compile();\r\n    };\r\n\r\n    const buildBurnOpReturn = (tokenId, burnQuantity, version = 1) => {\r\n        const burnOpReturn = new Script()\r\n                .pushSym('return')\r\n                .pushData(Buffer.concat([\r\n                    Buffer.from('SLP', 'ascii'),\r\n                    Buffer.alloc(1)\r\n                ]))\r\n                .pushPush(Buffer.alloc(1, version))\r\n                .pushData(Buffer.from('BURN', 'ascii'))\r\n                .pushData(Buffer.from(tokenId, 'hex'))\r\n                .pushData(U64.fromString(burnQuantity).toBE(Buffer));\r\n\r\n        return burnOpReturn.compile();\r\n    };\r\n\r\n    const createToken = async (\r\n        wallet, \r\n        feeInSatsPerByte, \r\n        configObj,\r\n        testOnly = false\r\n    ) => {\r\n        try {\r\n            // Throw error if wallet does not have utxo set in state\r\n            if (!isValidStoredWallet(wallet)) {\r\n                const walletError = new Error(`Invalid wallet`);\r\n                throw walletError;\r\n            }\r\n            const utxos = wallet.state.slpBalancesAndUtxos.nonSlpUtxos;\r\n\r\n            const CREATION_ADDR = wallet.Path1899.cashAddress;\r\n\r\n            const coins = utxos.map(utxo => Coin.fromJSON(utxo));\r\n\r\n            const tx = new MTX()\r\n\r\n            // Generate the OP_RETURN entry for an SLP GENESIS transaction.\r\n            const genesisOpReturn = buildGenesisOpReturn(configObj);\r\n            // OP_RETURN needs to be the first output in the transaction.\r\n            tx.addOutput(genesisOpReturn, 0);\r\n\r\n            // add output w/ address and amount to send\r\n            tx.addOutput(CREATION_ADDR, currency.etokenSats);\r\n            // Add mint baton output\r\n            if (configObj.mintBatonVout)\r\n                tx.addOutput(CREATION_ADDR, currency.etokenSats); \r\n\r\n            await tx.fund(coins, {\r\n                changeAddress: CREATION_ADDR,\r\n                rate: feeInSatsPerByte * 1000 // 1000 sats per kb = 1 sat/b\r\n            });\r\n\r\n            const keyRingArray = [\r\n                KeyRing.fromSecret(wallet.Path245.fundingWif),\r\n                KeyRing.fromSecret(wallet.Path145.fundingWif),\r\n                KeyRing.fromSecret(wallet.Path1899.fundingWif)\r\n            ];\r\n\r\n            tx.sign(keyRingArray);\r\n\r\n            // output rawhex\r\n            const hex = tx.toRaw().toString('hex');\r\n\r\n            // Broadcast transaction to the network\r\n            let broadcast = { success: true };\r\n            if (!testOnly)\r\n                broadcast = await broadcastTx(hex);\r\n            const txidStr = tx.txid().toString('hex')\r\n\r\n            if (broadcast.success) {\r\n                console.log(`${currency.ticker} txid`, txidStr);\r\n            }\r\n            let link;\r\n            if (process.env.REACT_APP_NETWORK === `mainnet`) {\r\n                link = `${currency.tokenExplorerUrl}/tx/${txidStr}`;\r\n            } else {\r\n                link = `${currency.blockExplorerUrlTestnet}/tx/${txidStr}`;\r\n            }\r\n            //console.log(`link`, link);\r\n\r\n            return link;\r\n        } catch (err) {\r\n            if (err.error === 'insufficient priority (code 66)') {\r\n                err.code = SEND_BCH_ERRORS.INSUFFICIENT_PRIORITY;\r\n            } else if (err.error === 'txn-mempool-conflict (code 18)') {\r\n                err.code = SEND_BCH_ERRORS.DOUBLE_SPENDING;\r\n            } else if (err.error === 'Network Error') {\r\n                err.code = SEND_BCH_ERRORS.NETWORK_ERROR;\r\n            } else if (\r\n                err.error ===\r\n                'too-long-mempool-chain, too many unconfirmed ancestors [limit: 25] (code 64)'\r\n            ) {\r\n                err.code = SEND_BCH_ERRORS.MAX_UNCONFIRMED_TXS;\r\n            }\r\n            console.log(`error: `, err);\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    const sendToken = async (\r\n        wallet,\r\n        { \r\n            tokenId, \r\n            amount, \r\n            tokenReceiverAddress,\r\n            postageData\r\n        },\r\n        feeInSatsPerByte,\r\n        testOnly = false\r\n    ) => {\r\n\r\n        // Get change address from sending utxos\r\n        // fall back to what is stored in wallet\r\n        const REMAINDER_ADDR = wallet.Path1899.cashAddress;\r\n\r\n        const slpBalancesAndUtxos = wallet.state.slpBalancesAndUtxos\r\n        // Handle error of user having no BCH and not using post office\r\n        if (slpBalancesAndUtxos.nonSlpUtxos.length === 0 &&\r\n            !postageData\r\n        ) {\r\n            throw new Error(\r\n                `You need some ${currency.ticker} to send ${currency.tokenTicker}`,\r\n            );\r\n        }\r\n\r\n        const nonSlpCoins = slpBalancesAndUtxos.nonSlpUtxos.map( utxo => \r\n            Coin.fromJSON(utxo)\r\n        );\r\n\r\n        const tokenUtxos = slpBalancesAndUtxos.slpUtxos.filter(\r\n            utxo => {\r\n                if (\r\n                    utxo && // UTXO is associated with a token.\r\n                    utxo.slp.tokenId === tokenId && // UTXO matches the token ID.\r\n                    utxo.slp.type !== 'BATON' // UTXO is not a minting baton.\r\n                ) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n        );\r\n\r\n        if (tokenUtxos.length === 0) {\r\n            throw new Error(\r\n                'No token UTXOs for the specified token could be found.',\r\n            );\r\n        }\r\n\r\n        // Get Info for token being sent\r\n        const tokenInfo = slpBalancesAndUtxos.tokens.find(token => \r\n            token.tokenId == tokenId\r\n        ).info;\r\n        console.log(\"tokenInfo\", tokenInfo);\r\n        // BEGIN transaction construction.\r\n\r\n        const tx = new MTX();\r\n\r\n        let finalTokenAmountSent = new BigNumber(0);\r\n        // TODO: Handle multiple token outputs\r\n        let postageAmount = new BigNumber(0)\r\n        let tokenAmountBeingSentToAddress = new BigNumber(amount)\r\n            .times(10 ** tokenInfo.decimals);\r\n        let totalTokenOutputAmount = tokenAmountBeingSentToAddress;\r\n\r\n        const tokenCoins = [];\r\n        for (let i = 0; i < tokenUtxos.length; i++) {\r\n            const tokenCoin = Coin.fromJSON(tokenUtxos[i]);\r\n            tokenCoins.push(tokenCoin);\r\n\r\n            finalTokenAmountSent = finalTokenAmountSent.plus(\r\n                new BigNumber(tokenUtxos[i].slp.value),\r\n            );\r\n\r\n            // Handle postage\r\n            if (postageData) {\r\n                const postageBaseAmount = calculatePostage(\r\n                    tokenCoins.length,\r\n                    1,\r\n                    postageData\r\n                );\r\n                postageAmount = new BigNumber(postageBaseAmount);\r\n            }\r\n\r\n            totalTokenOutputAmount = tokenAmountBeingSentToAddress\r\n                .plus(postageAmount);\r\n\r\n            if (totalTokenOutputAmount.lte(finalTokenAmountSent)) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        const tokenAmountArray = [ tokenAmountBeingSentToAddress.toString() ];\r\n        // Add postage to output array if exists\r\n        if (postageAmount.gt(0))\r\n            tokenAmountArray.push(postageAmount.toString());\r\n        // Add change if any\r\n        const tokenChangeAmount = finalTokenAmountSent.minus(totalTokenOutputAmount);\r\n        if (tokenChangeAmount.gt(0))\r\n            tokenAmountArray.push(tokenChangeAmount.toString());\r\n\r\n        const sendOpReturn = buildSendOpReturn(\r\n            tokenId,\r\n            tokenAmountArray,\r\n            tokenInfo.version,\r\n        );\r\n\r\n        // Add OP_RETURN as first output.\r\n        tx.addOutput(sendOpReturn, 0);\r\n\r\n        // Send dust representing tokens being sent.\r\n        const decodedTokenReceiverAddress = cashaddr.decode(tokenReceiverAddress);\r\n        const cleanTokenReceiverAddress = cashaddr.encode(\r\n            'ecash',\r\n            decodedTokenReceiverAddress.type,\r\n            decodedTokenReceiverAddress.hash\r\n        );\r\n        // Add destination output\r\n        tx.addOutput(\r\n            cleanTokenReceiverAddress,\r\n            currency.etokenSats,\r\n        );\r\n\r\n        // Add postage output is any\r\n        if (postageAmount.gt(0)) {\r\n            const decodedPostageAddress = cashaddr.decode(postageData.address);\r\n            const cleanPostageAddress = cashaddr.encode(\r\n                'ecash',\r\n                decodedPostageAddress.type,\r\n                decodedPostageAddress.hash\r\n            );\r\n            tx.addOutput(\r\n                cleanPostageAddress,\r\n                currency.etokenSats,\r\n            );\r\n        }\r\n\r\n        // Send token change if there is any\r\n        if (tokenChangeAmount.gt(0)) {\r\n            tx.addOutput(\r\n                REMAINDER_ADDR,\r\n                currency.etokenSats,\r\n            );\r\n        }\r\n\r\n        // If post office is selected\r\n        if (postageData) {\r\n            for (let i =0; i < tokenCoins.length; i++) {\r\n                tx.addCoin(tokenCoins[i]);\r\n            }\r\n        } else {\r\n            // If post office not being used, add native tokens as gas\r\n            await tx.fund([\r\n                    ...tokenCoins,\r\n                    ...nonSlpCoins\r\n                ], {\r\n                inputs: tokenCoins.map(coin => Input.fromCoin(coin).prevout),\r\n                changeAddress: REMAINDER_ADDR,\r\n                rate: feeInSatsPerByte * 1000 // 1000 sats per kb = 1 sat/b\r\n            });\r\n        }\r\n\r\n        const keyRingArray = [\r\n            KeyRing.fromSecret(wallet.Path245.fundingWif),\r\n            KeyRing.fromSecret(wallet.Path145.fundingWif),\r\n            KeyRing.fromSecret(wallet.Path1899.fundingWif)\r\n        ];\r\n\r\n        // Set Sighash type\r\n        const hashTypes = Script.hashType;\r\n        const sighashType = postageData\r\n            ? hashTypes.ALL | hashTypes.ANYONECANPAY | hashTypes.SIGHASH_FORKID\r\n            : hashTypes.ALL | hashTypes.SIGHASH_FORKID;\r\n\r\n        // Sign transaction\r\n        tx.sign(keyRingArray, sighashType);\r\n\r\n        // output rawhex\r\n        let txidStr\r\n        const rawTx = tx.toRaw()\r\n        const hex = rawTx.toString('hex');\r\n        console.log('hex', hex);\r\n        \r\n        const paymentObj = {\r\n            merchantData: Buffer.alloc(0),\r\n            transactions: [rawTx],\r\n            refundTo:[{\r\n                script: Script.fromAddress(REMAINDER_ADDR).toRaw(),\r\n                value: 0\r\n            }],\r\n            memo: ''\r\n        }\r\n        // Broadcast if postage enabled\r\n        if (postageData) {\r\n            let paymentAck;\r\n            if (!testOnly) {\r\n                paymentAck = await postPayment(\r\n                    POSTAGE_URL,\r\n                    paymentObj,\r\n                    currency.tokenPrefixes[0]\r\n                );\r\n            }\r\n\r\n            if (paymentAck.payment) {\r\n                const transactionIds = paymentAck.payment.transactions.map(t =>\r\n                    TX.fromRaw(t).txid()\r\n                );\r\n                txidStr = transactionIds[0];\r\n                console.log(`${currency.tokenTicker} txid`, txidStr);\r\n            }\r\n\r\n        } else {\r\n            // Broadcast transaction to the network\r\n            let broadcast = { success: true };\r\n            if (!testOnly)\r\n                broadcast = await broadcastTx(hex);\r\n            txidStr = tx.txid().toString('hex')\r\n\r\n            if (broadcast.success) {\r\n                console.log(`${currency.tokenTicker} txid`, txidStr);\r\n            }\r\n        }\r\n\r\n        let link;\r\n        if (process.env.REACT_APP_NETWORK === `mainnet`) {\r\n            link = `${currency.tokenExplorerUrl}/tx/${txidStr}`;\r\n        } else {\r\n            link = `${currency.blockExplorerUrlTestnet}/tx/${txidStr}`;\r\n        }\r\n\r\n        //console.log(`link`, link);\r\n\r\n        return link;\r\n    };\r\n\r\n    const signPkMessage = async (pk, message) => {\r\n        try {\r\n            const keyring = KeyRing.fromSecret(pk);\r\n            const sig = utils.message.sign(message, keyring);\r\n            return sig.toString('base64');\r\n        } catch (err) {\r\n            console.log(`useBCH.signPkMessage() error: `, err);\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    const sendXec = async (\r\n        wallet,\r\n        feeInSatsPerByte,\r\n        optionalOpReturnMsg,\r\n        isOneToMany,\r\n        destinationAddressAndValueArray,\r\n        destinationAddress,\r\n        sendAmount,\r\n        testOnly = false\r\n    ) => {\r\n        try {\r\n            let value = new BigNumber(0);\r\n\r\n            const tx = new MTX();\r\n\r\n            if (isOneToMany) {\r\n                // this is a one to many XEC transaction\r\n                if (\r\n                    !destinationAddressAndValueArray ||\r\n                    !destinationAddressAndValueArray.length\r\n                ) {\r\n                    throw new Error('Invalid destinationAddressAndValueArray');\r\n                }\r\n                const arrayLength = destinationAddressAndValueArray.length;\r\n                for (let i = 0; i < arrayLength; i++) {\r\n                    // add the total value being sent in this array of recipients\r\n                    value = BigNumber.sum(\r\n                        value,\r\n                        new BigNumber(\r\n                            destinationAddressAndValueArray[i].split(',')[1],\r\n                        ),\r\n                    );\r\n                }\r\n\r\n                // If user is attempting to send an aggregate value that is less than minimum accepted by the backend\r\n                if (\r\n                    value.lt(\r\n                        new BigNumber(\r\n                            fromSmallestDenomination(\r\n                                currency.dustSats,\r\n                            ).toString(),\r\n                        ),\r\n                    )\r\n                ) {\r\n                    // Throw the same error given by the backend attempting to broadcast such a tx\r\n                    throw new Error('dust');\r\n                }\r\n            } else {\r\n                // this is a one to one XEC transaction then check sendAmount\r\n                // note: one to many transactions won't be sending a single sendAmount\r\n\r\n                if (!sendAmount) {\r\n                    return null;\r\n                }\r\n\r\n                value = new BigNumber(sendAmount);\r\n\r\n                // If user is attempting to send less than minimum accepted by the backend\r\n                if (\r\n                    value.lt(\r\n                        new BigNumber(\r\n                            fromSmallestDenomination(\r\n                                currency.dustSats,\r\n                            ).toString(),\r\n                        ),\r\n                    )\r\n                ) {\r\n                    // Throw the same error given by the backend attempting to broadcast such a tx\r\n                    throw new Error('dust');\r\n                }\r\n            }\r\n\r\n            const satoshisToSend = toSmallestDenomination(value);\r\n\r\n            // Throw validation error if toSmallestDenomination returns false\r\n            if (!satoshisToSend) {\r\n                const error = new Error(\r\n                    `Invalid decimal places for send amount`,\r\n                );\r\n                throw error;\r\n            }\r\n\r\n            // Start of building the OP_RETURN output.\r\n            // only build the OP_RETURN output if the user supplied it\r\n            if (\r\n                typeof optionalOpReturnMsg !== 'undefined' &&\r\n                optionalOpReturnMsg.trim() !== ''\r\n            ) {\r\n                const script = new Script()\r\n                    .pushSym('return')\r\n                    .pushData(Buffer.from(\r\n                        currency.opReturn.appPrefixesHex.cashtab,\r\n                        'hex',\r\n                    ))\r\n                    .pushString(optionalOpReturnMsg)\r\n                    .compile();\r\n\r\n                tx.addOutput(script, 0);\r\n            }\r\n            // End of building the OP_RETURN output.\r\n            const utxos = wallet.state.slpBalancesAndUtxos.nonSlpUtxos\r\n            let coins = [];\r\n            for (let i = 0; i < utxos.length; i++) {\r\n                const utxo = utxos[i];\r\n                coins.push(Coin.fromJSON(utxo));\r\n            }\r\n\r\n            // Get change address from sending utxos\r\n            // fall back to what is stored in wallet\r\n            const REMAINDER_ADDR = wallet.Path1899.cashAddress;\r\n\r\n            if (isOneToMany) {\r\n                // for one to many mode, add the multiple outputs from the array\r\n                let arrayLength = destinationAddressAndValueArray.length;\r\n                for (let i = 0; i < arrayLength; i++) {\r\n                    // add each send tx from the array as an output\r\n                    let outputAddress =\r\n                        destinationAddressAndValueArray[i].split(',')[0];\r\n                    let outputValue = new BigNumber(\r\n                        destinationAddressAndValueArray[i].split(',')[1],\r\n                    );\r\n\r\n                    tx.addOutput(\r\n                        outputAddress, \r\n                        parseInt(toSmallestDenomination(outputValue))\r\n                    );\r\n                }\r\n            } else {\r\n                // for one to one mode, add output w/ single address and amount to send\r\n                tx.addOutput(\r\n                    destinationAddress, \r\n                    parseInt(toSmallestDenomination(value))\r\n                );\r\n            }\r\n\r\n            await tx.fund(coins, {\r\n                changeAddress: REMAINDER_ADDR,\r\n                rate: feeInSatsPerByte * 1000 // 1000 sats per kb = 1 sat/b\r\n            });\r\n\r\n            const keyRingArray = [\r\n                KeyRing.fromSecret(wallet.Path245.fundingWif),\r\n                KeyRing.fromSecret(wallet.Path145.fundingWif),\r\n                KeyRing.fromSecret(wallet.Path1899.fundingWif)\r\n            ];\r\n\r\n            tx.sign(keyRingArray);\r\n\r\n            // output rawhex\r\n            const hex = tx.toRaw().toString('hex');\r\n\r\n            // Broadcast transaction to the network\r\n            let broadcast = {success: true};\r\n            if (!testOnly)\r\n                broadcast = await broadcastTx(hex);\r\n            const txidStr = tx.txid().toString('hex')\r\n\r\n            if (broadcast.success) {\r\n                console.log(`${currency.ticker} txid`, txidStr);\r\n            }\r\n            let link;\r\n            if (process.env.REACT_APP_NETWORK === `mainnet`) {\r\n                link = `${currency.blockExplorerUrl}/tx/${txidStr}`;\r\n            } else {\r\n                link = `${currency.blockExplorerUrlTestnet}/tx/${txidStr}`;\r\n            }\r\n            //console.log(`link`, link);\r\n\r\n            return link;\r\n        } catch (err) {\r\n            if (err.error === 'insufficient priority (code 66)') {\r\n                err.code = SEND_BCH_ERRORS.INSUFFICIENT_PRIORITY;\r\n            } else if (err.error === 'txn-mempool-conflict (code 18)') {\r\n                err.code = SEND_BCH_ERRORS.DOUBLE_SPENDING;\r\n            } else if (err.error === 'Network Error') {\r\n                err.code = SEND_BCH_ERRORS.NETWORK_ERROR;\r\n            } else if (\r\n                err.error ===\r\n                'too-long-mempool-chain, too many unconfirmed ancestors [limit: 25] (code 64)'\r\n            ) {\r\n                err.code = SEND_BCH_ERRORS.MAX_UNCONFIRMED_TXS;\r\n            }\r\n            console.log(`error: `, err);\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    const sendBip70 = async (\r\n        wallet,\r\n        paymentDetails, // b70.PaymentDetails\r\n        feeInSatsPerByte,\r\n        testOnly = false,\r\n        isPreburn = false,\r\n        rawChainTxs = [] // All outputs for this wallet address in last TX will be used\r\n    ) => {\r\n        // Get change address from sending utxos\r\n        // fall back to what is stored in wallet\r\n        const REMAINDER_ADDR = wallet.Path1899.cashAddress;\r\n        const refundOutput = new Output({\r\n            address: REMAINDER_ADDR\r\n        });\r\n\r\n        const slpBalancesAndUtxos = wallet.state.slpBalancesAndUtxos;\r\n        let nonSlpCoins = slpBalancesAndUtxos.nonSlpUtxos.map( utxo => \r\n            Coin.fromJSON(utxo)\r\n        );\r\n\r\n        // Check to see if this is an SLP/eToken transaction\r\n        const firstOutput = paymentDetails.outputs[0]\r\n        // console.log('paymentDetails', paymentDetails);\r\n        // console.log('paymentDetails.outputs', paymentDetails.outputs);\r\n        const slpScript = SLP.fromRaw(Buffer.from(firstOutput.script));\r\n        const isSlp = slpScript.isValidSlp();\r\n\r\n        // Check to see if rawChainTxs satisfies the payment request\r\n        let paymentObj;\r\n        let txidStr;\r\n        if (rawChainTxs.length >= 1) {\r\n            const tx = TX.fromRaw(rawChainTxs[rawChainTxs.length - 1]);\r\n            const txOutputs = tx.outputs.map(output => output.toJSON());\r\n            const prOutputs = paymentDetails.outputs.map(output => {\r\n                return {\r\n                    script: output.script.toString('hex'),\r\n                    value: output.value\r\n                };\r\n            });\r\n            // console.log('txOutputs', txOutputs)\r\n            // console.log('prOutputs', prOutputs)\r\n            let requestFulfilled = false;\r\n            for (let i = 0; i < prOutputs.length; i++) {\r\n                requestFulfilled = prOutputs[i].script === txOutputs[i].script\r\n                    && prOutputs[i].value === txOutputs[i].value\r\n                // Handle MINT being able to fulfill SEND payment request\r\n                if (i === 0) {\r\n                    requestFulfilled = prOutputs[i].script.replace('53454e44', '4d494e54') === txOutputs[i].script\r\n                    && prOutputs[i].value === txOutputs[i].value\r\n                }\r\n                // console.log('Request fulfilled?', i, requestFulfilled)\r\n                // If any output doesn't match, break\r\n                if (!requestFulfilled)\r\n                    break;\r\n            }\r\n\r\n            if (requestFulfilled) {\r\n                // Build payment object to send in BIP 70 response\r\n                txidStr=  tx.txid().toString('hex');\r\n                paymentObj = {\r\n                    merchantData: Buffer.alloc(0),\r\n                    transactions: rawChainTxs,\r\n                    refundTo:[{\r\n                        script: refundOutput.script.toRaw(),\r\n                        value: 0\r\n                    }],\r\n                    memo: paymentDetails.memo\r\n                }\r\n            }\r\n        }\r\n\r\n        // Build the payment object\r\n        if (!paymentObj) {\r\n            let postagePaid = false;\r\n            const tokenCoins = [];\r\n            // If is SLP\r\n            if (isSlp) {\r\n\r\n                const tokenIdBuf = slpScript.getData(4);\r\n                const tokenId = tokenIdBuf.toString('hex');\r\n\r\n                // Is Postage Paid by Merchant?\r\n                const merchantData = paymentDetails.getData('json');\r\n                // console.log('merchantData', merchantData)\r\n                // console.log('typeof merchantData', typeof merchantData)\r\n                if (typeof merchantData === \"object\" && merchantData.postage) {\r\n                    const stamps = merchantData.postage.stamps;\r\n                    const listing = stamps.find(stamp => stamp.tokenId == tokenId);\r\n                    // If postage is paid don't use native token funding\r\n                    if (listing && listing.rate == 0) {\r\n                        postagePaid = true;\r\n                    }\r\n                }\r\n                console.log('postagePaid', postagePaid);\r\n\r\n                // Throw error if transaction type is not SEND\r\n                const slpType = slpScript.getType();\r\n                if (slpType !== 'SEND' && slpType !== 'BURN')\r\n                    throw new Error(`Token ${slpType} transactions not supported`);\r\n\r\n                // Get required UTXOs\r\n                const sendRecords = slpScript.getRecords(tokenIdBuf);\r\n                const tokenVersion = sendRecords[0]?.version;\r\n                const totalBase = sendRecords.reduce((total, record) => {\r\n                    return total.add(U64.fromBE(Buffer.from(record.value)));\r\n                }, U64.fromInt(0));\r\n                let totalTokenBalance = U64.fromInt(0);\r\n                const token = wallet.state.tokens.find(token => \r\n                    token.tokenId === tokenId\r\n                );\r\n                if (token) {\r\n                    totalTokenBalance = U64.fromString(\r\n                        token.balance.toString()\r\n                    );\r\n                }\r\n                if (totalTokenBalance.lt(totalBase) && rawChainTxs.length === 0)\r\n                    throw new Error ('Insufficient token balance to complete transaction');\r\n\r\n                const tokenUtxos = [];\r\n                \r\n                // Add utxos from chained parent if present\r\n                if (rawChainTxs.length > 0) {\r\n                    // If a chain TX is provided, use it for the input coins\r\n                    const parentTx = TX.fromRaw(rawChainTxs[rawChainTxs.length -1]);\r\n                    // Parse SLP script\r\n                    const slpScript = script.SLP.fromRaw(parentTx.outputs[0].script.toRaw())\r\n                    const records = slpScript.getRecords(Buffer.alloc(32))\r\n                    // Iterate through parentTx outputs\r\n                    for (let i = 0; i < parentTx.outputs.length; i++) {\r\n                        const address = parentTx.outputs[i].getAddress()?.toString()\r\n                        if (address === REMAINDER_ADDR) {\r\n                            const record = records.find(r => r.type !== 'BATON' && r.vout === i)\r\n                            if (record) {\r\n                                // convert to coin first for compatibility\r\n                                const coin = Coin.fromTX(parentTx, i, -1);\r\n                                coin.slp = record;\r\n                                const utxo = coin.toJSON();\r\n                                // Add UTXO\r\n                                tokenUtxos.push(utxo)\r\n                            }\r\n                        }\r\n                    }\r\n                \r\n                }\r\n\r\n                if (slpType === 'BURN' && !isPreburn) {\r\n                    // Send up preburn split transaction\r\n                    // Postage will be added and it will be cached on server\r\n                    // Use UTXO from response as input UTXO for burn\r\n\r\n                    // Clear utxo array in case rawChainTxs is present\r\n                    tokenUtxos.length = 0;\r\n\r\n                    // First clone payment details to use with split tx\r\n                    const splitDetails = PaymentDetails.fromOptions(\r\n                        paymentDetails\r\n                    );\r\n                    // Replace with split tx outputs\r\n                    const sendTotalString = totalBase.toString();\r\n                    const sendOpReturn = buildSendOpReturn(\r\n                        tokenId,\r\n                        [sendTotalString],\r\n                        tokenVersion\r\n                    );\r\n                    const opReturnOut = {\r\n                        script: sendOpReturn.toRaw(),\r\n                        value: 0\r\n                    };\r\n                    const preburnOut = new Output({\r\n                        address: REMAINDER_ADDR,\r\n                        value: 546\r\n                    });\r\n                    splitDetails.outputs = [\r\n                        opReturnOut, \r\n                        {\r\n                            script: preburnOut.script.toRaw(),\r\n                            value: preburnOut.value\r\n                        }\r\n                    ]\r\n                    // Send split tx and get Payment object back if successful\r\n                    const splitPayment = await sendBip70(\r\n                        wallet,\r\n                        splitDetails,\r\n                        feeInSatsPerByte,\r\n                        false,\r\n                        true\r\n                    );\r\n                    const merchantData = splitPayment.getData('json');\r\n                    if (!merchantData.preburn)\r\n                        throw new Error('Burn failed: Preburn tx hash not returned from payment server');\r\n\r\n                    // Use split UTXO as sole input UTXO\r\n                    tokenUtxos.push({\r\n                        version: 1,\r\n                        height: -1,\r\n                        coinbase: false,\r\n                        script: preburnOut.script.toJSON(),\r\n                        value: preburnOut.value,\r\n                        hash: merchantData.preburn,\r\n                        index: 1,\r\n                        slp: {\r\n                            vout: 1,\r\n                            tokenId,\r\n                            value: sendTotalString,\r\n                            type: \"SEND\"\r\n                        }\r\n                    });\r\n\r\n                } else {\r\n                    // Use available UTXOS in wallet\r\n                    const availableTokenUtxos = slpBalancesAndUtxos.slpUtxos.filter(\r\n                        utxo => {\r\n                            if (\r\n                                utxo && // UTXO is associated with a token.\r\n                                utxo.slp.tokenId === tokenId && // UTXO matches the token ID.\r\n                                utxo.slp.type !== 'BATON' // UTXO is not a minting baton.\r\n                            ) {\r\n                                return true;\r\n                            }\r\n                            return false;\r\n                        },\r\n                    );\r\n\r\n                    tokenUtxos.push(...availableTokenUtxos);\r\n                }\r\n\r\n                if (tokenUtxos.length === 0) {\r\n                    throw new Error(\r\n                        'No token UTXOs for the specified token could be found.',\r\n                    );\r\n                }\r\n\r\n                let finalTokenAmountSent = U64.fromInt(0);\r\n                for (let i = 0; i < tokenUtxos.length; i++) {\r\n                    console.log('tokenUtxos', tokenUtxos);\r\n                    const tokenCoin = Coin.fromJSON(tokenUtxos[i]);\r\n                    tokenCoins.push(tokenCoin);\r\n\r\n                    finalTokenAmountSent = finalTokenAmountSent.add(\r\n                        U64.fromString(tokenUtxos[i].slp.value),\r\n                    );\r\n\r\n                    if (totalBase.lte(finalTokenAmountSent)) {\r\n                        // Add token change amount to SLP OP_RETURN\r\n                        const tokenChangeAmount = finalTokenAmountSent.sub(totalBase);\r\n                        // Skip if change amount is zero\r\n                        if (tokenChangeAmount.toInt() != 0) {\r\n                            slpScript.pushData(tokenChangeAmount.toBE(Buffer)).compile();\r\n                            // add additional output for change\r\n                            paymentDetails.outputs[0].script = slpScript.toRaw()\r\n                            paymentDetails.outputs.splice(\r\n                                sendRecords.length + 1, // Must skip OP_RETURN\r\n                                0,\r\n                                {\r\n                                    script: refundOutput.script.toRaw(),\r\n                                    value: 546\r\n                                }\r\n                            );\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // Handle error of user having no BCH and postage not paid\r\n                if (!postagePaid && slpBalancesAndUtxos.nonSlpUtxos.length === 0) {\r\n                    throw new Error(\r\n                        `You need some ${currency.ticker} to send ${currency.tokenTicker}`,\r\n                    );\r\n                }\r\n            }\r\n\r\n            // Build Transaction\r\n            const tx = new MTX();\r\n            // Set SigHashType\r\n            let sigHashType = Script.hashType.ALL | Script.hashType.SIGHASH_FORKID;\r\n\r\n            // Add required outputs\r\n            for (let i = 0; i < paymentDetails.outputs.length; i++) {\r\n                tx.addOutput(paymentDetails.outputs[i]);\r\n            }\r\n\r\n            if (postagePaid) {\r\n                // Postage Protocol requires ANYONECANPAY\r\n                sigHashType = Script.hashType.ANYONECANPAY | sigHashType;\r\n\r\n                for (let i = 0; i < tokenCoins.length; i++) {\r\n                    tx.addCoin(tokenCoins[i]);\r\n                }\r\n            } else {\r\n                await tx.fund([\r\n                        ...tokenCoins,\r\n                        ...nonSlpCoins\r\n                    ], {\r\n                    inputs: tokenCoins.map(coin => Input.fromCoin(coin).prevout),\r\n                    changeAddress: REMAINDER_ADDR,\r\n                    rate: feeInSatsPerByte * 1000 // 1000 sats per kb = 1 sat/b\r\n                });\r\n            }\r\n\r\n            const keyRingArray = [\r\n                KeyRing.fromSecret(wallet.Path245.fundingWif),\r\n                KeyRing.fromSecret(wallet.Path145.fundingWif),\r\n                KeyRing.fromSecret(wallet.Path1899.fundingWif)\r\n            ];\r\n\r\n            tx.sign(keyRingArray, sigHashType);\r\n\r\n            // output rawhex\r\n            const rawTx = tx.toRaw()\r\n            const hex = rawTx.toString('hex');\r\n            console.log('hex', hex);\r\n\r\n            // Add on any \r\n            const rawTxs = [\r\n                ...rawChainTxs,\r\n                rawTx\r\n            ]\r\n\r\n            paymentObj = {\r\n                merchantData: Buffer.alloc(0),\r\n                transactions: rawTxs,\r\n                refundTo:[{\r\n                    script: refundOutput.script.toRaw(),\r\n                    value: 0\r\n                }],\r\n                memo: paymentDetails.memo\r\n            }\r\n\r\n            txidStr = tx.txid().toString('hex');\r\n\r\n        }\r\n\r\n        // Broadcast transaction to the network\r\n        let paymentAck;\r\n        if (!testOnly) {\r\n            paymentAck = await postPayment(\r\n                paymentDetails.paymentUrl,\r\n                paymentObj,\r\n                isSlp ? currency.tokenPrefixes[0] : currency.prefixes[0]\r\n            );\r\n        }\r\n\r\n        if (paymentAck.payment) {\r\n            // Return the payment object from the ACK if is preburn\r\n            if (isPreburn)\r\n                return paymentAck.payment\r\n\r\n            const transactionIds = paymentAck.payment.transactions.map(t =>\r\n                TX.fromRaw(t).txid()\r\n            );\r\n            txidStr = transactionIds[0];\r\n\r\n            console.log(`${currency.tokenTicker} txid`, txidStr);\r\n            \r\n            if (isSlp) {\r\n                const possibleExternalMint = TX.fromRaw(paymentAck.payment.transactions[0]);\r\n                const slpScript = script.SLP.fromRaw(possibleExternalMint.outputs[0].script.toRaw())\r\n                const isMint = slpScript.getType() === 'MINT';\r\n                const isVersion2 = slpScript.getString(2, 'hex') == '02';\r\n                if (isMint && isVersion2) {\r\n                    const slpOutputs = slpScript.code.slice(5);\r\n                    let mintQuantity = U64.fromNumber(0);\r\n                    for (let i = 0; i < slpOutputs.length; i++) {\r\n                        const valueU64 = U64.fromBE(slpOutputs[i].toData());\r\n                        mintQuantity.iadd(valueU64);\r\n                    }\r\n                    await writeMempoolMint({\r\n                        txid: txidStr, \r\n                        token_id: slpScript.getData(4).toString('hex'),\r\n                        block: -1,\r\n                        minter_pubkey: wallet.Path1899.publicKey,\r\n                        mint_total_amount: mintQuantity.toInt(),\r\n                    });                    \r\n                }\r\n            }\r\n        }\r\n\r\n        let link;\r\n        if (process.env.REACT_APP_NETWORK === `mainnet`) {\r\n            link = `${currency.tokenExplorerUrl}/tx/${txidStr}`;\r\n        } else {\r\n            link = `${currency.blockExplorerUrlTestnet}/tx/${txidStr}`;\r\n        }\r\n\r\n        //console.log(`link`, link);\r\n\r\n        return link;\r\n    };\r\n\r\n    const readAuthCode = (authCode) => {\r\n        const authCodeBuf = Buffer.from(authCode, 'base64');\r\n        if (authCodeBuf.length > 300)\r\n            return readAuthCodeV2(authCode);\r\n        const authReader = read(authCodeBuf);\r\n        const mintQuantity = authReader.readBytes(8);\r\n        const stampRawOutpoint = authReader.readBytes(36);\r\n        const stampOutpoint = Outpoint.fromRaw(stampRawOutpoint);\r\n        // Auth signature is remaining bytes\r\n        const txAuthSig = authReader.readBytes(authReader.getSize() - authReader.offset);\r\n\r\n        return {\r\n            version: 1,\r\n            mintQuantity,\r\n            stampOutpoint,\r\n            txAuthSig\r\n        }\r\n    }\r\n\r\n    const readAuthCodeV2 = (authCode) => {\r\n        const authCodeBuf = Buffer.from(authCode, 'base64');\r\n        const authReader = read(authCodeBuf);\r\n        const authPubKey = authReader.readBytes(33);\r\n        const serializedMerkleProof = authReader.readBytes(33 * 7);\r\n        const txAuthSig = authReader.readVarBytes();\r\n        const mintId = authReader.readBytes(6);\r\n        const minterPubKeyHash = authReader.readBytes(20);\r\n        const batonBuf = authReader.readBytes(36);\r\n        const batonUtxo = Outpoint.fromRaw(batonBuf);\r\n        const txSerializedOutputs = authReader.readBytes(authReader.getSize() - authReader.offset);\r\n        const outputsReader = read(txSerializedOutputs);\r\n        const txOutputs = [];\r\n        while (outputsReader.getSize() > outputsReader.offset) {\r\n            txOutputs.push(Output.fromReader(outputsReader))\r\n        }\r\n        // Get token ID and mint quantity\r\n    const tokenId = txOutputs[0].script.getData(4);\r\n    const mintQuantity = U64.fromNumber(0);\r\n    const slpOutputs = txOutputs[0].script.code.slice(5);\r\n    for (let i = 0; i < slpOutputs.length; i++) {\r\n        const valueU64 = U64.fromBE(slpOutputs[i].toData());\r\n        mintQuantity.iadd(valueU64);\r\n    }\r\n\r\n    return {\r\n        version: 2,\r\n        tokenId,\r\n        mintQuantity: mintQuantity.toBE(Buffer),\r\n            authCodeBuf,\r\n            authPubKey,\r\n            serializedMerkleProof,\r\n            mintId,\r\n            minterPubKeyHash,\r\n            batonUtxo,\r\n            txSerializedOutputs,\r\n            txOutputs,\r\n            txAuthSig\r\n        }\r\n    }\r\n\r\n    const sendSelfMint = async (\r\n        wallet,\r\n        tokenId, // Buffer\r\n        authCode,\r\n        testOnly = false,\r\n        returnRawTx = false\r\n    ) => {\r\n        try {\r\n            const tokenIdString = tokenId.toString('hex');\r\n            // Process entered Auth Code string\r\n            const {\r\n                mintQuantity,\r\n                stampOutpoint,\r\n                txAuthSig\r\n            } = readAuthCode(authCode);\r\n            // console.log('stampRawoutpoint', stampRawOutpoint);\r\n            // console.log('txAuthSig', txAuthSig);\r\n\r\n            // Get authPubKey for token\r\n            const { pubkey: authPubKey } = authPubKeys.find(authObj => \r\n                authObj.tokenId == tokenIdString\r\n            );\r\n            // console.log('authKeyBuf', Buffer.from(authPubKey, 'hex'));\r\n            if (!authPubKey)\r\n                throw new Error(`Unsupported self-mint token ID: ${tokenIdString}`);\r\n\r\n            // Build Baton Outscript\r\n            const outscript = buildOutScript(\r\n                Buffer.from(authPubKey, 'hex'),\r\n                false\r\n            );\r\n            const outScriptHash = Hash160.digest(outscript.toRaw());\r\n            const p2shPubKeyScript = Script.fromScripthash(outScriptHash);\r\n            const p2shAddress = p2shPubKeyScript.getAddress();\r\n\r\n            // Find Baton\r\n            const batonAddrUtxos = await getUtxosBcash([\r\n                p2shAddress.toCashAddr()\r\n            ]);\r\n            const batonUtxo = batonAddrUtxos.find(u => \r\n                u.slp?.tokenId == tokenIdString && u.slp.type == 'BATON'\r\n            );\r\n\r\n            // Stub coin/utxo for \"stamp\" and baton\r\n            const batonCoin = Coin.fromJSON(batonUtxo);\r\n\r\n            // Build Stamp Outscript\r\n            const stampOutscript = buildOutScript(\r\n                Buffer.from(authPubKey, 'hex'), \r\n                true\r\n            );\r\n            const stampOutScriptHash = Hash160.digest(stampOutscript.toRaw());\r\n            const stampP2shPubKeyScript = Script.fromScripthash(stampOutScriptHash);\r\n            const stampUtxo = await getUtxoBcash(\r\n                stampOutpoint.txid().toString('hex'),\r\n                stampOutpoint.index\r\n            )\r\n\r\n            if (!stampUtxo)\r\n                throw new Error('Stamp UTXO in auth code is spent or invalid');\r\n\r\n            const stampCoin = Coin.fromJSON(stampUtxo);\r\n\r\n            const keyring = KeyRing.fromSecret(wallet.Path1899.fundingWif);\r\n            // Construct transaction\r\n            const tx = new TXUtil()\r\n            // Build MINT OP_RETURN\r\n            const mintOpReturn = buildMintOpReturn(tokenId, mintQuantity);\r\n            // Add outputs\r\n            tx.addOutput(mintOpReturn, 0) // SLP mint OP_RETURN\r\n            tx.addOutput(keyring.getAddress(), 546) // Minted tokens\r\n            tx.addOutput(p2shAddress, 546) // Mint baton return\r\n            // Add inputs (must be in this order)\r\n            tx.addCoin(stampCoin) // Input index 0: \"stamp\"\r\n            tx.addCoin(batonCoin); // Input index 1: existing mint baton\r\n\r\n            const sigHashType = Script.hashType.ALL | Script.hashType.SIGHASH_FORKID;\r\n            const flags = Script.flags.STANDARD_VERIFY_FLAGS;\r\n\r\n            // Sign TX\r\n            tx.template(keyring); // prepares the template\r\n            // Get the prevout and outputs sequences as they appear in the preimage\r\n            const rawOutputs= tx.outputs.map(output => output.toRaw());\r\n            const outputSeq = Buffer.concat(rawOutputs);\r\n            const rawPrevouts= tx.inputs.map(input => input.prevout.toRaw());\r\n            const prevoutSeq = Buffer.concat(rawPrevouts);\r\n            // Sign The Stamp and Baton\r\n            for (let i = 0; i < 2; i++) {\r\n                const {prevout} = tx.inputs[i];\r\n                const p2shCoin = tx.view.getOutput(prevout);\r\n                const subscript = i == 0 ? stampOutscript : outscript;\r\n                const sig = tx.signature(i, subscript, p2shCoin.value, keyring.privateKey, sigHashType, flags);\r\n                const preimage = tx.getPreimage(i, subscript, p2shCoin.value, sigHashType, false);\r\n                const items = [\r\n                    sig,\r\n                    keyring.getPublicKey(),\r\n                    Buffer.from(preimage.toString('hex'), 'hex'),  \r\n                    txAuthSig,\r\n                    outputSeq,\r\n                    prevoutSeq,\r\n                    subscript.toRaw()\r\n                ];\r\n                tx.inputs[i].script.fromItems(items);\r\n            }\r\n\r\n            const rawTx = tx.toRaw()\r\n            const hex = rawTx.toString('hex')\r\n\r\n            // Verify\r\n            // const mintMsgBuf = Buffer.concat([\r\n            //     stampRawOutpoint,\r\n            //     tx.outputs[0].toRaw(),\r\n            //     tx.outputs[1].toRaw(),\r\n            //     tx.outputs[2].toRaw(),\r\n            // ])\r\n            // console.log('mintMsgBuf', mintMsgBuf);\r\n            // console.log('mintMsgBufHash', SHA256.digest(mintMsgBuf));\r\n            // console.log('checking index 0');\r\n            // const checkBaton = tx.checkInput(0, stampCoin);\r\n            // console.log('checking index 1');\r\n            // const checkStamp = tx.checkInput(1, batonCoin);\r\n            const verified = tx.verify(tx.view);\r\n            \r\n            console.log('verified', verified);\r\n            console.log('tx size', tx.getSize());\r\n            console.log('fee', tx.getFee());\r\n            console.log('tx hex', hex);\r\n\r\n            if (!verified)\r\n                throw new Error('Transaction verification failed');\r\n\r\n            if (returnRawTx)\r\n                return rawTx;\r\n        \r\n            // Broadcast transaction to the network\r\n            let broadcast = {success: true};\r\n            if (!testOnly) {\r\n                broadcast = await broadcastTx(hex);\r\n                if (broadcast.error)\r\n                    throw broadcast.error\r\n            }\r\n\r\n            const txidStr = tx.txid().toString('hex')\r\n\r\n            if (broadcast.success) {\r\n                console.log(`${currency.tokenTicker} txid`, txidStr);\r\n            }\r\n            let link;\r\n            if (process.env.REACT_APP_NETWORK === `mainnet`) {\r\n                link = `${currency.tokenExplorerUrl}/tx/${txidStr}`;\r\n            } else {\r\n                link = `${currency.blockExplorerUrlTestnet}/tx/${txidStr}`;\r\n            }\r\n            //console.log(`link`, link);\r\n\r\n            return link;\r\n        } catch (err) {\r\n            if (err.error === 'insufficient priority (code 66)') {\r\n                err.code = SEND_BCH_ERRORS.INSUFFICIENT_PRIORITY;\r\n            } else if (err.error === 'txn-mempool-conflict (code 18)') {\r\n                err.code = SEND_BCH_ERRORS.DOUBLE_SPENDING;\r\n            } else if (err.error === 'Network Error') {\r\n                err.code = SEND_BCH_ERRORS.NETWORK_ERROR;\r\n            } else if (\r\n                err.error ===\r\n                'too-long-mempool-chain, too many unconfirmed ancestors [limit: 25] (code 64)'\r\n            ) {\r\n                err.code = SEND_BCH_ERRORS.MAX_UNCONFIRMED_TXS;\r\n            }\r\n            console.log(`error: `, err);\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    const outscriptHexV2 = '01217f78aa7c517f01207f6b7c81637c687eaa6c5' +\r\n    '17f01207f6b7c81637c687eaa6c517f01207f6b7c81637c687eaa6c517f01207' +\r\n    'f6b7c81637c687eaa6c517f01207f6b7c81637c687eaa6c517f01207f6b7c816' +\r\n    '37c687eaa6c517f7c81637c687eaa2062443f1f0f45468a0e69c6eb1f3f4aabd' +\r\n    'cc541ac64eae813365d47dbf6dab176887c517f7c817f766b7bbb6c011a7f7c5' +\r\n    '67f5479a9887501247faa5279820128947f01207f757b8801447f7701247f758' +\r\n    '8a86f7b828c7f757c7bbb75ac';\r\n\r\n    const getOutscriptHexV2 = (isSandbox = false) => {\r\n        if (isSandbox)\r\n            return outscriptHexV2.replace(\r\n                '62443f1f0f45468a0e69c6eb1f3f4aabdcc541ac64eae813365d47dbf6dab176',\r\n                '2378b2a25b26ab248cd09a11b41f54452c4c8860fd1f7a835d13e784b1ac80be'\r\n            );\r\n        return outscriptHexV2;\r\n    }\r\n\r\n    const getMintVaultAddress = (isSandbox = false) => {\r\n        const outscriptHex = getOutscriptHexV2(isSandbox);\r\n        console.log('outscriptHex', outscriptHex);\r\n        const outScriptHash = Hash160.digest(Buffer.from(outscriptHex, 'hex'));\r\n        const p2shPubKeyScript = Script.fromScripthash(outScriptHash);\r\n        return p2shPubKeyScript.getAddress();\r\n    }\r\n\r\n    const sendSelfMintV2 = async (\r\n        wallet,\r\n        authCode, // Base64\r\n        testOnly = false,\r\n        returnRawTx = false,\r\n        rawBurnTx,\r\n        isSandbox = false\r\n    ) => {\r\n        try {\r\n            // Process entered Auth Code string\r\n            const {\r\n                batonUtxo,\r\n                txOutputs,\r\n                authCodeBuf\r\n            } = readAuthCode(authCode);\r\n\r\n            // Find Baton\r\n            let batonCoin;\r\n            if (rawBurnTx) {\r\n                const burnTx = TXUtil.fromRaw(rawBurnTx);\r\n                batonCoin = Coin.fromTX(burnTx, 1, -1)\r\n            } else {\r\n                const batonFullUtxo = await getUtxoBcash(\r\n                    batonUtxo.rhash(),\r\n                    batonUtxo.index\r\n                );\r\n                // Baton coin\r\n                batonCoin = Coin.fromJSON(batonFullUtxo);\r\n            }\r\n            \r\n\r\n            const keyring = KeyRing.fromSecret(wallet.Path1899.fundingWif);\r\n            // Construct transaction\r\n            const tx = new TXUtil();\r\n            // Add outputs\r\n            tx.outputs = txOutputs;\r\n            // Add inputs (must be in this order)\r\n            tx.addCoin(batonCoin); // Input index 0: existing mint baton\r\n\r\n            const outScript = Script.fromRaw(Buffer.from(getOutscriptHexV2(isSandbox), 'hex'));\r\n\r\n            // Validation steps\r\n            const p2shAddr = Address.fromScripthash(outScript.hash160());\r\n            if (p2shAddr.toString() !== batonCoin.getAddress().toString())\r\n                throw new Error('Unsupported token. Invalid ScriptHash for baton')\r\n\r\n            const sigHashType = Script.hashType.ALL | Script.hashType.SIGHASH_FORKID;\r\n            const flags = Script.flags.STANDARD_VERIFY_FLAGS;\r\n\r\n            // Sign TX\r\n            tx.template(keyring); // prepares the template\r\n            const sig = tx.signature(0, outScript, batonCoin.value, keyring.privateKey, sigHashType, flags);\r\n            const preimage = tx.getPreimage(0, outScript, batonCoin.value, sigHashType, false);\r\n            const items = [\r\n                sig,\r\n                keyring.getPublicKey(),\r\n                Buffer.from(preimage.toString('hex'), 'hex'),\r\n                authCodeBuf.slice(264),\r\n                authCodeBuf.slice(0, 264),\r\n                outScript.toRaw()\r\n            ];\r\n            tx.inputs[0].script.fromItems(items);\r\n\r\n            const rawTx = tx.toRaw()\r\n            const hex = rawTx.toString('hex')\r\n\r\n            // Verify\r\n            // console.log('checking index 0');\r\n            // const checkBaton = tx.checkInput(0, stampCoin);\r\n            // console.log('checking index 1');\r\n            // const checkStamp = tx.checkInput(1, batonCoin);\r\n            const verified = tx.verify(tx.view);\r\n            \r\n            console.log('verified', verified);\r\n            console.log('tx size', tx.getSize());\r\n            console.log('fee', tx.getFee());\r\n            console.log('tx hex', hex);\r\n\r\n            if (!verified)\r\n                throw new Error('Transaction verification failed');\r\n\r\n            if (returnRawTx)\r\n                return rawTx;\r\n        \r\n            // Broadcast transaction to the network\r\n            let broadcast = {success: true};\r\n            if (!testOnly) {\r\n                broadcast = await broadcastTx(hex);\r\n                if (broadcast.error)\r\n                    throw broadcast.error\r\n            }\r\n\r\n            const txidStr = tx.txid().toString('hex')\r\n\r\n            if (broadcast.success) {\r\n                console.log(`${currency.tokenTicker} txid`, txidStr);\r\n            }\r\n            let link;\r\n            if (process.env.REACT_APP_NETWORK === `mainnet`) {\r\n                link = `${currency.tokenExplorerUrl}/tx/${txidStr}`;\r\n            } else {\r\n                link = `${currency.blockExplorerUrlTestnet}/tx/${txidStr}`;\r\n            }\r\n            //console.log(`link`, link);\r\n\r\n            return link;\r\n        } catch (err) {\r\n            if (err.error === 'insufficient priority (code 66)') {\r\n                err.code = SEND_BCH_ERRORS.INSUFFICIENT_PRIORITY;\r\n            } else if (err.error === 'txn-mempool-conflict (code 18)') {\r\n                err.code = SEND_BCH_ERRORS.DOUBLE_SPENDING;\r\n            } else if (err.error === 'Network Error') {\r\n                err.code = SEND_BCH_ERRORS.NETWORK_ERROR;\r\n            } else if (\r\n                err.error ===\r\n                'too-long-mempool-chain, too many unconfirmed ancestors [limit: 25] (code 64)'\r\n            ) {\r\n                err.code = SEND_BCH_ERRORS.MAX_UNCONFIRMED_TXS;\r\n            }\r\n            console.log(`error: `, err);\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    const generateBurnTx = async (\r\n        wallet,\r\n        tokenId,\r\n        utxosToBurn = [],\r\n        batonOutput\r\n    ) => {\r\n\r\n        // If utxosToBurn are not provided, burn entire balance\r\n        if (utxosToBurn.length === 0) {\r\n            const slpBalancesAndUtxos = wallet.state.slpBalancesAndUtxos\r\n            const tokenUtxos = slpBalancesAndUtxos.slpUtxos.filter(\r\n                utxo => {\r\n                    if (\r\n                        utxo && // UTXO is associated with a token.\r\n                        utxo.slp.tokenId === tokenId && // UTXO matches the token ID.\r\n                        utxo.slp.type !== 'BATON' // UTXO is not a minting baton.\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                },\r\n            );\r\n\r\n            if (tokenUtxos.length === 0) {\r\n                throw new Error(\r\n                    'No token UTXOs for the specified token could be found.',\r\n                );\r\n            }\r\n\r\n            utxosToBurn.push(...tokenUtxos);\r\n        } else {\r\n            // Basic validity check on UTXOs supplied\r\n            const containsInvalidUtxos = utxosToBurn.some(\r\n                utxo => {\r\n                    if (\r\n                        !utxo?.slp || // UTXO isn't associated with a token.\r\n                        utxo.slp.tokenId != tokenId || // UTXO doesn't match the token ID.\r\n                        utxo.slp.type === 'BATON' // UTXO is a minting baton.\r\n                    ) { return true; }\r\n                    \r\n                    return false;\r\n                },\r\n            )\r\n\r\n            if (containsInvalidUtxos) {\r\n                throw new Error(\r\n                    'Invalid UTXOS provided for generateBurnTx.',\r\n                );\r\n            }\r\n        }\r\n\r\n        let burnQuantity = 0;\r\n        const coins = utxosToBurn.map(utxo => {\r\n            burnQuantity += parseInt(utxo.slp.value);\r\n            return Coin.fromJSON(utxo);\r\n        });\r\n\r\n        const tokenVersion = coins[0].slp.version\r\n        let tx = new TXUtil()// Build MINT OP_RETURN\r\n        const burnOpReturn = buildBurnOpReturn(\r\n            tokenId, \r\n            `${burnQuantity}`, \r\n            tokenVersion\r\n        );\r\n        // Add outputs\r\n        tx.addOutput(burnOpReturn, 0); // SLP burn OP_RETURN\r\n        // Add baton outpoint if included\r\n        if (batonOutput)\r\n            tx.addOutput(batonOutput);\r\n        for (let i = 0; i < coins.length; i++) {\r\n            tx.addCoin(coins[i]);\r\n        }\r\n        // Calculate if postage is needed\r\n        const estimatedTxSize = await tx.estimateSize();\r\n        const postageNeeded = estimatedTxSize > tx.getFee();\r\n\r\n        // Sign Tx\r\n        const keyRingArray = [\r\n            KeyRing.fromSecret(wallet.Path245.fundingWif),\r\n            KeyRing.fromSecret(wallet.Path145.fundingWif),\r\n            KeyRing.fromSecret(wallet.Path1899.fundingWif)\r\n        ];\r\n\r\n        // Set Sighash type\r\n        const hashTypes = Script.hashType;\r\n        const sighashType = postageNeeded\r\n            ? hashTypes.ALL | hashTypes.ANYONECANPAY | hashTypes.SIGHASH_FORKID\r\n            : hashTypes.ALL | hashTypes.SIGHASH_FORKID;\r\n\r\n        // Sign transaction\r\n        tx.sign(keyRingArray, sighashType);\r\n        const rawTx = tx.toRaw();\r\n        console.log('rawTx', rawTx.toString('hex'))\r\n\r\n        // Get postage if needed\r\n        if (postageNeeded) {\r\n            if (tokenVersion != 2) {\r\n                throw new Error(\r\n                    'Postage needed, but is only available for token type (version) 2.',\r\n                );\r\n            }\r\n\r\n            const refundScript = Script.fromPubkeyhash(keyRingArray[2].getKeyHash());\r\n\r\n            const paymentObj = {\r\n                merchantData: { returnRawTx: true },\r\n                transactions: [rawTx],\r\n                refundTo:[{\r\n                    script: refundScript.toRaw(),\r\n                    value: 0\r\n                }],\r\n                memo: ''\r\n            }\r\n\r\n            // Post transaction to the postage server. Response is unbroadcast tx\r\n            const paymentAck = await postPayment(\r\n                POSTAGE_URL,\r\n                paymentObj,\r\n                currency.tokenPrefixes[0]\r\n            );\r\n\r\n            if (paymentAck.payment) {\r\n                return paymentAck.payment.transactions[0];\r\n            } else {\r\n                throw new Error(\r\n                    'Error retreiving postage paid transaction.',\r\n                );\r\n            }\r\n\r\n        }\r\n\r\n        return rawTx;\r\n    }\r\n\r\n    return {\r\n        calcFee,\r\n        getPostage,\r\n        calculatePostage,\r\n        getUtxoBcash,\r\n        getUtxosBcash,\r\n        getSlpBalancesAndUtxosBcash,\r\n        getTxBcash,\r\n        getTxHistoryBcash,\r\n        getMintHistory,\r\n        parseTxData,\r\n        parseTokenInfoForTxHistory,\r\n        getBcashRestUrl,\r\n        signPkMessage,\r\n        sendXec,\r\n        sendToken,\r\n        sendBip70,\r\n        readAuthCode,\r\n        readAuthCodeV2,\r\n        sendSelfMint,\r\n        sendSelfMintV2,\r\n        getMintVaultAddress,\r\n        generateBurnTx,\r\n        createToken,\r\n    };\r\n}\r\n","import BigNumber from 'bignumber.js';\r\nimport { currency, isValidTokenPrefix } from '@components/Common/Ticker.js';\r\nimport { fromSmallestDenomination } from '@utils/cashMethods';\r\n\r\n// Validate cash amount\r\nexport const shouldRejectAmountInput = (\r\n    cashAmount,\r\n    selectedCurrency,\r\n    fiatPrice,\r\n    totalCashBalance,\r\n) => {\r\n    // Take cashAmount as input, a string from form input\r\n    let error = false;\r\n    let testedAmount = new BigNumber(cashAmount);\r\n\r\n    if (selectedCurrency !== currency.ticker) {\r\n        // Ensure no more than currency.cashDecimals decimal places\r\n        testedAmount = new BigNumber(fiatToCrypto(cashAmount, fiatPrice));\r\n    }\r\n\r\n    // Validate value for > 0\r\n    if (isNaN(testedAmount)) {\r\n        error = 'Amount must be a number';\r\n    } else if (testedAmount.lte(0)) {\r\n        error = 'Amount must be greater than 0';\r\n    } else if (\r\n        testedAmount.lt(fromSmallestDenomination(currency.dustSats).toString())\r\n    ) {\r\n        error = `Send amount must be at least ${fromSmallestDenomination(\r\n            currency.dustSats,\r\n        ).toString()} ${currency.ticker}`;\r\n    } else if (testedAmount.gt(totalCashBalance)) {\r\n        error = `Amount cannot exceed your ${currency.ticker} balance`;\r\n    } else if (!isNaN(testedAmount) && testedAmount.toString().includes('.')) {\r\n        if (\r\n            testedAmount.toString().split('.')[1].length > currency.cashDecimals\r\n        ) {\r\n            error = `${currency.ticker} transactions do not support more than ${currency.cashDecimals} decimal places`;\r\n        }\r\n    }\r\n    // return false if no error, or string error msg if error\r\n    return error;\r\n};\r\n\r\nexport const fiatToCrypto = (\r\n    fiatAmount,\r\n    fiatPrice,\r\n    cashDecimals = currency.cashDecimals,\r\n) => {\r\n    let cryptoAmount = new BigNumber(fiatAmount)\r\n        .div(new BigNumber(fiatPrice))\r\n        .toFixed(cashDecimals);\r\n    return cryptoAmount;\r\n};\r\n\r\nexport const isValidTokenName = tokenName => {\r\n    return (\r\n        typeof tokenName === 'string' &&\r\n        tokenName.length > 0 &&\r\n        tokenName.length < 68\r\n    );\r\n};\r\n\r\nexport const isValidTokenTicker = tokenTicker => {\r\n    return (\r\n        typeof tokenTicker === 'string' &&\r\n        tokenTicker.length > 0 &&\r\n        tokenTicker.length < 13\r\n    );\r\n};\r\n\r\nexport const isValidTokenDecimals = tokenDecimals => {\r\n    return ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].includes(\r\n        tokenDecimals,\r\n    );\r\n};\r\n\r\nexport const isValidTokenInitialQty = (tokenInitialQty, tokenDecimals) => {\r\n    const minimumQty = new BigNumber(1 / 10 ** tokenDecimals);\r\n    const tokenIntialQtyBig = new BigNumber(tokenInitialQty);\r\n    return (\r\n        tokenIntialQtyBig.gte(minimumQty) &&\r\n        tokenIntialQtyBig.lt(100000000000) &&\r\n        tokenIntialQtyBig.dp() <= tokenDecimals\r\n    );\r\n};\r\n\r\nexport const isValidTokenDocumentUrl = tokenDocumentUrl => {\r\n    return (\r\n        typeof tokenDocumentUrl === 'string' &&\r\n        tokenDocumentUrl.length >= 0 &&\r\n        tokenDocumentUrl.length < 68\r\n    );\r\n};\r\n\r\nexport const isValidTokenStats = tokenStats => {\r\n    return (\r\n        typeof tokenStats === 'object' &&\r\n        'timestampUnix' in tokenStats &&\r\n        'documentUri' in tokenStats &&\r\n        'containsBaton' in tokenStats &&\r\n        'initialTokenQty' in tokenStats &&\r\n        'totalMinted' in tokenStats &&\r\n        'totalBurned' in tokenStats &&\r\n        'circulatingSupply' in tokenStats\r\n    );\r\n};\r\n\r\nexport const isValidCashtabSettings = settings => {\r\n    try {\r\n        const isValid =\r\n            typeof settings === 'object' &&\r\n            Object.prototype.hasOwnProperty.call(settings, 'fiatCurrency') &&\r\n            currency.settingsValidation.fiatCurrency.includes(\r\n                settings.fiatCurrency,\r\n            );\r\n        return isValid;\r\n    } catch (err) {\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const formatSavedBalance = (swBalance, optionalLocale) => {\r\n    try {\r\n        if (swBalance === undefined) {\r\n            return 'N/A';\r\n        } else {\r\n            if (optionalLocale === undefined) {\r\n                return new Number(swBalance).toLocaleString({\r\n                    maximumFractionDigits: currency.cashDecimals,\r\n                });\r\n            } else {\r\n                return new Number(swBalance).toLocaleString(optionalLocale, {\r\n                    maximumFractionDigits: currency.cashDecimals,\r\n                });\r\n            }\r\n        }\r\n    } catch (err) {\r\n        return 'N/A';\r\n    }\r\n};\r\n\r\nexport const formatFiatBalance = (fiatBalance, optionalLocale) => {\r\n    try {\r\n        if (fiatBalance === 0) {\r\n            return Number(fiatBalance).toFixed(currency.cashDecimals);\r\n        }\r\n        if (optionalLocale === undefined) {\r\n            return fiatBalance.toLocaleString({\r\n                maximumFractionDigits: currency.cashDecimals,\r\n            });\r\n        }\r\n        return fiatBalance.toLocaleString(optionalLocale, {\r\n            maximumFractionDigits: currency.cashDecimals,\r\n        });\r\n    } catch (err) {\r\n        return fiatBalance;\r\n    }\r\n};\r\n\r\nexport const isValidSendToMany = (addressInfo, valueString, ticker) => {\r\n    let isValidInput = true;\r\n\r\n    try {\r\n        if (addressInfo === null || addressInfo === undefined) {\r\n            return 'invalid address input';\r\n        } else if (valueString === null || valueString === undefined) {\r\n            return 'invalid value input';\r\n        } else if (ticker === null || ticker === undefined) {\r\n            return 'invalid ticker input';\r\n        }\r\n\r\n        const { address, isValid, queryString, amount } = addressInfo;\r\n\r\n        // Is this valid address?\r\n        if (!isValid) {\r\n            isValidInput = `Invalid ${ticker} address`;\r\n            // If valid address but token format\r\n            if (isValidTokenPrefix(address)) {\r\n                isValidInput = `Token addresses are not supported for ${ticker} sends`;\r\n            }\r\n            // Is this send value above minimum\r\n        } else if (valueString < 5.5) {\r\n            // value can only be XEC ticker in multi recipient mode\r\n            isValidInput = `Send amount must be at least 5.5 XEC`;\r\n        }\r\n        return isValidInput;\r\n    } catch (err) {\r\n        return err;\r\n    }\r\n};\r\n","import localforage from \"localforage\";\r\n\r\n\r\nexport const writeMempoolMint = async (mempoolMint) => {\r\n    try {\r\n        const key = `externalMints-${mempoolMint.minter_pubkey}`;\r\n        const mempoolMints = await localforage.getItem(key) || [];\r\n        mempoolMints.push(mempoolMint);\r\n\r\n        await localforage.setItem(key, mempoolMints);\r\n        console.log(\"added item to storage\", key, mempoolMints);\r\n    } catch (err) {\r\n        console.log(`Error in writeMempoolMint()`);\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport const getMempoolMints = async (minterPublicKey) => {\r\n    try {\r\n        const key = `externalMints-${minterPublicKey}`;\r\n        const mempoolMints = await localforage.getItem(key);\r\n\r\n        return mempoolMints || [];\r\n    } catch(err) {\r\n        console.log(`Error in getMempoolMints()`);\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport const updateMempoolMints = async (minterPublicKey, unconfirmedMints) => {\r\n    try {\r\n        const key = `externalMints-${minterPublicKey}`;\r\n        if (unconfirmedMints.length === 0) {\r\n            await localforage.removeItem(key);\r\n            console.log(\"removed item with key\", key);\r\n        } else {\r\n            await localforage.setItem(key, unconfirmedMints);\r\n            console.log(\"updated item with key\", key, unconfirmedMints);\r\n        }\r\n    } catch(err) {\r\n        console.log(`Error in updateMempoolMints()`);\r\n        console.log(err);\r\n    }\r\n}\r\n","import { currency } from '@components/Common/Ticker';\r\nimport BigNumber from 'bignumber.js';\r\nimport cashaddr from 'ecashaddrjs';\r\n\r\nexport const fromLegacyDecimals = (\r\n    amount,\r\n    cashDecimals = currency.cashDecimals,\r\n) => {\r\n    // Input 0.00000546 BCH\r\n    // Output 5.46 XEC or 0.00000546 BCH, depending on currency.cashDecimals\r\n    const amountBig = new BigNumber(amount);\r\n    const conversionFactor = new BigNumber(10 ** (8 - cashDecimals));\r\n    const amountSmallestDenomination = amountBig\r\n        .times(conversionFactor)\r\n        .toNumber();\r\n    return amountSmallestDenomination;\r\n};\r\n\r\nexport const fromSmallestDenomination = (\r\n    amount,\r\n    cashDecimals = currency.cashDecimals,\r\n) => {\r\n    const amountBig = new BigNumber(amount);\r\n    const multiplier = new BigNumber(10 ** (-1 * cashDecimals));\r\n    const amountInBaseUnits = amountBig.times(multiplier);\r\n    return amountInBaseUnits.toNumber();\r\n};\r\n\r\nexport const toSmallestDenomination = (\r\n    sendAmount,\r\n    cashDecimals = currency.cashDecimals,\r\n) => {\r\n    // Replace the BCH.toSatoshi method with an equivalent function that works for arbitrary decimal places\r\n    // Example, for an 8 decimal place currency like Bitcoin\r\n    // Input: a BigNumber of the amount of Bitcoin to be sent\r\n    // Output: a BigNumber of the amount of satoshis to be sent, or false if input is invalid\r\n\r\n    // Validate\r\n    // Input should be a BigNumber with no more decimal places than cashDecimals\r\n    const isValidSendAmount =\r\n        BigNumber.isBigNumber(sendAmount) && sendAmount.dp() <= cashDecimals;\r\n    if (!isValidSendAmount) {\r\n        return false;\r\n    }\r\n    const conversionFactor = new BigNumber(10 ** cashDecimals);\r\n    const sendAmountSmallestDenomination = sendAmount.times(conversionFactor);\r\n    return sendAmountSmallestDenomination;\r\n};\r\n\r\nexport const formatBalance = (unformattedBalance, optionalLocale) => {\r\n    try {\r\n        if (optionalLocale === undefined) {\r\n            return new Number(unformattedBalance).toLocaleString({\r\n                maximumFractionDigits: currency.cashDecimals,\r\n            });\r\n        }\r\n        return new Number(unformattedBalance).toLocaleString(optionalLocale, {\r\n            maximumFractionDigits: currency.cashDecimals,\r\n        });\r\n    } catch (err) {\r\n        console.log(`Error in formatBalance for ${unformattedBalance}`);\r\n        console.log(err);\r\n        return unformattedBalance;\r\n    }\r\n};\r\n\r\nexport const batchArray = (inputArray, batchSize) => {\r\n    // take an array of n elements, return an array of arrays each of length batchSize\r\n\r\n    const batchedArray = [];\r\n    for (let i = 0; i < inputArray.length; i += batchSize) {\r\n        const tempArray = inputArray.slice(i, i + batchSize);\r\n        batchedArray.push(tempArray);\r\n    }\r\n    return batchedArray;\r\n};\r\n\r\nexport const flattenBatchedHydratedUtxos = batchedHydratedUtxoDetails => {\r\n    // Return same result as if only the bulk API call were made\r\n    // to do this, just need to move all utxos under one slpUtxos\r\n    /*\r\n    given \r\n    [\r\n      {\r\n        slpUtxos: [\r\n            {\r\n                utxos: [],\r\n                address: '',\r\n            }\r\n          ],\r\n      },\r\n      {\r\n        slpUtxos: [\r\n            {\r\n                utxos: [],\r\n                address: '',\r\n            }\r\n          ],\r\n      }\r\n    ]\r\n  return [\r\n    {\r\n        slpUtxos: [\r\n            {\r\n            utxos: [],\r\n            address: ''\r\n            },\r\n            {\r\n            utxos: [],\r\n            address: ''\r\n            },\r\n          ]\r\n        }\r\n  */\r\n    const flattenedBatchedHydratedUtxos = { slpUtxos: [] };\r\n    for (let i = 0; i < batchedHydratedUtxoDetails.length; i += 1) {\r\n        const theseSlpUtxos = batchedHydratedUtxoDetails[i].slpUtxos[0];\r\n        flattenedBatchedHydratedUtxos.slpUtxos.push(theseSlpUtxos);\r\n    }\r\n    return flattenedBatchedHydratedUtxos;\r\n};\r\n\r\nexport const loadStoredWallet = walletStateFromStorage => {\r\n    // Accept cached tokens array that does not save BigNumber type of BigNumbers\r\n    // Return array with BigNumbers converted\r\n    // See BigNumber.js api for how to create a BigNumber object from an object\r\n    // https://mikemcl.github.io/bignumber.js/\r\n    const liveWalletState = walletStateFromStorage;\r\n    const { slpBalancesAndUtxos, tokens } = liveWalletState;\r\n    for (let i = 0; i < tokens.length; i += 1) {\r\n        const thisTokenBalance = tokens[i].balance;\r\n        // Ensure only add property if thisTokenBalance is an object\r\n        if (\r\n            typeof thisTokenBalance === 'object' &&\r\n            !Array.isArray(thisTokenBalance) &&\r\n            thisTokenBalance !== null\r\n        ) {\r\n            thisTokenBalance._isBigNumber = true;\r\n        }\r\n        tokens[i].balance = new BigNumber(thisTokenBalance);\r\n    }\r\n\r\n    // Also confirm balance is correct\r\n    // Necessary step in case currency.decimals changed since last startup\r\n    const balancesRebased = normalizeBalance(slpBalancesAndUtxos);\r\n    liveWalletState.balances = balancesRebased;\r\n    return liveWalletState;\r\n};\r\n\r\nexport const normalizeBalance = slpBalancesAndUtxos => {\r\n    const totalBalanceInSatoshis = slpBalancesAndUtxos.nonSlpUtxos.reduce(\r\n        (previousBalance, utxo) => previousBalance + utxo.value,\r\n        0,\r\n    );\r\n    return {\r\n        totalBalanceInSatoshis,\r\n        totalBalance: fromSmallestDenomination(totalBalanceInSatoshis),\r\n    };\r\n};\r\n\r\nexport const isValidStoredWallet = walletStateFromStorage => {\r\n    return (\r\n        typeof walletStateFromStorage === 'object' &&\r\n        'state' in walletStateFromStorage &&\r\n        typeof walletStateFromStorage.state === 'object' &&\r\n        'balances' in walletStateFromStorage.state &&\r\n        'utxos' in walletStateFromStorage.state &&\r\n        'slpBalancesAndUtxos' in walletStateFromStorage.state &&\r\n        'tokens' in walletStateFromStorage.state\r\n    );\r\n};\r\n\r\nexport const getWalletState = wallet => {\r\n    if (!wallet || !wallet.state) {\r\n        return {\r\n            balances: { totalBalance: 0, totalBalanceInSatoshis: 0 },\r\n            hydratedUtxoDetails: {},\r\n            tokens: [],\r\n            slpBalancesAndUtxos: {},\r\n            parsedTxHistory: [],\r\n            utxos: [],\r\n        };\r\n    }\r\n\r\n    return wallet.state;\r\n};\r\n\r\nexport function convertToEcashPrefix(bitcoincashPrefixedAddress) {\r\n    // Prefix-less addresses may be valid, but the cashaddr.decode function used below\r\n    // will throw an error without a prefix. Hence, must ensure prefix to use that function.\r\n    const hasPrefix = bitcoincashPrefixedAddress.includes(':');\r\n    if (hasPrefix) {\r\n        // Is it bitcoincash: or simpleledger:\r\n        const { type, hash, prefix } = cashaddr.decode(\r\n            bitcoincashPrefixedAddress,\r\n        );\r\n\r\n        let newPrefix;\r\n        if (prefix === 'bitcoincash') {\r\n            newPrefix = 'ecash';\r\n        } else if (prefix === 'simpleledger') {\r\n            newPrefix = 'etoken';\r\n        } else {\r\n            return bitcoincashPrefixedAddress;\r\n        }\r\n\r\n        const convertedAddress = cashaddr.encode(newPrefix, type, hash);\r\n\r\n        return convertedAddress;\r\n    } else {\r\n        return bitcoincashPrefixedAddress;\r\n    }\r\n}\r\n\r\nexport function convertEtokenToSimpleledger(etokenPrefixedAddress) {\r\n    // Prefix-less addresses may be valid, but the cashaddr.decode function used below\r\n    // will throw an error without a prefix. Hence, must ensure prefix to use that function.\r\n    const hasPrefix = etokenPrefixedAddress.includes(':');\r\n    if (hasPrefix) {\r\n        // Is it bitcoincash: or simpleledger:\r\n        const { type, hash, prefix } = cashaddr.decode(etokenPrefixedAddress);\r\n\r\n        let newPrefix;\r\n        if (prefix === 'etoken') {\r\n            newPrefix = 'simpleledger';\r\n        } else {\r\n            // return address with no change\r\n\r\n            return etokenPrefixedAddress;\r\n        }\r\n\r\n        const convertedAddress = cashaddr.encode(newPrefix, type, hash);\r\n\r\n        return convertedAddress;\r\n    } else {\r\n        // return address with no change\r\n        return etokenPrefixedAddress;\r\n    }\r\n}\r\n\r\nexport const confirmNonEtokenUtxos = (hydratedUtxos, nonEtokenUtxos) => {\r\n    // scan through hydratedUtxoDetails\r\n    for (let i = 0; i < hydratedUtxos.length; i += 1) {\r\n        // Find utxos with txids matching nonEtokenUtxos\r\n        if (nonEtokenUtxos.includes(hydratedUtxos[i].txid)) {\r\n            // Confirm that such utxos are not eToken utxos\r\n            hydratedUtxos[i].isValid = false;\r\n        }\r\n    }\r\n    return hydratedUtxos;\r\n};\r\n\r\nexport const checkNullUtxosForTokenStatus = txDataResults => {\r\n    const nonEtokenUtxos = [];\r\n    for (let j = 0; j < txDataResults.length; j += 1) {\r\n        const thisUtxoTxid = txDataResults[j].txid;\r\n        const thisUtxoVout = txDataResults[j].details.vout;\r\n        // Iterate over outputs\r\n        for (let k = 0; k < thisUtxoVout.length; k += 1) {\r\n            const thisOutput = thisUtxoVout[k];\r\n            if (thisOutput.scriptPubKey.type === 'nulldata') {\r\n                const asmOutput = thisOutput.scriptPubKey.asm;\r\n                if (asmOutput.includes('OP_RETURN 5262419')) {\r\n                    // then it's an eToken tx that has not been properly validated\r\n                    // Do not include it in nonEtokenUtxos\r\n                    // App will ignore it until SLPDB is able to validate it\r\n                    console.log(\r\n                        `utxo ${thisUtxoTxid} requires further eToken validation, ignoring`,\r\n                    );\r\n                } else {\r\n                    // Otherwise it's just an OP_RETURN tx that SLPDB has some issue with\r\n                    // It should still be in the user's utxo set\r\n                    // Include it in nonEtokenUtxos\r\n                    console.log(\r\n                        `utxo ${thisUtxoTxid} is not an eToken tx, adding to nonSlpUtxos`,\r\n                    );\r\n                    nonEtokenUtxos.push(thisUtxoTxid);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return nonEtokenUtxos;\r\n};\r\n\r\nexport const isLegacyMigrationRequired = wallet => {\r\n    // If the wallet does not have Path1899,\r\n    // Or each Path1899, Path145, Path245 does not have a public key\r\n    // Or it is using bitcoincash prefix\r\n    // Then it requires migration\r\n    if (\r\n        !wallet.Path1899 ||\r\n        !wallet.Path1899.publicKey ||\r\n        !wallet.Path145.publicKey ||\r\n        !wallet.Path245.publicKey ||\r\n        wallet.Path1899.cashAddress.split(':')[0] === 'bitcoincash'\r\n    ) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n};\r\n","import * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport {\r\n    CopyOutlined,\r\n    DollarOutlined,\r\n    LoadingOutlined,\r\n    WalletOutlined,\r\n    QrcodeOutlined,\r\n    SettingOutlined,\r\n    LockOutlined,\r\n} from '@ant-design/icons';\r\nimport { Image } from 'antd';\r\nimport { currency } from '@components/Common/Ticker';\r\n\r\nexport const CashLoadingIcon = <LoadingOutlined className=\"cashLoadingIcon\" />;\r\n\r\nexport const CashReceivedNotificationIcon = () => (\r\n    <Image height={'33px'} width={'30px'} src={currency.logo} preview={false} />\r\n);\r\nexport const TokenReceivedNotificationIcon = () => (\r\n    <Image\r\n        src={currency.tokenLogo}\r\n        height={'33px'}\r\n        width={'30px'}\r\n        preview={false}\r\n    />\r\n);\r\n\r\nexport const MessageSignedNotificationIcon = () => (\r\n    <Image\r\n        src={currency.tokenLogo}\r\n        height={'33px'}\r\n        width={'30px'}\r\n        preview={false}\r\n    />\r\n);\r\nexport const ThemedCopyOutlined = styled(CopyOutlined)`\r\n    color: ${props => props.theme.icons.outlined} !important;\r\n`;\r\nexport const ThemedDollarOutlined = styled(DollarOutlined)`\r\n    color: ${props => props.theme.icons.outlined} !important;\r\n`;\r\nexport const ThemedWalletOutlined = styled(WalletOutlined)`\r\n    color: ${props => props.theme.icons.outlined} !important;\r\n`;\r\nexport const ThemedQrcodeOutlined = styled(QrcodeOutlined)`\r\n    color: ${props => props.theme.icons.outlined} !important;\r\n`;\r\nexport const ThemedSettingOutlined = styled(SettingOutlined)`\r\n    color: ${props => props.theme.icons.outlined} !important;\r\n`;\r\nexport const ThemedLockOutlined = styled(LockOutlined)`\r\n    color: ${props => props.theme.icons.outlined} !important;\r\n`;\r\n\r\nexport const LoadingBlock = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 24px;\r\n    flex-direction: column;\r\n    svg {\r\n        width: 50px;\r\n        height: 50px;\r\n        fill: ${props => props.theme.primary};\r\n    }\r\n`;\r\n\r\nexport const CashLoader = () => (\r\n    <LoadingBlock>\r\n        <LoadingOutlined />\r\n    </LoadingBlock>\r\n);\r\n","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgFingerprintSolid(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    \"data-prefix\": \"fas\",\n    \"data-icon\": \"fingerprint\",\n    className: \"svg-inline--fa fa-fingerprint fa-w-16\",\n    role: \"img\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 512 512\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M256.12 245.96c-13.25 0-24 10.74-24 24 1.14 72.25-8.14 141.9-27.7 211.55-2.73 9.72 2.15 30.49 23.12 30.49 10.48 0 20.11-6.92 23.09-17.52 13.53-47.91 31.04-125.41 29.48-224.52.01-13.25-10.73-24-23.99-24zm-.86-81.73C194 164.16 151.25 211.3 152.1 265.32c.75 47.94-3.75 95.91-13.37 142.55-2.69 12.98 5.67 25.69 18.64 28.36 13.05 2.67 25.67-5.66 28.36-18.64 10.34-50.09 15.17-101.58 14.37-153.02-.41-25.95 19.92-52.49 54.45-52.34 31.31.47 57.15 25.34 57.62 55.47.77 48.05-2.81 96.33-10.61 143.55-2.17 13.06 6.69 25.42 19.76 27.58 19.97 3.33 26.81-15.1 27.58-19.77 8.28-50.03 12.06-101.21 11.27-152.11-.88-55.8-47.94-101.88-104.91-102.72zm-110.69-19.78c-10.3-8.34-25.37-6.8-33.76 3.48-25.62 31.5-39.39 71.28-38.75 112 .59 37.58-2.47 75.27-9.11 112.05-2.34 13.05 6.31 25.53 19.36 27.89 20.11 3.5 27.07-14.81 27.89-19.36 7.19-39.84 10.5-80.66 9.86-121.33-.47-29.88 9.2-57.88 28-80.97 8.35-10.28 6.79-25.39-3.49-33.76zm109.47-62.33c-15.41-.41-30.87 1.44-45.78 4.97-12.89 3.06-20.87 15.98-17.83 28.89 3.06 12.89 16 20.83 28.89 17.83 11.05-2.61 22.47-3.77 34-3.69 75.43 1.13 137.73 61.5 138.88 134.58.59 37.88-1.28 76.11-5.58 113.63-1.5 13.17 7.95 25.08 21.11 26.58 16.72 1.95 25.51-11.88 26.58-21.11a929.06 929.06 0 0 0 5.89-119.85c-1.56-98.75-85.07-180.33-186.16-181.83zm252.07 121.45c-2.86-12.92-15.51-21.2-28.61-18.27-12.94 2.86-21.12 15.66-18.26 28.61 4.71 21.41 4.91 37.41 4.7 61.6-.11 13.27 10.55 24.09 23.8 24.2h.2c13.17 0 23.89-10.61 24-23.8.18-22.18.4-44.11-5.83-72.34zm-40.12-90.72C417.29 43.46 337.6 1.29 252.81.02 183.02-.82 118.47 24.91 70.46 72.94 24.09 119.37-.9 181.04.14 246.65l-.12 21.47c-.39 13.25 10.03 24.31 23.28 24.69.23.02.48.02.72.02 12.92 0 23.59-10.3 23.97-23.3l.16-23.64c-.83-52.5 19.16-101.86 56.28-139 38.76-38.8 91.34-59.67 147.68-58.86 69.45 1.03 134.73 35.56 174.62 92.39 7.61 10.86 22.56 13.45 33.42 5.86 10.84-7.62 13.46-22.59 5.84-33.43z\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgFingerprintSolid);\nexport default __webpack_public_path__ + \"static/media/fingerprint-solid.57912508.svg\";\nexport { ForwardRef as ReactComponent };","export const theme = {\r\n    primary: '#00ABE7',\r\n    brandSecondary: '#CD0BC3',\r\n    contrast: '#fff',\r\n    app: {\r\n        sidebars: `url(\"/cashtab_bg.png\")`,\r\n        background: '#fbfbfd',\r\n    },\r\n    wallet: {\r\n        background: '#fff',\r\n        text: {\r\n            primary: '#273498',\r\n            secondary: '#273498',\r\n        },\r\n        switch: {\r\n            activeCash: {\r\n                shadow: 'inset 8px 8px 16px #0074C2, inset -8px -8px 16px #273498',\r\n            },\r\n            activeToken: {\r\n                background: '#CD0BC3',\r\n                shadow: 'inset 5px 5px 11px #FF21D0, inset -5px -5px 11px #CD0BC3',\r\n            },\r\n            inactive: {\r\n                background: 'linear-gradient(145deg, #eeeeee, #c8c8c8)',\r\n            },\r\n        },\r\n        borders: { color: '#e2e2e2' },\r\n        shadow: 'rgba(0, 0, 0, 1)',\r\n    },\r\n    tokenListItem: {\r\n        background: '#ffffff',\r\n        color: '',\r\n        boxShadow:\r\n            'rgb(136 172 243 / 25%) 0px 10px 30px,rgb(0 0 0 / 3%) 0px 1px 1px, rgb(0 51 167 / 10%) 0px 10px 20px',\r\n        border: '#e9eaed',\r\n        hoverBorder: '#231F20',\r\n    },\r\n    footer: {\r\n        background: '#fff',\r\n        navIconInactive: '#949494',\r\n    },\r\n    forms: {\r\n        error: '#FF21D0',\r\n        border: '#e7edf3',\r\n        text: '#000',\r\n        addonBackground: '#f4f4f4',\r\n        addonForeground: '#3e3f42',\r\n        selectionBackground: '#fff',\r\n    },\r\n    icons: { outlined: '#273498' },\r\n    modals: {\r\n        buttons: { background: '#fff' },\r\n    },\r\n    settings: { delete: '#CD0BC3' },\r\n    qr: {\r\n        copyBorderCash: '#00ABE7',\r\n        copyBorderToken: '#FF21D0',\r\n        background: '#fff',\r\n        token: '#231F20',\r\n        shadow: 'rgb(136 172 243 / 25%) 0px 10px 30px, rgb(0 0 0 / 3%) 0px 1px 1px, rgb(0 51 167 / 10%) 0px 10px 20px',\r\n    },\r\n    buttons: {\r\n        primary: {\r\n            backgroundImage:\r\n                'linear-gradient(270deg, #0074C2 0%, #273498 100%)',\r\n            color: '#fff',\r\n            hoverShadow: '0px 3px 10px -5px rgba(0, 0, 0, 0.75)',\r\n            disabledOverlay: 'rgba(255, 255, 255, 0.5)',\r\n        },\r\n        secondary: {\r\n            background: '#e9eaed',\r\n            color: '#444',\r\n            hoverShadow: '0px 3px 10px -5px rgba(0, 0, 0, 0.75)',\r\n            disabledOverlay: 'rgba(255, 255, 255, 0.5)',\r\n        },\r\n    },\r\n    collapses: {\r\n        background: '#fbfcfd',\r\n        border: '#eaedf3',\r\n        color: '#3e3f42',\r\n    },\r\n    generalSettings: {\r\n        item: {\r\n            icon: '#949494',\r\n            title: '#949494',\r\n        },\r\n        background: '#fff',\r\n    },\r\n};\r\n","export default __webpack_public_path__ + \"static/media/cashtab_xec.eb6d1077.png\";","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst WalletName = styled.h4`\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    display: inline-block;\r\n    color: #8a8a8a;\r\n    margin-bottom: 0px;\r\n    @media (max-width: 400px) {\r\n        font-size: 16px;\r\n    }\r\n`;\r\n\r\nconst WalletLabel = ({ name }) => {\r\n    return (\r\n        <>\r\n            {name && typeof name === 'string' && (\r\n                <WalletName>{name}</WalletName>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nWalletLabel.propTypes = {\r\n    name: PropTypes.string,\r\n};\r\n\r\nexport default WalletLabel;\r\n","export default __webpack_public_path__ + \"static/media/tabcash.eeaaa8fd.png\";","export default __webpack_public_path__ + \"static/media/logo_topright.fa22e205.png\";","import React, { useContext } from 'react';\r\nimport { Modal } from 'antd';\r\nimport styled from 'styled-components';\r\nimport { AuthenticationContext } from '@utils/context';\r\nimport { ThemedLockOutlined } from '@components/Common/CustomIcons';\r\nimport PrimaryButton, {\r\n    SecondaryButton,\r\n} from '@components/Common/PrimaryButton';\r\n\r\nconst StyledSignUp = styled.div`\r\n    h2 {\r\n        color: ${props => props.theme.wallet.text.primary};\r\n        font-size: 25px;\r\n    }\r\n    p {\r\n        color: ${props => props.theme.wallet.text.secondary};\r\n    }\r\n`;\r\n\r\nconst SignUp = () => {\r\n    const authentication = useContext(AuthenticationContext);\r\n\r\n    const handleSignUp = async () => {\r\n        try {\r\n            await authentication.signUp();\r\n        } catch (err) {\r\n            Modal.error({\r\n                title: 'Registration Error',\r\n                content: 'Cannot create Credential on your device',\r\n                centered: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    let signUpBody;\r\n    if (authentication) {\r\n        signUpBody = (\r\n            <div>\r\n                <p>Enable wallet lock to protect your funds.</p>\r\n                <p>\r\n                    You will need to unlock with your{' '}\r\n                    <strong>fingerprint / device pin</strong> in order to access\r\n                    the wallet.\r\n                </p>\r\n                <p>\r\n                    This lock can also be enabled / disabled under\r\n                    <br />\r\n                    <strong>Settings / General Settings / App Lock</strong>\r\n                </p>\r\n                <PrimaryButton onClick={handleSignUp}>\r\n                    Enable Lock\r\n                </PrimaryButton>\r\n                <SecondaryButton\r\n                    onClick={() => authentication.turnOffAuthentication()}\r\n                >\r\n                    Skip\r\n                </SecondaryButton>\r\n            </div>\r\n        );\r\n    } else {\r\n        signUpBody = <p>Authentication is not supported</p>;\r\n    }\r\n\r\n    return (\r\n        <StyledSignUp>\r\n            <h2>\r\n                <ThemedLockOutlined /> Wallet Lock\r\n            </h2>\r\n            {signUpBody}\r\n        </StyledSignUp>\r\n    );\r\n};\r\n\r\nexport default SignUp;\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { Modal, Spin } from 'antd';\r\nimport styled from 'styled-components';\r\nimport { AuthenticationContext } from '@utils/context';\r\nimport { ThemedLockOutlined } from '@components/Common/CustomIcons';\r\nimport PrimaryButton from '@components/Common/PrimaryButton';\r\nimport { ReactComponent as FingerprintSVG } from '@assets/fingerprint-solid.svg';\r\n\r\nconst StyledSignIn = styled.div`\r\n    h2 {\r\n        color: ${props => props.theme.wallet.text.primary};\r\n        font-size: 25px;\r\n    }\r\n    p {\r\n        color: ${props => props.theme.wallet.text.secondary};\r\n    }\r\n`;\r\n\r\nconst UnlockButton = styled(PrimaryButton)`\r\n    position: relative;\r\n    width: auto;\r\n    margin: 30px auto;\r\n    padding: 20px 30px;\r\n\r\n    svg {\r\n        fill: ${props => props.theme.buttons.primary.color};\r\n    }\r\n\r\n    @media (max-width: 768px) {\r\n        font-size: 16px;\r\n        padding: 15px 20px;\r\n    }\r\n\r\n    :disabled {\r\n        cursor: not-allowed;\r\n        box-shadow: none;\r\n        ::after {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: ${props => props.theme.buttons.primary.disabledOverlay};\r\n            z-index: 10;\r\n        }\r\n    }\r\n`;\r\n\r\nconst StyledFingerprintIcon = styled.div`\r\n    width: 48px;\r\n    height: 48px;\r\n    margin: auto;\r\n`;\r\n\r\nconst SignIn = () => {\r\n    const authentication = useContext(AuthenticationContext);\r\n    const [isVisible, setIsVisible] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const handleDocVisibilityChange = () => {\r\n        document.visibilityState === 'visible'\r\n            ? setIsVisible(true)\r\n            : setIsVisible(false);\r\n    };\r\n\r\n    const handleSignIn = async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            await authentication.signIn();\r\n        } catch (err) {\r\n            Modal.error({\r\n                title: 'Authentication Error',\r\n                content: 'Cannot get Credential from your device',\r\n                centered: true,\r\n            });\r\n        }\r\n        setIsLoading(false);\r\n    };\r\n\r\n    const handleSignInAndSuppressError = async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            await authentication.signIn();\r\n        } catch (err) {\r\n            // fail silently\r\n        }\r\n        setIsLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (document.visibilityState === 'visible') {\r\n            setIsVisible(true);\r\n        }\r\n        document.addEventListener(\r\n            'visibilitychange',\r\n            handleDocVisibilityChange,\r\n        );\r\n\r\n        return () => {\r\n            document.removeEventListener(\r\n                'visibilitychange',\r\n                handleDocVisibilityChange,\r\n            );\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // This will trigger the plaform authenticator as soon as the component becomes visible\r\n        // (when switch back to this app), without any user gesture (such as clicking a button)\r\n        // In platforms that require user gesture in order to invoke the platform authenticator,\r\n        // this will fail. We want it to fail silently, and then show user a button to activate\r\n        // the platform authenticator\r\n        if (isVisible && authentication) {\r\n            handleSignInAndSuppressError();\r\n        }\r\n    }, [isVisible]);\r\n\r\n    let signInBody;\r\n    if (authentication) {\r\n        signInBody = (\r\n            <>\r\n                <p>\r\n                    This wallet can be unlocked with your{' '}\r\n                    <strong>fingerprint / device pin</strong>\r\n                </p>\r\n                <UnlockButton\r\n                    onClick={handleSignIn}\r\n                    disabled={isLoading ? true : false}\r\n                >\r\n                    <StyledFingerprintIcon>\r\n                        <FingerprintSVG />\r\n                    </StyledFingerprintIcon>\r\n                    Unlock\r\n                </UnlockButton>\r\n                <div>\r\n                    {isLoading ? <Spin tip=\"loading authenticator\" /> : ''}\r\n                </div>\r\n            </>\r\n        );\r\n    } else {\r\n        signInBody = <p>Authentication is not supported</p>;\r\n    }\r\n\r\n    return (\r\n        <StyledSignIn>\r\n            <h2>\r\n                <ThemedLockOutlined /> Wallet Unlock\r\n            </h2>\r\n            {signInBody}\r\n        </StyledSignIn>\r\n    );\r\n};\r\n\r\nexport default SignIn;\r\n","import React, { useContext } from 'react';\r\nimport { AuthenticationContext } from '@utils/context';\r\nimport SignUp from './SignUp';\r\nimport SignIn from './SignIn';\r\n\r\nconst ProtectableComponentWrapper = ({ children }) => {\r\n    const authentication = useContext(AuthenticationContext);\r\n\r\n    if (authentication) {\r\n        const { loading, isAuthenticationRequired, isSignedIn } =\r\n            authentication;\r\n\r\n        if (loading) {\r\n            return <p>Loading authentication data...</p>;\r\n        }\r\n\r\n        // prompt if user would like to enable biometric lock when the app first run\r\n        if (isAuthenticationRequired === undefined) {\r\n            // Skip authentication screen if new wallet pointed at URI\r\n            const params = (new URL(window.location)).searchParams;\r\n            if (!params.get('uri')) {\r\n                return <SignUp />;\r\n            }\r\n        }\r\n\r\n        // prompt user to sign in\r\n        if (isAuthenticationRequired && !isSignedIn) {\r\n            return <SignIn />;\r\n        }\r\n    }\r\n\r\n    // authentication = null  => authentication is not supported\r\n    return <>{children}</>;\r\n};\r\n\r\nexport default ProtectableComponentWrapper;\r\n","import React, { useState, Suspense, lazy } from 'react';\r\nimport 'antd/dist/antd.less';\r\nimport { Spin } from 'antd';\r\nimport { CashLoadingIcon, LoadingBlock } from '@components/Common/CustomIcons';\r\nimport '../index.css';\r\nimport styled, { ThemeProvider, createGlobalStyle } from 'styled-components';\r\nimport { theme } from '@assets/styles/theme';\r\nimport {\r\n    FolderOpenFilled,\r\n    CaretRightOutlined,\r\n    SettingFilled,\r\n    AppstoreAddOutlined,\r\n} from '@ant-design/icons';\r\n// import Wallet from '@components/Wallet/Wallet';\r\nconst Wallet = lazy(() => import('./Wallet/Wallet'));\r\n// import Tokens from '@components/Tokens/Tokens';\r\nconst Tokens = lazy(() => import('./Tokens/Tokens'));\r\n// import Send from '@components/Send/Send';\r\nconst Send = lazy(() => import('./Send/Send'));\r\n// import SendToken from '@components/Send/SendToken';\r\nconst SendToken = lazy(() => import('./Send/SendToken'));\r\n// import Checkout from '@components/Send/Checkout';\r\nconst Checkout = lazy(() => import('./Send/Checkout'));\r\n// import SendBip70 from '@components/Send/SendBip70';\r\nconst SendBip70 = lazy(() => import('./Send/SendBip70'));\r\n// import Configure from '@components/Configure/Configure';\r\nconst Configure = lazy(() => import('./Configure/Configure'));\r\n// import SelfMint from './Send/SelfMint';\r\nconst SelfMint = lazy(() => import('./Send/SelfMint'));\r\n// import NotFound from '@components/NotFound';\r\nconst NotFound = lazy(() => import('./NotFound'));\r\nimport CashTab from '@assets/cashtab_xec.png';\r\nimport './App.css';\r\nimport { WalletContext } from '@utils/context';\r\nimport { isValidStoredWallet } from '@utils/cashMethods';\r\nimport WalletLabel from '@components/Common/WalletLabel.js';\r\nimport {\r\n    Route,\r\n    Redirect,\r\n    Switch,\r\n    useLocation,\r\n    useHistory,\r\n} from 'react-router-dom';\r\n// Easter egg imports not used in extension/src/components/App.js\r\nimport TabCash from '@assets/tabcash.png';\r\nimport ABC from '@assets/logo_topright.png';\r\nimport { checkForTokenById } from '@utils/tokenMethods.js';\r\n// Biometric security import not used in extension/src/components/App.js\r\nimport ProtectableComponentWrapper from './Authentication/ProtectableComponentWrapper';\r\n\r\nconst GlobalStyle = createGlobalStyle`    \r\n    .ant-modal-wrap > div > div.ant-modal-content > div > div > div.ant-modal-confirm-btns > button, .ant-modal > button, .ant-modal-confirm-btns > button, .ant-modal-footer > button, #cropControlsConfirm {\r\n        border-radius: 8px;\r\n        background-color: ${props => props.theme.modals.buttons.background};\r\n        color: ${props => props.theme.wallet.text.secondary};\r\n        font-weight: bold;\r\n    }    \r\n    \r\n    .ant-modal-wrap > div > div.ant-modal-content > div > div > div.ant-modal-confirm-btns > button:hover,.ant-modal-confirm-btns > button:hover, .ant-modal-footer > button:hover, #cropControlsConfirm:hover {\r\n        color: ${props => props.theme.primary};\r\n        transition: color 0.3s;\r\n        background-color: ${props => props.theme.modals.buttons.background};\r\n    }\r\n    \r\n    .ant-spin-text {\r\n        font-family: 'Plus Jakarta Sans', sans-serif;\r\n        font-weight: bold;\r\n        margin-top: 40px;\r\n        font-size: 16px;\r\n        color: ${props => props.theme.wallet.text.secondary};\r\n    }\r\n\r\n    .selectedCurrencyOption {\r\n        text-align: left;\r\n        color: ${props => props.theme.wallet.text.secondary} !important;\r\n        background-color: ${props => props.theme.contrast} !important;\r\n    }\r\n    .cashLoadingIcon {\r\n        color: ${props => props.theme.primary} !important;\r\n        font-size: 48px !important;\r\n    }\r\n    .selectedCurrencyOption:hover {\r\n        color: ${props => props.theme.contrast} !important;\r\n        background-color: ${props => props.theme.primary} !important;\r\n    }\r\n    #addrSwitch, #cropSwitch {\r\n        .ant-switch-checked {\r\n            background-color: white !important;\r\n        }\r\n    }\r\n    #addrSwitch.ant-switch-checked, #cropSwitch.ant-switch-checked {\r\n        background-image: ${props =>\r\n            props.theme.buttons.primary.backgroundImage} !important;\r\n    }\r\n\r\n    .ant-slider-rail {\r\n        background-color: ${props => props.theme.forms.border} !important;\r\n    }\r\n    .ant-slider-track {\r\n        background-color: ${props => props.theme.primary} !important;\r\n    }\r\n`;\r\n\r\nconst CustomApp = styled.div`\r\n    text-align: center;\r\n    font-family: 'Plus Jakarta Sans', sans-serif;\r\n    background-color: ${props => props.theme.app.background};\r\n`;\r\n\r\nconst Footer = styled.div`\r\n    z-index: 2999;\r\n    background-color: ${props => props.theme.footer.background};\r\n    border-radius: 20px 20px 0 0;\r\n    position: fixed;\r\n    bottom: 0;\r\n    width: 500px;\r\n    box-shadow: 0px -34px 20px rgba(0, 0, 0, 0.02), 0px -15px 15px rgba(0, 0, 0, 0.03), 0px -4px 8px rgba(0, 0, 0, 0.03), 0px 0px 0px rgba(0, 0, 0, 0.03);\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nexport const NavButton = styled.button`\r\n    :focus,\r\n    :active {\r\n        outline: none;\r\n    }\r\n    cursor: pointer;\r\n    padding: 24px 12px 12px 12px;\r\n    margin: 0 28px;\r\n    @media (max-width: 475px) {\r\n        margin: 0 20px;\r\n    }\r\n    @media (max-width: 420px) {\r\n        margin: 0 12px;\r\n    }\r\n    @media (max-width: 350px) {\r\n        margin: 0 8px;\r\n    }\r\n    background-color: ${props => props.theme.footer.background};\r\n    border: none;\r\n    font-size: 10.5px;\r\n    font-weight: bold;\r\n    .anticon {\r\n        display: block;\r\n        color: ${props => props.theme.footer.navIconInactive};\r\n        font-size: 24px;\r\n        margin-bottom: 6px;\r\n    }\r\n    ${({ active, ...props }) =>\r\n        active &&\r\n        `    \r\n        color: ${props.theme.primary};\r\n        .anticon {\r\n            color: ${props.theme.primary};\r\n        }\r\n  `}\r\n`;\r\n\r\nexport const WalletBody = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 100%;\r\n    min-height: 100vh;\r\n    background: #d5d5d5;\r\n`;\r\n\r\nexport const WalletCtn = styled.div`\r\n    position: relative;\r\n    width: 500px;\r\n    background-color: ${props => props.theme.footerBackground};\r\n    min-height: 100vh;\r\n    padding: 10px 30px 120px 30px;\r\n    background: ${props => props.theme.wallet.background};\r\n    box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.1), 0px 3px 6px rgba(0, 0, 0, 0.05);\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n        -webkit-box-shadow: none;\r\n        -moz-box-shadow: none;\r\n        box-shadow: none;\r\n    }\r\n`;\r\n\r\nexport const HeaderCtn = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 100%;\r\n    padding: 10px 0 0px;\r\n    margin-bottom: 20px;\r\n    justify-content: flex-end;\r\n\r\n    a {\r\n        color: ${props => props.theme.wallet.text.secondary};\r\n\r\n        :hover {\r\n            color: ${props => props.theme.primary};\r\n        }\r\n    }\r\n\r\n    @media (max-width: 768px) {\r\n        a {\r\n            font-size: 12px;\r\n        }\r\n        padding: 10px 0 20px;\r\n    }\r\n`;\r\n\r\nexport const CashTabLogo = styled.img`\r\n    width: 55px;\r\n    margin-left: 8px;\r\n`;\r\n\r\n// AbcLogo styled component not included in extension, replaced by open in new tab link\r\nexport const AbcLogo = styled.img`\r\n    width: 70px;\r\n`;\r\n\r\n// Easter egg styled component not used in extension/src/components/App.js\r\nexport const EasterEgg = styled.img`\r\n    position: fixed;\r\n    bottom: -195px;\r\n    margin: 0;\r\n    right: 10%;\r\n    transition-property: bottom;\r\n    transition-duration: 1.5s;\r\n    transition-timing-function: ease-out;\r\n\r\n    :hover {\r\n        bottom: 0;\r\n    }\r\n\r\n    @media screen and (max-width: 1250px) {\r\n        display: none;\r\n    }\r\n`;\r\n\r\nconst App = () => {\r\n    const ContextValue = React.useContext(WalletContext);\r\n    const { wallet, loading } = ContextValue;\r\n    const [loadingUtxosAfterSend, setLoadingUtxosAfterSend] = useState(false);\r\n    // If wallet is unmigrated, do not show page until it has migrated\r\n    // An invalid wallet will be validated/populated after the next API call, ETA 10s\r\n    const validWallet = isValidStoredWallet(wallet);\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const selectedKey =\r\n        location && location.pathname ? location.pathname.substr(1) : '';\r\n\r\n    // Easter egg boolean not used in extension/src/components/App.js\r\n    const hasTab = validWallet\r\n        ? checkForTokenById(\r\n              wallet.state.tokens,\r\n              '50d8292c6255cda7afc6c8566fed3cf42a2794e9619740fe8f4c95431271410e',\r\n          )\r\n        : false;\r\n    \r\n    const codeSplitLoader = <LoadingBlock>{CashLoadingIcon}</LoadingBlock>;\r\n\r\n    const navRedirect = (key) => {\r\n            window.history.replaceState(null, '', window.location.origin);\r\n            history.push(`/${key}`)\r\n    }\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <GlobalStyle />\r\n            <Spin\r\n                spinning={\r\n                    loading || loadingUtxosAfterSend || (wallet && !validWallet)\r\n                }\r\n                indicator={CashLoadingIcon}\r\n                tip={typeof loadingUtxosAfterSend === \"string\" ? loadingUtxosAfterSend : \"\"}\r\n            >\r\n                <CustomApp>\r\n                    <WalletBody>\r\n                        <WalletCtn>\r\n                            <HeaderCtn>\r\n                                {/*Begin component not included in extension as desktop only*/}\r\n                                {hasTab && (\r\n                                    <EasterEgg src={TabCash} alt=\"tabcash\" />\r\n                                )}\r\n                                {/*End component not included in extension as desktop only*/}\r\n                                {/*Begin component not included in extension as replaced by open in tab link*/}\r\n                                <a\r\n                                    href=\"https://e.cash/\"\r\n                                    target=\"_blank\"\r\n                                    rel=\"noopener noreferrer\"\r\n                                >\r\n                                    <AbcLogo src={ABC} alt=\"abc\" />\r\n                                </a>\r\n                                <CashTabLogo src={CashTab} alt=\"cashtab\" />\r\n                                {/*Begin component not included in extension as replaced by open in tab link*/}\r\n                            </HeaderCtn>\r\n                            <ProtectableComponentWrapper>\r\n                            <WalletLabel name={wallet.name}></WalletLabel>\r\n                                <Suspense fallback={codeSplitLoader}>\r\n                                    <Switch>\r\n                                        <Route path=\"/wallet\">\r\n                                            <Wallet />\r\n                                        </Route>\r\n                                        <Route path=\"/tokens\">\r\n                                            <Tokens\r\n                                                passLoadingStatus={\r\n                                                    setLoadingUtxosAfterSend\r\n                                                }\r\n                                            />\r\n                                        </Route>\r\n                                        <Route path=\"/send\">\r\n                                            <Send\r\n                                                passLoadingStatus={\r\n                                                    setLoadingUtxosAfterSend\r\n                                                }\r\n                                            />\r\n                                        </Route>\r\n                                        <Route\r\n                                            path=\"/send-token/:tokenId\"\r\n                                            render={props => (\r\n                                                <SendToken\r\n                                                    tokenId={\r\n                                                        props.match.params.tokenId\r\n                                                    }\r\n                                                    passLoadingStatus={\r\n                                                        setLoadingUtxosAfterSend\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                        />\r\n                                        <Route path=\"/checkout\">\r\n                                            <Checkout\r\n                                                passLoadingStatus={\r\n                                                    setLoadingUtxosAfterSend\r\n                                                }\r\n                                            />\r\n                                        </Route>\r\n                                        <Route path=\"/sendBip70\">\r\n                                            <SendBip70\r\n                                                passLoadingStatus={\r\n                                                    setLoadingUtxosAfterSend\r\n                                                }\r\n                                            />\r\n                                        </Route>\r\n                                        <Route path=\"/selfMint\">\r\n                                            <SelfMint\r\n                                                passLoadingStatus={\r\n                                                    setLoadingUtxosAfterSend\r\n                                                }\r\n                                            />\r\n                                        </Route>\r\n                                        <Route path=\"/configure\">\r\n                                            <Configure />\r\n                                        </Route>\r\n                                        <Redirect exact from=\"/\" to=\"/wallet\" />\r\n                                        <Route component={NotFound} />\r\n                                    </Switch>\r\n                                </Suspense>\r\n                            </ProtectableComponentWrapper>\r\n                        </WalletCtn>\r\n                        {wallet ? (\r\n                            <Footer>\r\n                                <NavButton\r\n                                    active={selectedKey === 'wallet'}\r\n                                    onClick={() => navRedirect('wallet')}\r\n                                >\r\n                                    <FolderOpenFilled />\r\n                                    Wallet\r\n                                </NavButton>\r\n\r\n                                <NavButton\r\n                                    active={selectedKey === 'tokens'}\r\n                                    onClick={() => navRedirect('tokens')}\r\n                                >\r\n                                    <AppstoreAddOutlined />\r\n                                    eTokens\r\n                                </NavButton>\r\n\r\n                                <NavButton\r\n                                    active={selectedKey === 'send'}\r\n                                    onClick={() => navRedirect('send')}\r\n                                >\r\n                                    <CaretRightOutlined />\r\n                                    Send\r\n                                </NavButton>\r\n                                <NavButton\r\n                                    active={selectedKey === 'configure'}\r\n                                    onClick={() => navRedirect('configure')}\r\n                                >\r\n                                    <SettingFilled />\r\n                                    Settings\r\n                                </NavButton>\r\n                            </Footer>\r\n                        ) : null}\r\n                    </WalletBody>\r\n                </CustomApp>\r\n            </Spin>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","export const checkForTokenById = (tokenList, specifiedTokenId) => {\r\n    for (const t of tokenList) {\r\n        if (t.tokenId === specifiedTokenId) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport { AuthenticationProvider, WalletProvider } from './utils/context';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport GA from './utils/GoogleAnalytics';\r\n\r\nReactDOM.render(\r\n    <AuthenticationProvider>\r\n        <WalletProvider>\r\n            <Router>\r\n                {GA.init() && <GA.RouteTracker />}\r\n                <App />\r\n            </Router>\r\n        </WalletProvider>\r\n    </AuthenticationProvider>,\r\n    document.getElementById('root'),\r\n);\r\n\r\nif ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', () =>\r\n        navigator.serviceWorker.register('/serviceWorker.js').catch(() => null),\r\n    );\r\n}\r\n\r\nif (module.hot) {\r\n    module.hot.accept();\r\n}\r\n","import { useEffect, useRef } from 'react';\r\n\r\nconst useAsyncTimeout = (callback, delay) => {\r\n    const savedCallback = useRef(callback);\r\n\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    });\r\n\r\n    useEffect(() => {\r\n        let id = null;\r\n        const tick = () => {\r\n            const promise = savedCallback.current();\r\n\r\n            if (promise instanceof Promise) {\r\n                promise.then(() => {\r\n                    id = setTimeout(tick, delay);\r\n                });\r\n            } else {\r\n                id = setTimeout(tick, delay);\r\n            }\r\n        };\r\n\r\n        if (id !== null) {\r\n            id = setTimeout(tick, delay);\r\n            return () => clearTimeout(id);\r\n        } else {\r\n            tick();\r\n            return;\r\n        }\r\n    }, [delay]);\r\n};\r\n\r\nexport default useAsyncTimeout;\r\n","import { useRef, useEffect } from 'react';\r\n\r\nexport const usePrevious = value => {\r\n    // The ref object is a generic container whose current property is mutable ...\r\n    // ... and can hold any value, similar to an instance property on a class\r\n    const ref = useRef();\r\n\r\n    // Store current value in ref\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    }, [value]); // Only re-run if value changes\r\n\r\n    // Return previous value (happens before update in useEffect above)\r\n    return ref.current;\r\n};\r\n\r\nexport default usePrevious;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport useAsyncTimeout from '@hooks/useAsyncTimeout';\r\nimport usePrevious from '@hooks/usePrevious';\r\nimport useBCH from '@hooks/useBCH';\r\nimport BigNumber from 'bignumber.js';\r\nimport {\r\n    fromSmallestDenomination,\r\n    loadStoredWallet,\r\n    isValidStoredWallet,\r\n    isLegacyMigrationRequired,\r\n} from '@utils/cashMethods';\r\nimport { isValidCashtabSettings } from '@utils/validation';\r\nimport localforage from 'localforage';\r\nimport { currency } from '@components/Common/Ticker';\r\nimport isEqual from 'lodash.isequal';\r\nimport {\r\n    xecReceivedNotification,\r\n    eTokenReceivedNotification,\r\n} from '@components/Common/Notifications';\r\nimport cashaddr from 'ecashaddrjs';\r\nimport { \r\n    Mnemonic,\r\n    HDPrivateKey,\r\n    KeyRing\r\n} from 'bcash';\r\n\r\nconst useWallet = () => {\r\n    const [wallet, setWallet] = useState(false);\r\n    const [cashtabSettings, setCashtabSettings] = useState(false);\r\n    const [fiatPrice, setFiatPrice] = useState(null);\r\n    const [apiError, setApiError] = useState(false);\r\n    const [checkFiatInterval, setCheckFiatInterval] = useState(null);\r\n    const {\r\n        getUtxosBcash,\r\n        getSlpBalancesAndUtxosBcash,\r\n        getTxHistoryBcash,\r\n        parseTxData\r\n    } = useBCH();\r\n    const [loading, setLoading] = useState(true);\r\n    const { balances, tokens, utxos } = isValidStoredWallet(wallet)\r\n        ? wallet.state\r\n        : {\r\n              balances: {},\r\n              tokens: [],\r\n              utxos: null,\r\n          };\r\n    const previousBalances = usePrevious(balances);\r\n    const previousTokens = usePrevious(tokens);\r\n\r\n    const normalizeBalance = slpBalancesAndUtxos => {\r\n        const totalBalanceInSatoshis = slpBalancesAndUtxos.nonSlpUtxos.reduce(\r\n            (previousBalance, utxo) => previousBalance + utxo.value,\r\n            0,\r\n        );\r\n        return {\r\n            totalBalanceInSatoshis,\r\n            totalBalance: fromSmallestDenomination(totalBalanceInSatoshis),\r\n        };\r\n    };\r\n\r\n    const deriveAccount = async ({ masterHDNode, path }) => {\r\n        const node = masterHDNode.derivePath(path);\r\n        const publicKey = node.toPublic().publicKey.toString('hex');\r\n        const keyring = KeyRing.fromPrivate(node.privateKey);\r\n        const cashAddress = keyring.getAddress('string');\r\n        const decodedAddress = cashaddr.decode(cashAddress);\r\n        const slpAddress = cashaddr.encode(\r\n            'etoken', \r\n            decodedAddress.type, \r\n            decodedAddress.hash\r\n        );\r\n\r\n        return {\r\n            publicKey,\r\n            cashAddress,\r\n            slpAddress,\r\n            fundingWif: keyring.toSecret(),\r\n            fundingAddress: slpAddress,\r\n            legacyAddress: keyring.getAddress('base58'),\r\n        };\r\n    };\r\n\r\n    const loadWalletFromStorageOnStartup = async setWallet => {\r\n        // get wallet object from localforage\r\n        const wallet = await getWallet();\r\n        // If wallet object in storage is valid, use it to set state on startup\r\n        if (isValidStoredWallet(wallet)) {\r\n            // Convert all the token balance figures to big numbers\r\n            const liveWalletState = loadStoredWallet(wallet.state);\r\n            wallet.state = liveWalletState;\r\n\r\n            setWallet(wallet);\r\n            return setLoading(false);\r\n        }\r\n        // Loading will remain true until API calls populate this legacy wallet\r\n        setWallet(wallet);\r\n    };\r\n\r\n    const update = async ({ wallet }, forceFullUpdate = false) => {\r\n        // const ms = new Date().getTime();\r\n        // console.log(`update.${ms}`);\r\n        // console.time(`update.${ms}`);\r\n        try {\r\n            if (!wallet) {\r\n                return;\r\n            }\r\n            const cashAddresses = [\r\n                wallet.Path245.cashAddress,\r\n                wallet.Path145.cashAddress,\r\n                wallet.Path1899.cashAddress,\r\n            ];\r\n\r\n            const utxosBcash = await getUtxosBcash(cashAddresses);\r\n\r\n            const utxosHaveChanged = !isEqual(utxosBcash, wallet?.state?.utxos);\r\n\r\n            // If the utxo set has not changed,\r\n            if (!utxosHaveChanged && !forceFullUpdate) {\r\n                // remove api error here; otherwise it will remain if recovering from a rate\r\n                // limit error with an unchanged utxo set\r\n                setApiError(false);\r\n                // then wallet.state has not changed and does not need to be updated\r\n                // console.log(\"wallet state not updated\")\r\n                // console.timeEnd(`update.${ms}`);\r\n                return;\r\n            }\r\n\r\n            const slpBalancesAndUtxos = await getSlpBalancesAndUtxosBcash(utxosBcash);\r\n\r\n            const txHistory = await getTxHistoryBcash(cashAddresses);\r\n\r\n            const parsedWithTokens = parseTxData(wallet, txHistory);\r\n\r\n            if (typeof slpBalancesAndUtxos === 'undefined') {\r\n                console.log(`slpBalancesAndUtxos is undefined`);\r\n                throw new Error('slpBalancesAndUtxos is undefined');\r\n            }\r\n            const { tokens } = slpBalancesAndUtxos;\r\n\r\n            const newState = {\r\n                balances: {},\r\n                tokens: [],\r\n                slpBalancesAndUtxos: [],\r\n            };\r\n\r\n            newState.slpBalancesAndUtxos = slpBalancesAndUtxos;\r\n\r\n            newState.balances = normalizeBalance(slpBalancesAndUtxos);\r\n\r\n            newState.tokens = tokens;\r\n\r\n            newState.parsedTxHistory = parsedWithTokens;\r\n\r\n            newState.utxos = utxosBcash;\r\n\r\n            // Set wallet with new state field\r\n            wallet.state = newState;\r\n            // console.log('wallet.state', wallet.state);\r\n            setWallet(wallet);\r\n\r\n            // Write this state to indexedDb using localForage\r\n            writeWalletState(wallet, newState);\r\n            // If everything executed correctly, remove apiError\r\n            setApiError(false);\r\n        } catch (error) {\r\n            console.log(`Error in update({wallet})`);\r\n            console.log(error);\r\n            // Set this in state so that transactions are disabled until the issue is resolved\r\n            setApiError(true);\r\n            // console.timeEnd(`update.${ms}`);\r\n        }\r\n        // console.log(\"wallet state updated\")\r\n        // console.timeEnd(`update.${ms}`);\r\n    };\r\n\r\n    const getActiveWalletFromLocalForage = async () => {\r\n        let wallet;\r\n        try {\r\n            wallet = await localforage.getItem('wallet');\r\n        } catch (err) {\r\n            console.log(`Error in getActiveWalletFromLocalForage`, err);\r\n            wallet = null;\r\n        }\r\n        return wallet;\r\n    };\r\n\r\n    /*\r\n    const getSavedWalletsFromLocalForage = async () => {\r\n        let savedWallets;\r\n        try {\r\n            savedWallets = await localforage.getItem('savedWallets');\r\n        } catch (err) {\r\n            console.log(`Error in getSavedWalletsFromLocalForage`, err);\r\n            savedWallets = null;\r\n        }\r\n        return savedWallets;\r\n    };\r\n    */\r\n\r\n    const getWallet = async () => {\r\n        let wallet;\r\n        let existingWallet;\r\n        try {\r\n            existingWallet = await getActiveWalletFromLocalForage();\r\n            // existing wallet will be\r\n            // 1 - the 'wallet' value from localForage, if it exists\r\n            // 2 - false if it does not exist in localForage\r\n            // 3 - null if error\r\n\r\n            // If the wallet does not have Path1899, add it\r\n            // or each Path1899, Path145, Path245 does not have a public key, add them\r\n            if (existingWallet) {\r\n                if (isLegacyMigrationRequired(existingWallet)) {\r\n                    console.log(\r\n                        `Wallet does not have Path1899 or does not have public key`,\r\n                    );\r\n                    existingWallet = await migrateLegacyWallet(\r\n                        existingWallet,\r\n                    );\r\n                }\r\n            }\r\n\r\n            // If not in localforage then existingWallet = false, check localstorage\r\n            if (!existingWallet) {\r\n                existingWallet = JSON.parse(\r\n                    window.localStorage.getItem('wallet'),\r\n                );\r\n                // If you find it here, move it to indexedDb\r\n                if (existingWallet !== null) {\r\n                    wallet = await getWalletDetails(existingWallet);\r\n                    await localforage.setItem('wallet', wallet);\r\n                    return wallet;\r\n                }\r\n            }\r\n        } catch (err) {\r\n            console.log(`Error in getWallet()`, err);\r\n            /* \r\n            Error here implies problem interacting with localForage or localStorage API\r\n            \r\n            Have not seen this error in testing\r\n\r\n            In this case, you still want to return 'wallet' using the logic below based on \r\n            the determination of 'existingWallet' from the logic above\r\n            */\r\n        }\r\n\r\n        if (existingWallet === null || !existingWallet) {\r\n            wallet = await getWalletDetails(existingWallet);\r\n            await localforage.setItem('wallet', wallet);\r\n        } else {\r\n            wallet = existingWallet;\r\n        }\r\n        return wallet;\r\n    };\r\n\r\n    const migrateLegacyWallet = async (wallet) => {\r\n        const NETWORK = process.env.REACT_APP_NETWORK;\r\n        const mnemonic = wallet.mnemonic;\r\n        const masterHDNode = HDPrivateKey.fromPhrase(mnemonic);\r\n\r\n        const Path245 = await deriveAccount({\r\n            masterHDNode,\r\n            path: \"m/44'/245'/0'/0/0\",\r\n        });\r\n        const Path145 = await deriveAccount({\r\n            masterHDNode,\r\n            path: \"m/44'/145'/0'/0/0\",\r\n        });\r\n        const Path1899 = await deriveAccount({\r\n            masterHDNode,\r\n            path: \"m/44'/1899'/0'/0/0\",\r\n        });\r\n\r\n        wallet.Path245 = Path245;\r\n        wallet.Path145 = Path145;\r\n        wallet.Path1899 = Path1899;\r\n\r\n        try {\r\n            await localforage.setItem('wallet', wallet);\r\n        } catch (err) {\r\n            console.log(\r\n                `Error setting wallet to wallet indexedDb in migrateLegacyWallet()`,\r\n            );\r\n            console.log(err);\r\n        }\r\n\r\n        return wallet;\r\n    };\r\n\r\n    const writeWalletState = async (wallet, newState) => {\r\n        // Add new state as an object on the active wallet\r\n        wallet.state = newState;\r\n        try {\r\n            await localforage.setItem('wallet', wallet);\r\n        } catch (err) {\r\n            console.log(`Error in writeWalletState()`);\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    const getWalletDetails = async wallet => {\r\n        if (!wallet) {\r\n            return false;\r\n        }\r\n        // Since this info is in localforage now, only get the var\r\n        const NETWORK = process.env.REACT_APP_NETWORK;\r\n        const mnemonic = wallet.mnemonic;\r\n        const masterHDNode = HDPrivateKey.fromPhrase(mnemonic);\r\n\r\n        const Path245 = await deriveAccount({\r\n            masterHDNode,\r\n            path: \"m/44'/245'/0'/0/0\",\r\n        });\r\n        const Path145 = await deriveAccount({\r\n            masterHDNode,\r\n            path: \"m/44'/145'/0'/0/0\",\r\n        });\r\n        const Path1899 = await deriveAccount({\r\n            masterHDNode,\r\n            path: \"m/44'/1899'/0'/0/0\",\r\n        });\r\n\r\n        let name = Path1899.cashAddress.slice(12, 17);\r\n        // Only set the name if it does not currently exist\r\n        if (wallet && wallet.name) {\r\n            name = wallet.name;\r\n        }\r\n\r\n        return {\r\n            mnemonic: wallet.mnemonic,\r\n            name,\r\n            Path245,\r\n            Path145,\r\n            Path1899,\r\n        };\r\n    };\r\n\r\n    const getSavedWallets = async activeWallet => {\r\n        let savedWallets;\r\n        try {\r\n            savedWallets = await localforage.getItem('savedWallets');\r\n            if (savedWallets === null) {\r\n                savedWallets = [];\r\n            }\r\n        } catch (err) {\r\n            console.log(`Error in getSavedWallets`);\r\n            console.log(err);\r\n            savedWallets = [];\r\n        }\r\n        // Even though the active wallet is still stored in savedWallets, don't return it in this function\r\n        for (let i = 0; i < savedWallets.length; i += 1) {\r\n            if (\r\n                typeof activeWallet !== 'undefined' &&\r\n                activeWallet.name &&\r\n                savedWallets[i].name === activeWallet.name\r\n            ) {\r\n                savedWallets.splice(i, 1);\r\n            }\r\n        }\r\n        return savedWallets;\r\n    };\r\n\r\n    const activateWallet = async walletToActivate => {\r\n        /*\r\n    If the user is migrating from old version to this version, make sure to save the activeWallet\r\n\r\n    1 - check savedWallets for the previously active wallet\r\n    2 - If not there, add it\r\n    */\r\n        let currentlyActiveWallet;\r\n        try {\r\n            currentlyActiveWallet = await localforage.getItem('wallet');\r\n        } catch (err) {\r\n            console.log(\r\n                `Error in localforage.getItem(\"wallet\") in activateWallet()`,\r\n            );\r\n            return false;\r\n        }\r\n        // Get savedwallets\r\n        let savedWallets;\r\n        try {\r\n            savedWallets = await localforage.getItem('savedWallets');\r\n        } catch (err) {\r\n            console.log(\r\n                `Error in localforage.getItem(\"savedWallets\") in activateWallet()`,\r\n            );\r\n            return false;\r\n        }\r\n        /*\r\n        When a legacy user runs cashtab.com/, their active wallet will be migrated to Path1899 by \r\n        the getWallet function. getWallet function also makes sure that each Path has a public key\r\n\r\n        Wallets in savedWallets are migrated when they are activated, in this function\r\n\r\n        Two cases to handle\r\n\r\n        1 - currentlyActiveWallet has Path1899, but its stored keyvalue pair in savedWallets does not\r\n            > Update savedWallets so that Path1899 is added to currentlyActiveWallet\r\n        \r\n        2 - walletToActivate does not have Path1899\r\n            > Update walletToActivate with Path1899 before activation\r\n\r\n        NOTE: since publicKey property is added later,\r\n        wallet without public key in Path1899 is also considered legacy and required migration.\r\n        */\r\n\r\n        // Need to handle a similar situation with state\r\n        // If you find the activeWallet in savedWallets but without state, resave active wallet with state\r\n        // Note you do not have the Case 2 described above here, as wallet state is added in the update() function of useWallet.js\r\n        // Also note, since state can be expected to change frequently (unlike path deriv), you will likely save it every time you activate a new wallet\r\n        // Check savedWallets for currentlyActiveWallet\r\n        let walletInSavedWallets = false;\r\n        for (let i = 0; i < savedWallets.length; i += 1) {\r\n            if (savedWallets[i].name === currentlyActiveWallet.name) {\r\n                walletInSavedWallets = true;\r\n                // Check savedWallets for unmigrated currentlyActiveWallet\r\n                if (isLegacyMigrationRequired(savedWallets[i])) {\r\n                    // Case 1, described above\r\n                    savedWallets[i].Path1899 = currentlyActiveWallet.Path1899;\r\n                    savedWallets[i].Path145 = currentlyActiveWallet.Path145;\r\n                    savedWallets[i].Path245 = currentlyActiveWallet.Path245;\r\n                }\r\n\r\n                /*\r\n                Update wallet state\r\n                Note, this makes previous `walletUnmigrated` variable redundant\r\n                savedWallets[i] should always be updated, since wallet state can be expected to change most of the time\r\n                */\r\n                savedWallets[i].state = currentlyActiveWallet.state;\r\n            }\r\n        }\r\n\r\n        // resave savedWallets\r\n        try {\r\n            // Set walletName as the active wallet\r\n            await localforage.setItem('savedWallets', savedWallets);\r\n        } catch (err) {\r\n            console.log(\r\n                `Error in localforage.setItem(\"savedWallets\") in activateWallet() for unmigrated wallet`,\r\n            );\r\n        }\r\n\r\n        if (!walletInSavedWallets) {\r\n            console.log(`Wallet is not in saved Wallets, adding`);\r\n            savedWallets.push(currentlyActiveWallet);\r\n            // resave savedWallets\r\n            try {\r\n                // Set walletName as the active wallet\r\n                await localforage.setItem('savedWallets', savedWallets);\r\n            } catch (err) {\r\n                console.log(\r\n                    `Error in localforage.setItem(\"savedWallets\") in activateWallet()`,\r\n                );\r\n            }\r\n        }\r\n        // If wallet does not have Path1899, add it\r\n        // or each of the Path1899, Path145, Path245 does not have a public key, add them\r\n        // by calling migrateLagacyWallet()\r\n        if (isLegacyMigrationRequired(walletToActivate)) {\r\n            // Case 2, described above\r\n            console.log(\r\n                `Case 2: Wallet to activate does not have Path1899 or does not have public key in each Path`,\r\n            );\r\n            console.log(\r\n                `Wallet to activate from SavedWallets does not have Path1899 or does not have public key in each Path`,\r\n            );\r\n            console.log(`walletToActivate`, walletToActivate);\r\n            walletToActivate = await migrateLegacyWallet(walletToActivate);\r\n        } else {\r\n            // Otherwise activate it as normal\r\n            // Now that we have verified the last wallet was saved, we can activate the new wallet\r\n            try {\r\n                await localforage.setItem('wallet', walletToActivate);\r\n            } catch (err) {\r\n                console.log(\r\n                    `Error in localforage.setItem(\"wallet\", walletToActivate) in activateWallet()`,\r\n                );\r\n                return false;\r\n            }\r\n        }\r\n        // Make sure stored wallet is in correct format to be used as live wallet\r\n        if (isValidStoredWallet(walletToActivate)) {\r\n            // Convert all the token balance figures to big numbers\r\n            const liveWalletState = loadStoredWallet(walletToActivate.state);\r\n            walletToActivate.state = liveWalletState;\r\n        }\r\n\r\n        return walletToActivate;\r\n    };\r\n\r\n    const renameWallet = async (oldName, newName) => {\r\n        // Load savedWallets\r\n        let savedWallets;\r\n        try {\r\n            savedWallets = await localforage.getItem('savedWallets');\r\n        } catch (err) {\r\n            console.log(\r\n                `Error in await localforage.getItem(\"savedWallets\") in renameWallet`,\r\n            );\r\n            console.log(err);\r\n            return false;\r\n        }\r\n        // Verify that no existing wallet has this name\r\n        for (let i = 0; i < savedWallets.length; i += 1) {\r\n            if (savedWallets[i].name === newName) {\r\n                // return an error\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // change name of desired wallet\r\n        for (let i = 0; i < savedWallets.length; i += 1) {\r\n            if (savedWallets[i].name === oldName) {\r\n                // Replace the name of this entry with the new name\r\n                savedWallets[i].name = newName;\r\n            }\r\n        }\r\n        // resave savedWallets\r\n        try {\r\n            // Set walletName as the active wallet\r\n            await localforage.setItem('savedWallets', savedWallets);\r\n        } catch (err) {\r\n            console.log(\r\n                `Error in localforage.setItem(\"savedWallets\", savedWallets) in renameWallet()`,\r\n            );\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const deleteWallet = async walletToBeDeleted => {\r\n        // delete a wallet\r\n        // returns true if wallet is successfully deleted\r\n        // otherwise returns false\r\n        // Load savedWallets\r\n        let savedWallets;\r\n        try {\r\n            savedWallets = await localforage.getItem('savedWallets');\r\n        } catch (err) {\r\n            console.log(\r\n                `Error in await localforage.getItem(\"savedWallets\") in deleteWallet`,\r\n            );\r\n            console.log(err);\r\n            return false;\r\n        }\r\n        // Iterate over to find the wallet to be deleted\r\n        // Verify that no existing wallet has this name\r\n        let walletFoundAndRemoved = false;\r\n        for (let i = 0; i < savedWallets.length; i += 1) {\r\n            if (savedWallets[i].name === walletToBeDeleted.name) {\r\n                // Verify it has the same mnemonic too, that's a better UUID\r\n                if (savedWallets[i].mnemonic === walletToBeDeleted.mnemonic) {\r\n                    // Delete it\r\n                    savedWallets.splice(i, 1);\r\n                    walletFoundAndRemoved = true;\r\n                }\r\n            }\r\n        }\r\n        // If you don't find the wallet, return false\r\n        if (!walletFoundAndRemoved) {\r\n            return false;\r\n        }\r\n\r\n        // Resave savedWallets less the deleted wallet\r\n        try {\r\n            // Set walletName as the active wallet\r\n            await localforage.setItem('savedWallets', savedWallets);\r\n        } catch (err) {\r\n            console.log(\r\n                `Error in localforage.setItem(\"savedWallets\", savedWallets) in deleteWallet()`,\r\n            );\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const addNewSavedWallet = async importMnemonic => {\r\n        // Add a new wallet to savedWallets from importMnemonic or just new wallet\r\n        const lang = 'english';\r\n        // create 128 bit BIP39 mnemonic\r\n        const Bip39128BitMnemonic = importMnemonic\r\n            ? importMnemonic\r\n            : new Mnemonic( {language:lang} );\r\n        const newSavedWallet = await getWalletDetails({\r\n            mnemonic: Bip39128BitMnemonic.toString(),\r\n        });\r\n        // Get saved wallets\r\n        let savedWallets;\r\n        try {\r\n            savedWallets = await localforage.getItem('savedWallets');\r\n            // If this doesn't exist yet, savedWallets === null\r\n            if (savedWallets === null) {\r\n                savedWallets = [];\r\n            }\r\n        } catch (err) {\r\n            console.log(\r\n                `Error in savedWallets = await localforage.getItem(\"savedWallets\") in addNewSavedWallet()`,\r\n            );\r\n            console.log(err);\r\n            console.log(`savedWallets in error state`, savedWallets);\r\n        }\r\n        // If this wallet is from an imported mnemonic, make sure it does not already exist in savedWallets\r\n        if (importMnemonic) {\r\n            for (let i = 0; i < savedWallets.length; i += 1) {\r\n                // Check for condition \"importing new wallet that is already in savedWallets\"\r\n                if (savedWallets[i].mnemonic === importMnemonic) {\r\n                    // set this as the active wallet to keep name history\r\n                    console.log(\r\n                        `Error: this wallet already exists in savedWallets`,\r\n                    );\r\n                    console.log(`Wallet not being added.`);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        // add newSavedWallet\r\n        savedWallets.push(newSavedWallet);\r\n        // update savedWallets\r\n        try {\r\n            await localforage.setItem('savedWallets', savedWallets);\r\n        } catch (err) {\r\n            console.log(\r\n                `Error in localforage.setItem(\"savedWallets\", activeWallet) called in createWallet with ${importMnemonic}`,\r\n            );\r\n            console.log(`savedWallets`, savedWallets);\r\n            console.log(err);\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const createWallet = async importMnemonic => {\r\n        const lang = 'english';\r\n        // create 128 bit BIP39 mnemonic\r\n        const Bip39128BitMnemonic = importMnemonic\r\n            ? importMnemonic\r\n            : new Mnemonic( {language:lang} );\r\n        const wallet = await getWalletDetails({\r\n            mnemonic: Bip39128BitMnemonic.toString(),\r\n        });\r\n\r\n        try {\r\n            await localforage.setItem('wallet', wallet);\r\n        } catch (err) {\r\n            console.log(\r\n                `Error setting wallet to wallet indexedDb in createWallet()`,\r\n            );\r\n            console.log(err);\r\n        }\r\n        // Since this function is only called from OnBoarding.js, also add this to the saved wallet\r\n        try {\r\n            await localforage.setItem('savedWallets', [wallet]);\r\n        } catch (err) {\r\n            console.log(\r\n                `Error setting wallet to savedWallets indexedDb in createWallet()`,\r\n            );\r\n            console.log(err);\r\n        }\r\n        return wallet;\r\n    };\r\n\r\n    const validateMnemonic = (mnemonic) => {\r\n        let mnemonicTestOutput;\r\n\r\n        try {\r\n            mnemonicTestOutput = Mnemonic.fromPhrase(mnemonic);\r\n\r\n            if (mnemonicTestOutput.toString() === mnemonic) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const handleUpdateWallet = async setWallet => {\r\n        await loadWalletFromStorageOnStartup(setWallet);\r\n    };\r\n\r\n    const loadCashtabSettings = async () => {\r\n        // get settings object from localforage\r\n        let localSettings;\r\n        try {\r\n            localSettings = await localforage.getItem('settings');\r\n            // If there is no keyvalue pair in localforage with key 'settings'\r\n            if (localSettings === null) {\r\n                // Create one with the default settings from Ticker.js\r\n                localforage.setItem('settings', currency.defaultSettings);\r\n                // Set state to default settings\r\n                setCashtabSettings(currency.defaultSettings);\r\n                return currency.defaultSettings;\r\n            }\r\n        } catch (err) {\r\n            console.log(`Error getting cashtabSettings`, err);\r\n            // TODO If they do not exist, write them\r\n            // TODO add function to change them\r\n            setCashtabSettings(currency.defaultSettings);\r\n            return currency.defaultSettings;\r\n        }\r\n        // If you found an object in localforage at the settings key, make sure it's valid\r\n        if (isValidCashtabSettings(localSettings)) {\r\n            setCashtabSettings(localSettings);\r\n            return localSettings;\r\n        }\r\n        // if not valid, also set cashtabSettings to default\r\n        setCashtabSettings(currency.defaultSettings);\r\n        return currency.defaultSettings;\r\n    };\r\n\r\n    // With different currency selections possible, need unique intervals for price checks\r\n    // Must be able to end them and set new ones with new currencies\r\n    const initializeFiatPriceApi = async selectedFiatCurrency => {\r\n        // Update fiat price and confirm it is set to make sure ap keeps loading state until this is updated\r\n        await fetchBchPrice(selectedFiatCurrency);\r\n        // Set interval for updating the price with given currency\r\n\r\n        const thisFiatInterval = setInterval(function () {\r\n            fetchBchPrice(selectedFiatCurrency);\r\n        }, 60000);\r\n\r\n        // set interval in state\r\n        setCheckFiatInterval(thisFiatInterval);\r\n    };\r\n\r\n    const clearFiatPriceApi = fiatPriceApi => {\r\n        // Clear fiat price check interval of previously selected currency\r\n        clearInterval(fiatPriceApi);\r\n    };\r\n\r\n    const changeCashtabSettings = async (key, newValue) => {\r\n        // Set loading to true as you do not want to display the fiat price of the last currency\r\n        // loading = true will lock the UI until the fiat price has updated\r\n        setLoading(true);\r\n        // Get settings from localforage\r\n        let currentSettings;\r\n        let newSettings;\r\n        try {\r\n            currentSettings = await localforage.getItem('settings');\r\n        } catch (err) {\r\n            console.log(`Error in changeCashtabSettings`, err);\r\n            // Set fiat price to null, which disables fiat sends throughout the app\r\n            setFiatPrice(null);\r\n            // Unlock the UI\r\n            setLoading(false);\r\n            return;\r\n        }\r\n        // Make sure function was called with valid params\r\n        if (\r\n            Object.keys(currentSettings).includes(key) &&\r\n            currency.settingsValidation[key].includes(newValue)\r\n        ) {\r\n            // Update settings\r\n            newSettings = currentSettings;\r\n            newSettings[key] = newValue;\r\n        }\r\n        // Set new settings in state so they are available in context throughout the app\r\n        setCashtabSettings(newSettings);\r\n        // If this settings change adjusted the fiat currency, update fiat price\r\n        if (key === 'fiatCurrency') {\r\n            clearFiatPriceApi(checkFiatInterval);\r\n            initializeFiatPriceApi(newValue);\r\n        }\r\n        // Write new settings in localforage\r\n        try {\r\n            await localforage.setItem('settings', newSettings);\r\n        } catch (err) {\r\n            console.log(\r\n                `Error writing newSettings object to localforage in changeCashtabSettings`,\r\n                err,\r\n            );\r\n            console.log(`newSettings`, newSettings);\r\n            // do nothing. If this happens, the user will see default currency next time they load the app.\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    // Parse for incoming XEC transactions\r\n    if (\r\n        previousBalances &&\r\n        balances &&\r\n        'totalBalance' in previousBalances &&\r\n        'totalBalance' in balances &&\r\n        new BigNumber(balances.totalBalance)\r\n            .minus(previousBalances.totalBalance)\r\n            .gt(0)\r\n    ) {\r\n        xecReceivedNotification(\r\n            balances,\r\n            previousBalances,\r\n            cashtabSettings,\r\n            fiatPrice,\r\n        );\r\n    }\r\n\r\n    // Parse for incoming eToken transactions\r\n    if (\r\n        tokens &&\r\n        tokens[0] &&\r\n        tokens[0].balance &&\r\n        previousTokens &&\r\n        previousTokens[0] &&\r\n        previousTokens[0].balance\r\n    ) {\r\n        // If tokens length is greater than previousTokens length, a new token has been received\r\n        // Note, a user could receive a new token, AND more of existing tokens in between app updates\r\n        // In this case, the app will only notify about the new token\r\n        // TODO better handling for all possible cases to cover this\r\n        // TODO handle with websockets for better response time, less complicated calc\r\n        if (tokens.length > previousTokens.length) {\r\n            // Find the new token\r\n            const tokenIds = tokens.map(({ tokenId }) => tokenId);\r\n            const previousTokenIds = previousTokens.map(\r\n                ({ tokenId }) => tokenId,\r\n            );\r\n            //console.log(`tokenIds`, tokenIds);\r\n            //console.log(`previousTokenIds`, previousTokenIds);\r\n\r\n            // An array with the new token Id\r\n            const newTokenIdArr = tokenIds.filter(\r\n                tokenId => !previousTokenIds.includes(tokenId),\r\n            );\r\n            // It's possible that 2 new tokens were received\r\n            // To do, handle this case\r\n            const newTokenId = newTokenIdArr[0];\r\n            //console.log(newTokenId);\r\n\r\n            // How much of this tokenId did you get?\r\n            // would be at\r\n\r\n            // Find where the newTokenId is\r\n            const receivedTokenObjectIndex = tokens.findIndex(\r\n                x => x.tokenId === newTokenId,\r\n            );\r\n            // console.log(`receivedTokenObjectIndex`, receivedTokenObjectIndex);\r\n            // Calculate amount received\r\n            // console.log(`receivedTokenObject:`, tokens[receivedTokenObjectIndex]);\r\n\r\n            const receivedSlpQty =\r\n                tokens[receivedTokenObjectIndex].balance\r\n                .div(tokens[receivedTokenObjectIndex].info.decimals ** 10)\r\n                .toString();\r\n            const receivedSlpTicker =\r\n                tokens[receivedTokenObjectIndex].info.ticker;\r\n            const receivedSlpName =\r\n                tokens[receivedTokenObjectIndex].info.name;\r\n            //console.log(`receivedSlpQty`, receivedSlpQty);\r\n\r\n            // Notification if you received SLP\r\n            if (receivedSlpQty > 0) {\r\n                eTokenReceivedNotification(\r\n                    currency,\r\n                    receivedSlpTicker,\r\n                    receivedSlpQty,\r\n                    receivedSlpName,\r\n                );\r\n            }\r\n            //\r\n        } else {\r\n            // If tokens[i].balance > previousTokens[i].balance, a new SLP tx of an existing token has been received\r\n            // Note that tokens[i].balance is of type BigNumber\r\n            for (let i = 0; i < tokens.length; i += 1) {\r\n                if (tokens[i].balance.gt(previousTokens[i].balance)) {\r\n                    // Received this token\r\n                    // console.log(`previousTokenId`, previousTokens[i].tokenId);\r\n                    // console.log(`currentTokenId`, tokens[i].tokenId);\r\n\r\n                    if (previousTokens[i].tokenId !== tokens[i].tokenId) {\r\n                        console.log(\r\n                            `TokenIds do not match, breaking from SLP notifications`,\r\n                        );\r\n                        // Then don't send the notification\r\n                        // Also don't 'continue' ; this means you have sent a token, just stop iterating through\r\n                        break;\r\n                    }\r\n                    console.log('tokens[i]', tokens[i]);\r\n                    const receivedSlpQty = tokens[i].balance.minus(\r\n                        previousTokens[i].balance,\r\n                    ).div(10 ** tokens[i].info.decimals);\r\n\r\n                    const receivedSlpTicker = tokens[i].info.ticker;\r\n                    const receivedSlpName = tokens[i].info.name;\r\n\r\n                    eTokenReceivedNotification(\r\n                        currency,\r\n                        receivedSlpTicker,\r\n                        receivedSlpQty,\r\n                        receivedSlpName,\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const forceWalletUpdate = async (forceFullUpdate = false) => {\r\n        console.log(\"forcing wallet update\");\r\n        const wallet = await getWallet();\r\n        update({\r\n            wallet,\r\n        }, forceFullUpdate).finally(() => {\r\n            setLoading(false);\r\n        });\r\n    }\r\n\r\n    // Update wallet every 10s\r\n    useAsyncTimeout(async () => {\r\n        const wallet = await getWallet();\r\n        update({\r\n            wallet,\r\n        }).finally(() => {\r\n            setLoading(false);\r\n        });\r\n    }, 10000);\r\n\r\n    const fetchBchPrice = async (\r\n        fiatCode = cashtabSettings ? cashtabSettings.fiatCurrency : 'usd',\r\n    ) => {\r\n        // Split this variable out in case coingecko changes\r\n        const cryptoId = currency.coingeckoId;\r\n        // Keep this in the code, because different URLs will have different outputs require different parsing\r\n        const priceApiUrl = `https://api.coingecko.com/api/v3/simple/price?ids=${cryptoId}&vs_currencies=${fiatCode}&include_last_updated_at=true`;\r\n        let bchPrice;\r\n        let bchPriceJson;\r\n        try {\r\n            bchPrice = await fetch(priceApiUrl);\r\n            //console.log(`bchPrice`, bchPrice);\r\n        } catch (err) {\r\n            console.log(`Error fetching BCH Price`);\r\n            console.log(err);\r\n        }\r\n        try {\r\n            bchPriceJson = await bchPrice.json();\r\n            //console.log(`bchPriceJson`, bchPriceJson);\r\n            let bchPriceInFiat = bchPriceJson[cryptoId][fiatCode];\r\n\r\n            const validEcashPrice = typeof bchPriceInFiat === 'number';\r\n\r\n            if (validEcashPrice) {\r\n                setFiatPrice(bchPriceInFiat);\r\n            } else {\r\n                // If API price looks fishy, do not allow app to send using fiat settings\r\n                setFiatPrice(null);\r\n            }\r\n        } catch (err) {\r\n            console.log(`Error parsing price API response to JSON`);\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    useEffect(async () => {\r\n        handleUpdateWallet(setWallet);\r\n        const initialSettings = await loadCashtabSettings();\r\n        initializeFiatPriceApi(initialSettings.fiatCurrency);\r\n    }, []);\r\n\r\n    return {\r\n        wallet,\r\n        fiatPrice,\r\n        loading,\r\n        apiError,\r\n        cashtabSettings,\r\n        changeCashtabSettings,\r\n        getActiveWalletFromLocalForage,\r\n        forceWalletUpdate,\r\n        validateMnemonic,\r\n        getWalletDetails,\r\n        getSavedWallets,\r\n        migrateLegacyWallet,\r\n        createWallet: async importMnemonic => {\r\n            setLoading(true);\r\n            const newWallet = await createWallet(importMnemonic);\r\n            setWallet(newWallet);\r\n            update({\r\n                wallet: newWallet,\r\n            }).finally(() => setLoading(false));\r\n        },\r\n        activateWallet: async walletToActivate => {\r\n            setLoading(true);\r\n            const newWallet = await activateWallet(walletToActivate);\r\n            setWallet(newWallet);\r\n            if (isValidStoredWallet(walletToActivate)) {\r\n                // If you have all state parameters needed in storage, immediately load the wallet\r\n                setLoading(false);\r\n            } else {\r\n                // If the wallet is missing state parameters in storage, wait for API info\r\n                // This handles case of unmigrated legacy wallet\r\n                update({\r\n                    wallet: newWallet,\r\n                }).finally(() => setLoading(false));\r\n            }\r\n        },\r\n        addNewSavedWallet,\r\n        renameWallet,\r\n        deleteWallet,\r\n    };\r\n};\r\n\r\nexport default useWallet;\r\n","export const convertArrayBufferToBase64 = buffer => {\r\n    // convert the buffer from ArrayBuffer to Array of 8-bit unsigned integers\r\n    const dataView = new Uint8Array(buffer);\r\n    // convert the Array of 8-bit unsigned integers to a String\r\n    const dataStr = dataView.reduce(\r\n        (str, cur) => str + String.fromCharCode(cur),\r\n        '',\r\n    );\r\n    // convert String to base64\r\n    return window.btoa(dataStr);\r\n};\r\n\r\nexport const convertBase64ToArrayBuffer = base64Str => {\r\n    // convert base64 String to normal String\r\n    const dataStr = window.atob(base64Str);\r\n    // convert the String to an Array of 8-bit unsigned integers\r\n    const dataView = Uint8Array.from(dataStr, char => char.charCodeAt(0));\r\n    return dataView.buffer;\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport localforage from 'localforage';\r\nimport { currency } from '@components/Common/Ticker';\r\nimport {\r\n    convertBase64ToArrayBuffer,\r\n    convertArrayBufferToBase64,\r\n} from '@utils/convertArrBuffBase64';\r\n\r\n// return an Authentication Object\r\n// OR null if user device does not support Web Authentication\r\nconst useWebAuthentication = () => {\r\n    const [isWebAuthnSupported, setIsWebAuthnSupported] = useState(false);\r\n    // Possible values of isAuthenticationRequired:\r\n    //   true - YES, authentication is required\r\n    //   false - NO, authentication is not required\r\n    //   undefined - has not been set, this is the first time the app runs\r\n    const [isAuthenticationRequired, setIsAuthenticationRequired] =\r\n        useState(undefined);\r\n    const [credentialId, setCredentialId] = useState(null);\r\n    const [isSignedIn, setIsSignedIn] = useState(false);\r\n    const [userId, setUserId] = useState(Date.now().toString(16));\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const loadAuthenticationConfigFromLocalStorage = async () => {\r\n        // try to load authentication configuration from local storage\r\n        try {\r\n            return await localforage.getItem('authenticationConfig');\r\n        } catch (err) {\r\n            console.error(\r\n                'Error is localforange.getItem(\"authenticatonConfig\") in loadAuthenticationConfigFromLocalStorage() in useWebAuthentication()',\r\n            );\r\n            // Should stop when attempting to read from localstorage failed\r\n            // countinuing would prompt user to register new credential\r\n            // that would risk overrididing existing credential\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    const saveAuthenticationConfigToLocalStorage = () => {\r\n        try {\r\n            return localforage.setItem('authenticationConfig', {\r\n                isAuthenticationRequired,\r\n                userId,\r\n                credentialId,\r\n            });\r\n        } catch (err) {\r\n            console.error(\r\n                'Error is localforange.setItem(\"authenticatonConfig\") in saveAuthenticationConfigToLocalStorage() in useWebAuthentication()',\r\n            );\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    // Run Once\r\n    useEffect(async () => {\r\n        // check to see if user device supports User Verification\r\n        const available =\r\n            await window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\r\n        // only attempt to save/load authentication configuration from local storage if web authetication is supported\r\n        if (available) {\r\n            const authenticationConfig =\r\n                await loadAuthenticationConfigFromLocalStorage();\r\n            // if this is the first time the app is run, then save the default config value\r\n            if (authenticationConfig === null) {\r\n                saveAuthenticationConfigToLocalStorage();\r\n            } else {\r\n                setUserId(authenticationConfig.userId);\r\n                setCredentialId(authenticationConfig.credentialId);\r\n                setIsAuthenticationRequired(\r\n                    authenticationConfig.isAuthenticationRequired,\r\n                );\r\n            }\r\n            // signout the user when the app is not visible (minimize the browser, switch tab, switch app window)\r\n            const handleDocVisibilityChange = () => {\r\n                if (document.visibilityState !== 'visible')\r\n                    setIsSignedIn(false);\r\n            };\r\n            document.addEventListener(\r\n                'visibilitychange',\r\n                handleDocVisibilityChange,\r\n            );\r\n\r\n            setIsWebAuthnSupported(available);\r\n            setLoading(false);\r\n\r\n            return () => {\r\n                document.removeEventListener(\r\n                    'visibilitychange',\r\n                    handleDocVisibilityChange,\r\n                );\r\n            };\r\n        }\r\n    }, []);\r\n\r\n    // save the config whenever it is changed\r\n    useEffect(async () => {\r\n        if (isAuthenticationRequired === undefined) return;\r\n        await saveAuthenticationConfigToLocalStorage();\r\n    }, [isAuthenticationRequired, credentialId]);\r\n\r\n    // options for PublicKeyCredentialCreation\r\n    const publicKeyCredentialCreationOptions = {\r\n        // hardcode for now\r\n        // consider generating random string and then verifying it against the reponse from authenticator\r\n        challenge: Uint8Array.from('cashtab-wallet-for-ecash', c =>\r\n            c.charCodeAt(0),\r\n        ),\r\n        rp: {\r\n            name: currency.name,\r\n            id: document.domain,\r\n        },\r\n        user: {\r\n            id: Uint8Array.from(userId, c => c.charCodeAt(0)),\r\n            name: `Local User`,\r\n            displayName: 'Local User',\r\n        },\r\n        pubKeyCredParams: [\r\n            { alg: -7, type: 'public-key' },\r\n            { alg: -35, type: 'public-key' },\r\n            { alg: -36, type: 'public-key' },\r\n            { alg: -257, type: 'public-key' },\r\n            { alg: -258, type: 'public-key' },\r\n            { alg: -259, type: 'public-key' },\r\n            { alg: -37, type: 'public-key' },\r\n            { alg: -38, type: 'public-key' },\r\n            { alg: -39, type: 'public-key' },\r\n            { alg: -8, type: 'public-key' },\r\n        ],\r\n        authenticatorSelection: {\r\n            userVerification: 'required',\r\n            authenticatorAttachment: 'platform',\r\n            requireResidentKey: false,\r\n        },\r\n        timeout: 60000,\r\n        attestation: 'none',\r\n        excludeCredentials: [],\r\n        extensions: {},\r\n    };\r\n\r\n    // options for PublicKeyCredentialRequest\r\n    const publickKeyRequestOptions = {\r\n        // hardcode for now\r\n        // consider generating random string and then verifying it against the reponse from authenticator\r\n        challenge: Uint8Array.from('cashtab-wallet-for-ecash', c =>\r\n            c.charCodeAt(0),\r\n        ),\r\n        timeout: 60000,\r\n        // rpId: document.domain,\r\n        allowCredentials: [\r\n            {\r\n                type: 'public-key',\r\n                // the credentialId is stored as base64\r\n                // need to convert it to ArrayBuffer\r\n                id: convertBase64ToArrayBuffer(credentialId),\r\n                transports: ['internal'],\r\n            },\r\n        ],\r\n        userVerification: 'required',\r\n        extensions: {},\r\n    };\r\n\r\n    const authentication = {\r\n        isAuthenticationRequired,\r\n        credentialId,\r\n        isSignedIn,\r\n        loading,\r\n        turnOnAuthentication: () => {\r\n            // Need to make sure that the credetialId is set\r\n            // before turning on the authentication requirement\r\n            // otherwise, user will be locked out of the app\r\n            // in other words, user must sign up / register first\r\n            if (credentialId) {\r\n                setIsAuthenticationRequired(true);\r\n            }\r\n        },\r\n        turnOffAuthentication: () => {\r\n            setIsAuthenticationRequired(false);\r\n        },\r\n\r\n        signUp: async () => {\r\n            try {\r\n                const publicKeyCredential = await navigator.credentials.create({\r\n                    publicKey: publicKeyCredentialCreationOptions,\r\n                });\r\n                if (publicKeyCredential) {\r\n                    // convert the rawId from ArrayBuffer to base64 String\r\n                    const base64Id = convertArrayBufferToBase64(\r\n                        publicKeyCredential.rawId,\r\n                    );\r\n                    setIsSignedIn(true);\r\n                    setCredentialId(base64Id);\r\n                    setIsAuthenticationRequired(true);\r\n                } else {\r\n                    throw new Error(\r\n                        'Error: navigator.credentials.create() returns null, in signUp()',\r\n                    );\r\n                }\r\n            } catch (err) {\r\n                throw err;\r\n            }\r\n        },\r\n\r\n        signIn: async () => {\r\n            try {\r\n                const assertion = await navigator.credentials.get({\r\n                    publicKey: publickKeyRequestOptions,\r\n                });\r\n                if (assertion) {\r\n                    // convert rawId from ArrayBuffer to base64 String\r\n                    const base64Id = convertArrayBufferToBase64(\r\n                        assertion.rawId,\r\n                    );\r\n                    if (base64Id === credentialId) setIsSignedIn(true);\r\n                } else {\r\n                    throw new Error(\r\n                        'Error: navigator.credentials.get() returns null, signIn()',\r\n                    );\r\n                }\r\n            } catch (err) {\r\n                throw err;\r\n            }\r\n        },\r\n\r\n        signOut: () => {\r\n            setIsSignedIn(false);\r\n        },\r\n    };\r\n\r\n    // Web Authentication support on a user's device may become unavailable due to various reasons\r\n    // (hardware failure, OS problems, the behaviour of some authenticators after several failed authentication attempts, etc)\r\n    // If this is the case, and user has previous enabled the lock, the decision here is to lock up the wallet.\r\n    // Otherwise, malicious user needs to simply disbale the platform authenticator to gain access to the wallet\r\n    return !isWebAuthnSupported && !isAuthenticationRequired\r\n        ? null\r\n        : authentication;\r\n};\r\n\r\nexport default useWebAuthentication;\r\n","import React from 'react';\r\nimport useWallet from '../hooks/useWallet';\r\nexport const WalletContext = React.createContext();\r\n\r\nexport const WalletProvider = ({ children }) => {\r\n    const wallet = useWallet();\r\n    return (\r\n        <WalletContext.Provider value={wallet}>\r\n            {children}\r\n        </WalletContext.Provider>\r\n    );\r\n};\r\n\r\n// Authentication Context\r\nimport useWebAuthentication from '../hooks/useWebAuthentication';\r\nexport const AuthenticationContext = React.createContext();\r\nexport const AuthenticationProvider = ({ children }) => {\r\n    // useWebAuthentication returns null if Web Authn is not supported\r\n    const authentication = useWebAuthentication();\r\n\r\n    return (\r\n        <AuthenticationContext.Provider value={authentication}>\r\n            {children}\r\n        </AuthenticationContext.Provider>\r\n    );\r\n};\r\n"],"sourceRoot":""}