{"version":3,"sources":["components/Common/Atoms.js","components/Common/ApiError.js","components/Common/ScanQRCode.js","components/Common/EnhancedInputs.js","components/Common/BalanceHeader.js","hooks/useWindowDimensions.js","components/Send/SendToken.js"],"names":["LoadingCtn","styled","div","_templateObject","_taggedTemplateLiteral","props","theme","primary","BalanceHeaderWrap","_templateObject2","wallet","text","BalanceHeaderFiatWrap","_templateObject3","secondary","ZeroBalanceHeader","_templateObject4","TokenParamLabel","span","_templateObject5","AlertMsg","p","_templateObject6","forms","error","ConvertAmount","_templateObject7","ApiError","React","CashLoader","StyledScanQRCode","StyledModal","Modal","QRPreview","video","ScanQRCode","_ref","loadWithCameraOpen","_ref$onScan","onScan","otherProps","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","visible","setVisible","_useState3","_useState4","setError","_useState5","_useState6","activeCodeReader","setActiveCodeReader","teardownCodeReader","codeReader","reset","stop","parseContent","content","type","values","isValidCashPrefix","isValidTokenPrefix","address","eventLabel","currency","ticker","split","tokenPrefix","length","tokenTicker","Event","scanForQrCode","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","result","wrap","_context","prev","next","BrowserQRCodeReader","getVideoInputDevices","sent","decodeFromInputVideoDevice","undefined","abrupt","t0","console","log","JSON","stringify","message","apply","arguments","useEffect","createElement","Fragment","Object","assign","onClick","ThemedQrcodeOutlined","title","onCancel","footer","Alert","description","showIcon","style","textAlign","id","TextArea","Input","AntdFormCss","css","addonBackground","border","addonForeground","selectionBackground","borders","color","AntdFormWrapper","InputAddonText","disabled","InputNumberAddonText","SendBchInput","onMax","inputProps","selectProps","activeFiatCode","Option","Select","currencyOptions","value","label","map","key","className","CurrencySelect","defaultValue","width","Form","Item","Group","compact","step","dollar","Math","pow","cashDecimals","prefix","ThemedDollarOutlined","src","logo","alt","height","lineHeight","FormItemWithMaxAddon","_ref3","_excluded3","addonAfter","DestinationAddressSingle","_ref4","_excluded4","ThemedWalletOutlined","autoComplete","DestinationAddressMulti","_ref5","_excluded5","Bip70AddressSingle","_ref6","_excluded6","readOnly","SelfMintAuthCode","_ref7","_excluded7","ThemedLockOutlined","SelfMintPurchaseAmount","_ref8","_excluded8","logoUrl","authPubKeys","imageUrl","precision","CurrencySelectDropdown","currencyMenuOptions","currencyKeys","keys","fiatCurrencies","i","currencyMenuOption","slug","concat","name","symbol","push","BalanceHeader","balance","getWindowDimensions","_window","window","innerWidth","innerHeight","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","StyledCheckbox","Checkbox","SendToken","tokenId","passLoadingStatus","_React$useContext","useContext","WalletContext","apiError","walletState","getWalletState","tokens","slpUtxos","slpBalancesAndUtxos","token","find","tokenFormattedBalance","BigNumber","info","decimals","toString","tokenUtxos","filter","u","slp","tokenStats","queryStringText","setQueryStringText","sendTokenAddressError","setSendTokenAddressError","_useState7","_useState8","sendTokenAmountError","setSendTokenAmountError","scannerSupported","isMobile","isIOS","isSafari","blankFormData","dirty","_useState9","_useState10","formData","setFormData","_useState11","_useState12","postageData","setPostageData","_useState13","_useState14","usePostage","setUsePostage","_useBCH","useBCH","getBcashRestUrl","sendToken","getPostage","calculatePostage","_submit","_callee3","cleanAddress","link","_message","_context3","_objectSpread","Number","tokenReceiverAddress","amount","defaultFee","sendTokenNotification","test","errorNotification","postageObj","handleTokenAddressChange","e","_e$target2","target","addressString","addressInfo","parseAddress","isValid","queryString","tokenPrefixes","_defineProperty","_callee2","postageAmount","postageBaseCost","_context2","stamp","err","srcUrls","tokenIconsUrl","authPubKey","authObj","Redirect","to","Row","Col","validateStatus","help","placeholder","onChange","required","Img","unloader","heigh","borderRadius","makeBlockie","suffix","_e$target","isGreaterThanBalance","isNaN","comparedTo","includes","handleSlpAmountChange","defaultChecked","checked","paddingTop","SecondaryButton","PrimaryButton","submit","Descriptions","column","bordered","uri","hash","version","timestampUnix","Date","toLocaleDateString","containsBaton","initialTokenQty","toLocaleString","totalBurned","totalMinted","circulatingSupply","defaultProps","status"],"mappings":"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","file":"static/js/14.6531bab6.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const LoadingCtn = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 400px;\r\n    flex-direction: column;\r\n\r\n    svg {\r\n        width: 50px;\r\n        height: 50px;\r\n        fill: ${props => props.theme.primary};\r\n    }\r\n`;\r\n\r\nexport const BalanceHeaderWrap = styled.div`\r\n    color: ${props => props.theme.wallet.text.primary};\r\n    width: 100%;\r\n    font-size: 30px;\r\n    font-weight: bold;\r\n    @media (max-width: 768px) {\r\n        font-size: 23px;\r\n    }\r\n`;\r\n\r\nexport const BalanceHeaderFiatWrap = styled.div`\r\n    color: ${props => props.theme.wallet.text.secondary};\r\n    width: 100%;\r\n    font-size: 18px;\r\n    margin-bottom: 20px;\r\n    font-weight: bold;\r\n    @media (max-width: 768px) {\r\n        font-size: 16px;\r\n    }\r\n`;\r\n\r\nexport const ZeroBalanceHeader = styled.div`\r\n    color: ${props => props.theme.wallet.text.primary};\r\n    width: 100%;\r\n    font-size: 14px;\r\n    margin-bottom: 5px;\r\n`;\r\n\r\nexport const TokenParamLabel = styled.span`\r\n    font-weight: bold;\r\n`;\r\n\r\nexport const AlertMsg = styled.p`\r\n    color: ${props => props.theme.forms.error} !important;\r\n`;\r\n\r\nexport const ConvertAmount = styled.div`\r\n    color: ${props => props.theme.wallet.text.secondary};\r\n    width: 100%;\r\n    font-size: 14px;\r\n    margin-bottom: 10px;\r\n    font-weight: bold;\r\n    @media (max-width: 768px) {\r\n        font-size: 12px;\r\n    }\r\n`;\r\n","import * as React from 'react';\r\nimport { CashLoader } from '@components/Common/CustomIcons';\r\nimport { AlertMsg } from '@components/Common/Atoms';\r\n\r\nconst ApiError = () => {\r\n    return (\r\n        <>\r\n            <AlertMsg>\r\n                <b>API connection lost.</b>\r\n                <br /> Re-establishing connection...\r\n            </AlertMsg>\r\n            <CashLoader />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ApiError;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Alert, Modal } from 'antd';\r\nimport { ThemedQrcodeOutlined } from '@components/Common/CustomIcons';\r\nimport styled from 'styled-components';\r\nimport { BrowserQRCodeReader } from '@zxing/library';\r\nimport {\r\n    currency,\r\n    isValidCashPrefix,\r\n    isValidTokenPrefix,\r\n} from '@components/Common/Ticker.js';\r\nimport { Event } from '@utils/GoogleAnalytics';\r\n\r\nconst StyledScanQRCode = styled.span`\r\n    display: block;\r\n`;\r\n\r\nconst StyledModal = styled(Modal)`\r\n    width: 400px !important;\r\n    height: 400px !important;\r\n\r\n    .ant-modal-close {\r\n        top: 0 !important;\r\n        right: 0 !important;\r\n    }\r\n`;\r\n\r\nconst QRPreview = styled.video`\r\n    width: 100%;\r\n`;\r\n\r\nconst ScanQRCode = ({\r\n    loadWithCameraOpen,\r\n    onScan = () => null,\r\n    ...otherProps\r\n}) => {\r\n    const [visible, setVisible] = useState(loadWithCameraOpen);\r\n    const [error, setError] = useState(false);\r\n    // Use these states to debug video errors on mobile\r\n    // Note: iOS chrome/brave/firefox does not support accessing camera, will throw error\r\n    // iOS users can use safari\r\n    // todo only show scanner with safari\r\n    //const [mobileError, setMobileError] = useState(false);\r\n    //const [mobileErrorMsg, setMobileErrorMsg] = useState(false);\r\n    const [activeCodeReader, setActiveCodeReader] = useState(null);\r\n\r\n    const teardownCodeReader = codeReader => {\r\n        if (codeReader !== null) {\r\n            codeReader.reset();\r\n            codeReader.stop();\r\n            codeReader = null;\r\n            setActiveCodeReader(codeReader);\r\n        }\r\n    };\r\n\r\n    const parseContent = content => {\r\n        let type = 'unknown';\r\n        let values = {};\r\n\r\n        // If what scanner reads from QR code begins with 'bitcoincash:' or 'simpleledger:' or their successor prefixes\r\n        if (isValidCashPrefix(content) || isValidTokenPrefix(content)) {\r\n            type = 'address';\r\n            values = { address: content };\r\n            // Event(\"Category\", \"Action\", \"Label\")\r\n            // Track number of successful QR code scans\r\n            // BCH or slp?\r\n            let eventLabel = currency.ticker;\r\n            const isToken = content.split(currency.tokenPrefix).length > 1;\r\n            if (isToken) {\r\n                eventLabel = currency.tokenTicker;\r\n            }\r\n            Event('ScanQRCode.js', 'Address Scanned', eventLabel);\r\n        }\r\n        return { type, values };\r\n    };\r\n\r\n    const scanForQrCode = async () => {\r\n        const codeReader = new BrowserQRCodeReader();\r\n        setActiveCodeReader(codeReader);\r\n\r\n        try {\r\n            // Need to execute this before you can decode input\r\n            // eslint-disable-next-line no-unused-vars\r\n            const videoInputDevices = await codeReader.getVideoInputDevices();\r\n            //console.log(`videoInputDevices`, videoInputDevices);\r\n            //setMobileError(JSON.stringify(videoInputDevices));\r\n\r\n            // choose your media device (webcam, frontal camera, back camera, etc.)\r\n            // TODO implement if necessary\r\n            //const selectedDeviceId = videoInputDevices[0].deviceId;\r\n\r\n            //const previewElem = document.querySelector(\"#test-area-qr-code-webcam\");\r\n\r\n            const content = await codeReader.decodeFromInputVideoDevice(\r\n                undefined,\r\n                'test-area-qr-code-webcam',\r\n            );\r\n            const result = parseContent(content.text);\r\n\r\n            // stop scanning and fill form if it's an address\r\n            if (result.type === 'address') {\r\n                // Hide the scanner\r\n                setVisible(false);\r\n                onScan(result.values.address);\r\n                return teardownCodeReader(codeReader);\r\n            }\r\n        } catch (err) {\r\n            console.log(`Error in QR scanner:`);\r\n            console.log(err);\r\n            console.log(JSON.stringify(err.message));\r\n            //setMobileErrorMsg(JSON.stringify(err.message));\r\n            setError(err);\r\n            teardownCodeReader(codeReader);\r\n        }\r\n\r\n        // stop scanning after 20s no matter what\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (!visible) {\r\n            setError(false);\r\n            // Stop the camera if user closes modal\r\n            if (activeCodeReader !== null) {\r\n                teardownCodeReader(activeCodeReader);\r\n            }\r\n        } else {\r\n            scanForQrCode();\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [visible]);\r\n\r\n    return (\r\n        <>\r\n            <StyledScanQRCode\r\n                {...otherProps}\r\n                onClick={() => setVisible(!visible)}\r\n            >\r\n                <ThemedQrcodeOutlined />\r\n            </StyledScanQRCode>\r\n            <StyledModal\r\n                title=\"Scan QR code\"\r\n                visible={visible}\r\n                onCancel={() => setVisible(false)}\r\n                footer={null}\r\n            >\r\n                {visible ? (\r\n                    <div>\r\n                        {error ? (\r\n                            <>\r\n                                <Alert\r\n                                    message=\"Error\"\r\n                                    description=\"Error in QR scanner. Please ensure your camera is not in use. Due to Apple restrictions on third-party browsers, you must use Safari browser for QR code scanning on an iPhone.\"\r\n                                    type=\"error\"\r\n                                    showIcon\r\n                                    style={{ textAlign: 'left' }}\r\n                                />\r\n                                {/*\r\n                <p>{mobileError}</p>\r\n                <p>{mobileErrorMsg}</p>\r\n                */}\r\n                            </>\r\n                        ) : (\r\n                            <QRPreview id=\"test-area-qr-code-webcam\"></QRPreview>\r\n                        )}\r\n                    </div>\r\n                ) : null}\r\n            </StyledModal>\r\n        </>\r\n    );\r\n};\r\n\r\nScanQRCode.propTypes = {\r\n    loadWithCameraOpen: PropTypes.bool,\r\n    onScan: PropTypes.func,\r\n};\r\n\r\nexport default ScanQRCode;\r\n","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Input, Select } from 'antd';\r\nconst { TextArea } = Input;\r\nimport {\r\n    ThemedDollarOutlined,\r\n    ThemedWalletOutlined,\r\n    ThemedLockOutlined\r\n} from '@components/Common/CustomIcons';\r\nimport styled, { css } from 'styled-components';\r\nimport ScanQRCode from './ScanQRCode';\r\nimport useBCH from '@hooks/useBCH';\r\nimport { currency } from '@components/Common/Ticker.js';\r\nimport { authPubKeys } from '@utils/selfMint';\r\n\r\nexport const AntdFormCss = css`\r\n    .ant-input-group-addon {\r\n        background-color: ${props =>\r\n            props.theme.forms.addonBackground} !important;\r\n        border: 1px solid ${props => props.theme.forms.border};\r\n        color: ${props => props.theme.forms.addonForeground} !important;\r\n    }\r\n    input.ant-input,\r\n    .ant-select-selection {\r\n        background-color: ${props =>\r\n            props.theme.forms.selectionBackground} !important;\r\n        box-shadow: none !important;\r\n        border-radius: 4px;\r\n        font-weight: bold;\r\n        color: ${props => props.theme.forms.text};\r\n        opacity: 1;\r\n        height: 50px;\r\n    }\r\n    textarea.ant-input,\r\n    .ant-select-selection {\r\n        background-color: ${props =>\r\n            props.theme.forms.selectionBackground} !important;\r\n        box-shadow: none !important;\r\n        border-radius: 4px;\r\n        font-weight: bold;\r\n        color: ${props => props.theme.forms.text};\r\n        opacity: 1;\r\n        height: 50px;\r\n        min-height: 100px;\r\n    }\r\n    .ant-input-affix-wrapper {\r\n        background-color: ${props => props.theme.forms.selectionBackground};\r\n        border: 1px solid ${props => props.theme.wallet.borders.color} !important;\r\n    }\r\n    .ant-select-selector {\r\n        height: 60px !important;\r\n        border: 1px solid ${props => props.theme.wallet.borders.color} !important;\r\n    }\r\n    .ant-form-item-has-error\r\n        > div\r\n        > div.ant-form-item-control-input\r\n        > div\r\n        > span\r\n        > span\r\n        > span.ant-input-affix-wrapper {\r\n        background-color: ${props => props.theme.forms.selectionBackground};\r\n        border-color: ${props => props.theme.forms.error} !important;\r\n    }\r\n\r\n    .ant-form-item-has-error .ant-input,\r\n    .ant-form-item-has-error .ant-input-affix-wrapper,\r\n    .ant-form-item-has-error .ant-input:hover,\r\n    .ant-form-item-has-error .ant-input-affix-wrapper:hover {\r\n        background-color: ${props => props.theme.forms.selectionBackground};\r\n        border-color: ${props => props.theme.forms.error} !important;\r\n    }\r\n\r\n    .ant-form-item-has-error\r\n        .ant-select:not(.ant-select-disabled):not(.ant-select-customize-input)\r\n        .ant-select-selector {\r\n        background-color: ${props => props.theme.forms.selectionBackground};\r\n        border-color: ${props => props.theme.forms.error} !important;\r\n    }\r\n    .ant-select-single .ant-select-selector .ant-select-selection-item,\r\n    .ant-select-single .ant-select-selector .ant-select-selection-placeholder {\r\n        line-height: 60px;\r\n        text-align: left;\r\n        color: ${props => props.theme.forms.text};\r\n        font-weight: bold;\r\n    }\r\n    .ant-form-item-has-error .ant-input-group-addon {\r\n        color: ${props => props.theme.forms.error} !important;\r\n        border-color: ${props => props.theme.forms.error} !important;\r\n    }\r\n    .ant-form-item-explain.ant-form-item-explain-error {\r\n        color: ${props => props.theme.forms.error} !important;\r\n    }\r\n`;\r\n\r\nexport const AntdFormWrapper = styled.div`\r\n    ${AntdFormCss}\r\n`;\r\n\r\nexport const InputAddonText = styled.span`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: block;\r\n\r\n    ${props =>\r\n        props.disabled\r\n            ? `\r\n      cursor: not-allowed;\r\n      `\r\n            : `cursor: pointer;`}\r\n`;\r\n\r\nexport const InputNumberAddonText = styled.span`\r\n    background-color: ${props => props.theme.forms.addonBackground} !important;\r\n    border: 1px solid ${props => props.theme.forms.border};\r\n    color: ${props => props.theme.forms.addonForeground} !important;\r\n    height: 50px;\r\n    line-height: 47px;\r\n\r\n    * {\r\n        color: ${props => props.theme.forms.addonForeground} !important;\r\n    }\r\n    ${props =>\r\n        props.disabled\r\n            ? `\r\n      cursor: not-allowed;\r\n      `\r\n            : `cursor: pointer;`}\r\n`;\r\n\r\nexport const SendBchInput = ({\r\n    onMax,\r\n    inputProps,\r\n    selectProps,\r\n    activeFiatCode,\r\n    ...otherProps\r\n}) => {\r\n    const { Option } = Select;\r\n    const currencies = [\r\n        {\r\n            value: currency.ticker,\r\n            label: currency.ticker,\r\n        },\r\n        {\r\n            value: activeFiatCode ? activeFiatCode : 'USD',\r\n            label: activeFiatCode ? activeFiatCode : 'USD',\r\n        },\r\n    ];\r\n    const currencyOptions = currencies.map(currency => {\r\n        return (\r\n            <Option\r\n                key={currency.value}\r\n                value={currency.value}\r\n                className=\"selectedCurrencyOption\"\r\n            >\r\n                {currency.label}\r\n            </Option>\r\n        );\r\n    });\r\n\r\n    const CurrencySelect = (\r\n        <Select\r\n            defaultValue={currency.ticker}\r\n            className=\"select-after\"\r\n            style={{ width: '30%' }}\r\n            {...selectProps}\r\n        >\r\n            {currencyOptions}\r\n        </Select>\r\n    );\r\n    return (\r\n        <AntdFormWrapper>\r\n            <Form.Item {...otherProps}>\r\n                <Input.Group compact>\r\n                    <Input\r\n                        style={{ width: '60%', textAlign: 'left' }}\r\n                        type=\"number\"\r\n                        step={\r\n                            inputProps.dollar === 1\r\n                                ? 0.01\r\n                                : 1 / 10 ** currency.cashDecimals\r\n                        }\r\n                        prefix={\r\n                            inputProps.dollar === 1 ? (\r\n                                <ThemedDollarOutlined />\r\n                            ) : (\r\n                                <img\r\n                                    src={currency.logo}\r\n                                    alt=\"\"\r\n                                    width={16}\r\n                                    height={16}\r\n                                />\r\n                            )\r\n                        }\r\n                        {...inputProps}\r\n                    />\r\n                    {CurrencySelect}\r\n                    <InputNumberAddonText\r\n                        style={{\r\n                            width: '10%',\r\n                            height: '60px',\r\n                            lineHeight: '60px',\r\n                        }}\r\n                        disabled={!!(inputProps || {}).disabled}\r\n                        onClick={!(inputProps || {}).disabled && onMax}\r\n                    >\r\n                        max\r\n                    </InputNumberAddonText>\r\n                </Input.Group>\r\n            </Form.Item>\r\n        </AntdFormWrapper>\r\n    );\r\n};\r\n\r\nSendBchInput.propTypes = {\r\n    onMax: PropTypes.func,\r\n    inputProps: PropTypes.object,\r\n    selectProps: PropTypes.object,\r\n    activeFiatCode: PropTypes.string,\r\n};\r\n\r\nexport const SendBip70Input = ({\r\n    inputProps,\r\n    selectProps,\r\n    activeTokenCode,\r\n    ...otherProps\r\n}) => {\r\n    const { Option } = Select;\r\n    const currencies = [\r\n        {\r\n            value: activeTokenCode,\r\n            label: activeTokenCode,\r\n        }\r\n    ];\r\n    const currencyOptions = currencies.map(currency => {\r\n        return (\r\n            <Option\r\n                key={currency.value}\r\n                value={currency.value}\r\n                className=\"selectedCurrencyOption\"\r\n            >\r\n                {currency.label}\r\n            </Option>\r\n        );\r\n    });\r\n\r\n    const CurrencySelect = (\r\n        <Select\r\n            value={activeTokenCode}\r\n            readOnly={true}\r\n            className=\"select-after\"\r\n            style={{ width: '30%' }}\r\n            {...selectProps}\r\n        >\r\n            {currencyOptions}\r\n        </Select>\r\n    );\r\n\r\n    const prefixImage = inputProps.token ? (\r\n        <div\r\n            style={{\r\n                height: '16px',\r\n                width: '16px'\r\n            }}\r\n        ></div>\r\n    ) : (\r\n        <img\r\n            src={currency.logo}\r\n            alt=\"\"\r\n            width={16}\r\n            height={16}\r\n        />\r\n    );\r\n\r\n    return (\r\n        <AntdFormWrapper>\r\n            <Form.Item {...otherProps}>\r\n                <Input.Group compact>\r\n                    <Input\r\n                        readOnly={true}\r\n                        style={{ width: '60%', textAlign: 'left' }}\r\n                        type=\"number\"\r\n                        step={\r\n                            inputProps.dollar === 1\r\n                                ? 0.01\r\n                                : 1 / 10 ** currency.cashDecimals\r\n                        }\r\n                        prefix={\r\n                            inputProps.dollar === 1 ? (\r\n                                <ThemedDollarOutlined />\r\n                            ) : prefixImage\r\n                        }\r\n                        {...inputProps}\r\n                    />\r\n                    {CurrencySelect}\r\n                </Input.Group>\r\n            </Form.Item>\r\n        </AntdFormWrapper>\r\n    );\r\n};\r\n\r\nSendBip70Input.propTypes = {\r\n    inputProps: PropTypes.object,\r\n    selectProps: PropTypes.object,\r\n    activeTokenCode: PropTypes.string,\r\n};\r\n\r\nexport const FormItemWithMaxAddon = ({ onMax, inputProps, ...otherProps }) => {\r\n    return (\r\n        <AntdFormWrapper>\r\n            <Form.Item {...otherProps}>\r\n                <Input\r\n                    type=\"number\"\r\n                    prefix={\r\n                        <img\r\n                            src={currency.logo}\r\n                            alt=\"\"\r\n                            width={16}\r\n                            height={16}\r\n                        />\r\n                    }\r\n                    addonAfter={\r\n                        <InputAddonText\r\n                            disabled={!!(inputProps || {}).disabled}\r\n                            onClick={!(inputProps || {}).disabled && onMax}\r\n                        >\r\n                            max\r\n                        </InputAddonText>\r\n                    }\r\n                    {...inputProps}\r\n                />\r\n            </Form.Item>\r\n        </AntdFormWrapper>\r\n    );\r\n};\r\n\r\nFormItemWithMaxAddon.propTypes = {\r\n    onMax: PropTypes.func,\r\n    inputProps: PropTypes.object,\r\n};\r\n\r\n// loadWithCameraOpen prop: if true, load page with camera scanning open\r\nexport const DestinationAddressSingle = ({\r\n    onScan,\r\n    loadWithCameraOpen,\r\n    inputProps,\r\n    ...otherProps\r\n}) => {\r\n    return (\r\n        <AntdFormWrapper>\r\n            <Form.Item {...otherProps}>\r\n                <Input\r\n                    prefix={<ThemedWalletOutlined />}\r\n                    autoComplete=\"off\"\r\n                    addonAfter={\r\n                        <ScanQRCode\r\n                            loadWithCameraOpen={loadWithCameraOpen}\r\n                            onScan={onScan}\r\n                        />\r\n                    }\r\n                    {...inputProps}\r\n                />\r\n            </Form.Item>\r\n        </AntdFormWrapper>\r\n    );\r\n};\r\n\r\nDestinationAddressSingle.propTypes = {\r\n    onScan: PropTypes.func,\r\n    loadWithCameraOpen: PropTypes.bool,\r\n    inputProps: PropTypes.object,\r\n};\r\n\r\nexport const DestinationAddressMulti = ({ inputProps, ...otherProps }) => {\r\n    return (\r\n        <AntdFormWrapper>\r\n            <Form.Item {...otherProps}>\r\n                <TextArea\r\n                    prefix={<ThemedWalletOutlined />}\r\n                    autoComplete=\"off\"\r\n                    {...inputProps}\r\n                />\r\n            </Form.Item>\r\n        </AntdFormWrapper>\r\n    );\r\n};\r\n\r\nDestinationAddressMulti.propTypes = {\r\n    inputProps: PropTypes.object,\r\n};\r\n\r\nexport const Bip70AddressSingle = ({\r\n    inputProps,\r\n    ...otherProps\r\n}) => {\r\n    return (\r\n        <AntdFormWrapper>\r\n            <Form.Item {...otherProps}>\r\n                <Input\r\n                    prefix={<ThemedWalletOutlined />}\r\n                    autoComplete=\"off\"\r\n                    readOnly={true}\r\n                    {...inputProps}\r\n                />\r\n            </Form.Item>\r\n        </AntdFormWrapper>\r\n    );\r\n};\r\n\r\nBip70AddressSingle.propTypes = {\r\n    onScan: PropTypes.func,\r\n    loadWithCameraOpen: PropTypes.bool,\r\n    inputProps: PropTypes.object,\r\n};\r\n\r\nexport const SelfMintAuthCode = ({\r\n    inputProps,\r\n    ...otherProps\r\n}) => {\r\n    return (\r\n        <AntdFormWrapper>\r\n            <Form.Item {...otherProps}>\r\n                <Input\r\n                    prefix={<ThemedLockOutlined />}\r\n                    autoComplete=\"off\"\r\n                    {...inputProps}\r\n                />\r\n            </Form.Item>\r\n        </AntdFormWrapper>\r\n    );\r\n};\r\n\r\nSelfMintAuthCode.propTypes = {\r\n    inputProps: PropTypes.object\r\n};\r\n\r\nexport const SelfMintPurchaseAmount = ({\r\n    inputProps,\r\n    ...otherProps\r\n}) => {\r\n    const logoUrl = authPubKeys[0].imageUrl;\r\n    return (\r\n        <AntdFormWrapper>\r\n            <Form.Item {...otherProps}>\r\n                <Input\r\n                    style={{ width: '60%', textAlign: 'left' }}\r\n                    type=\"number\"\r\n                    step={0.01}\r\n                    precision={2}\r\n                    prefix={\r\n                        <img\r\n                            src={logoUrl}\r\n                            alt=\"\"\r\n                            width={16}\r\n                            height={16}\r\n                        />\r\n                    }\r\n                    {...inputProps}\r\n                />\r\n            </Form.Item>\r\n        </AntdFormWrapper>\r\n    );\r\n};\r\n\r\nSelfMintPurchaseAmount.propTypes = {\r\n    inputProps: PropTypes.object\r\n};\r\n\r\nexport const CurrencySelectDropdown = selectProps => {\r\n    const { Option } = Select;\r\n\r\n    // Build select dropdown from currency.fiatCurrencies\r\n    const currencyMenuOptions = [];\r\n    const currencyKeys = Object.keys(currency.fiatCurrencies);\r\n    for (let i = 0; i < currencyKeys.length; i += 1) {\r\n        const currencyMenuOption = {};\r\n        currencyMenuOption.value =\r\n            currency.fiatCurrencies[currencyKeys[i]].slug;\r\n        currencyMenuOption.label = `${\r\n            currency.fiatCurrencies[currencyKeys[i]].name\r\n        } (${currency.fiatCurrencies[currencyKeys[i]].symbol})`;\r\n        currencyMenuOptions.push(currencyMenuOption);\r\n    }\r\n    const currencyOptions = currencyMenuOptions.map(currencyMenuOption => {\r\n        return (\r\n            <Option\r\n                key={currencyMenuOption.value}\r\n                value={currencyMenuOption.value}\r\n                className=\"selectedCurrencyOption\"\r\n            >\r\n                {currencyMenuOption.label}\r\n            </Option>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <Select\r\n            className=\"select-after\"\r\n            style={{\r\n                width: '100%',\r\n            }}\r\n            {...selectProps}\r\n        >\r\n            {currencyOptions}\r\n        </Select>\r\n    );\r\n};\r\n\r\n// export const AddressValidators = () => {\r\n//     const { BCH } = useBCH();\r\n\r\n//     return {\r\n//         safelyDetectAddressFormat: value => {\r\n//             try {\r\n//                 return BCH.Address.detectAddressFormat(value);\r\n//             } catch (error) {\r\n//                 return null;\r\n//             }\r\n//         },\r\n//         isSLPAddress: value =>\r\n//             AddressValidators.safelyDetectAddressFormat(value) === 'slpaddr',\r\n//         isBCHAddress: value =>\r\n//             AddressValidators.safelyDetectAddressFormat(value) === 'cashaddr',\r\n//         isLegacyAddress: value =>\r\n//             AddressValidators.safelyDetectAddressFormat(value) === 'legacy',\r\n//     }();\r\n// };\r\n","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { formatBalance } from '@utils/cashMethods';\r\nimport { BalanceHeaderWrap } from '@components/Common/Atoms';\r\n\r\nconst BalanceHeader = ({ balance, ticker }) => {\r\n    return (\r\n        <BalanceHeaderWrap>\r\n            {balance} {ticker}\r\n        </BalanceHeaderWrap>\r\n    );\r\n};\r\n\r\n// balance may be a number (XEC balance) or a BigNumber object (token balance)\r\nBalanceHeader.propTypes = {\r\n    balance: PropTypes.oneOfType([\r\n        PropTypes.number, \r\n        PropTypes.object, \r\n        PropTypes.string\r\n    ]),\r\n    ticker: PropTypes.string,\r\n};\r\n\r\nexport default BalanceHeader;\r\n","import { useState, useEffect } from 'react';\r\n\r\n// From this stack overflow thread:\r\n// https://stackoverflow.com/questions/36862334/get-viewport-window-height-in-reactjs\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n        width,\r\n        height,\r\n    };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n    const [windowDimensions, setWindowDimensions] = useState(\r\n        getWindowDimensions(),\r\n    );\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { WalletContext } from '@utils/context';\r\nimport { \r\n    Form, \r\n    message, \r\n    Row, \r\n    Col, \r\n    Alert, \r\n    Descriptions,\r\n    Checkbox\r\n} from 'antd';\r\nimport styled, { css } from 'styled-components';\r\nimport PrimaryButton, {\r\n    SecondaryButton,\r\n} from '@components/Common/PrimaryButton';\r\nimport {\r\n    FormItemWithMaxAddon,\r\n    DestinationAddressSingle,\r\n} from '@components/Common/EnhancedInputs';\r\nimport useBCH from '@hooks/useBCH';\r\nimport BalanceHeader from '@components/Common/BalanceHeader';\r\nimport { Redirect } from 'react-router-dom';\r\nimport useWindowDimensions from '@hooks/useWindowDimensions';\r\nimport { isMobile, isIOS, isSafari, ConsoleView } from 'react-device-detect';\r\nimport { Img } from 'react-image';\r\nimport makeBlockie from 'ethereum-blockies-base64';\r\nimport BigNumber from 'bignumber.js';\r\nimport {\r\n    currency,\r\n    parseAddress,\r\n    isValidTokenPrefix,\r\n} from '@components/Common/Ticker.js';\r\nimport { Event } from '@utils/GoogleAnalytics';\r\nimport { authPubKeys } from '@utils/selfMint';\r\nimport { getWalletState } from '@utils/cashMethods';\r\nimport ApiError from '@components/Common/ApiError';\r\nimport {\r\n    sendTokenNotification,\r\n    errorNotification,\r\n} from '@components/Common/Notifications';\r\n\r\n3\r\n\r\nconst StyledCheckbox = styled(Checkbox)`\r\n  ${props =>\r\n    props &&\r\n    css`\r\n      & .ant-checkbox .ant-checkbox-inner {\r\n        background-color: white;\r\n        border-color: blue;\r\n      }\r\n    `}\r\n`;\r\n\r\nconst SendToken = ({ tokenId, passLoadingStatus }) => {\r\n    const { wallet, apiError } = React.useContext(WalletContext);\r\n    const walletState = getWalletState(wallet);\r\n    const { \r\n        tokens, \r\n        slpBalancesAndUtxos: {slpUtxos} \r\n    } = walletState;\r\n    const token = tokens.find(token => token.tokenId === tokenId);\r\n    const tokenFormattedBalance = token ? new BigNumber(token.balance)\r\n        .div(10 ** token.info.decimals)\r\n        .toString() : '0';\r\n    const tokenUtxos = slpUtxos.filter(u => u.slp.tokenId === tokenId);\r\n\r\n    const [tokenStats, setTokenStats] = useState(null);\r\n    const [queryStringText, setQueryStringText] = useState(null);\r\n    const [sendTokenAddressError, setSendTokenAddressError] = useState(false);\r\n    const [sendTokenAmountError, setSendTokenAmountError] = useState(false);\r\n    // Get device window width\r\n    // If this is less than 769, the page will open with QR scanner open\r\n    const { width } = useWindowDimensions();\r\n    // Load with QR code open if device is mobile and NOT iOS + anything but safari\r\n    const scannerSupported = width < 769 && isMobile && !(isIOS && !isSafari);\r\n\r\n    const blankFormData = {\r\n        dirty: true,\r\n        value: '',\r\n        address: '',\r\n    };\r\n    const [formData, setFormData] = useState(blankFormData);\r\n\r\n    // Postage Protocol Check\r\n    const [postageData, setPostageData] = useState(null);\r\n    const [usePostage, setUsePostage] = useState(false);\r\n\r\n    const { \r\n        getBcashRestUrl, \r\n        sendToken, \r\n        getPostage,\r\n        calculatePostage } = useBCH();\r\n\r\n    useEffect(async () => {\r\n        passLoadingStatus(true);\r\n        const postageObj = await getPostage(tokenId);\r\n        if (postageObj) {\r\n            setPostageData(postageObj);\r\n            setUsePostage(true);\r\n        }\r\n        passLoadingStatus(false);\r\n    }, []);\r\n\r\n    async function submit() {\r\n        setFormData({\r\n            ...formData,\r\n            dirty: false,\r\n        });\r\n\r\n        if (\r\n            !formData.address ||\r\n            !formData.value ||\r\n            Number(formData.value <= 0) ||\r\n            sendTokenAmountError\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        // Event(\"Category\", \"Action\", \"Label\")\r\n        // Track number of SLPA send transactions and\r\n        // SLPA token IDs\r\n        Event('SendToken.js', 'Send', tokenId);\r\n\r\n        passLoadingStatus(true);\r\n        const { address, value } = formData;\r\n\r\n        // Clear params from address\r\n        let cleanAddress = address.split('?')[0];\r\n\r\n        // Convert to simpleledger prefix if etoken\r\n        // cleanAddress = convertEtokenToSimpleledger(cleanAddress);\r\n\r\n        try {\r\n            const link = await sendToken(wallet, {\r\n                tokenId: tokenId,\r\n                tokenReceiverAddress: cleanAddress,\r\n                amount: value,\r\n                postageData: usePostage ? postageData : null\r\n                },\r\n                currency.defaultFee\r\n            );\r\n\r\n            sendTokenNotification(link);\r\n        } catch (e) {\r\n            passLoadingStatus(false);\r\n            let message;\r\n\r\n            if (!e.error && !e.message) {\r\n                message = `Transaction failed: no response from ${getBcashRestUrl()}.`;\r\n            } else if (\r\n                /Could not communicate with full node or other external service/.test(\r\n                    e.error,\r\n                )\r\n            ) {\r\n                message = 'Could not communicate with API. Please try again.';\r\n            } else {\r\n                message = e.message || e.error || JSON.stringify(e);\r\n            }\r\n            errorNotification(e, message, 'Sending eToken');\r\n        }\r\n        // Clear the address field\r\n        setFormData(blankFormData);\r\n        passLoadingStatus(false);\r\n    }\r\n\r\n    const handleSlpAmountChange = e => {\r\n        let error = false;\r\n        const { value, name } = e.target;\r\n\r\n        // test if exceeds balance using BigNumber\r\n        let isGreaterThanBalance = false;\r\n        if (!isNaN(value)) {\r\n            const bigValue = new BigNumber(value);\r\n            // Returns 1 if greater, -1 if less, 0 if the same, null if n/a\r\n            isGreaterThanBalance = bigValue.comparedTo(token.balance);\r\n        }\r\n\r\n        // Validate value for > 0\r\n        if (isNaN(value)) {\r\n            error = 'Amount must be a number';\r\n        } else if (value <= 0) {\r\n            error = 'Amount must be greater than 0';\r\n        } else if (token && token.balance && isGreaterThanBalance === 1) {\r\n            error = `Amount cannot exceed your ${token.info.tokenTicker} balance of ${token.balance}`;\r\n        } else if (!isNaN(value) && value.toString().includes('.')) {\r\n            if (value.toString().split('.')[1].length > token.info.decimals) {\r\n                error = `This token only supports ${token.info.decimals} decimal places`;\r\n            }\r\n        }\r\n        setSendTokenAmountError(error);\r\n        setFormData(p => ({\r\n            ...p,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const handleTokenAddressChange = e => {\r\n        const { value, name } = e.target;\r\n        // validate for token address\r\n        // validate for parameters\r\n        // show warning that query strings are not supported\r\n\r\n        let error = false;\r\n        let addressString = value;\r\n\r\n        const addressInfo = parseAddress(addressString, true);\r\n        /*\r\n        Model\r\n\r\n        addressInfo = \r\n        {\r\n            address: '',\r\n            isValid: false,\r\n            queryString: '',\r\n            amount: null,\r\n        };\r\n        */\r\n\r\n        const { address, isValid, queryString } = addressInfo;\r\n\r\n        // If query string,\r\n        // Show an alert that only amount and currency.ticker are supported\r\n        setQueryStringText(queryString);\r\n\r\n        // Is this valid address?\r\n        if (!isValid) {\r\n            error = 'Address is not a valid etoken: address';\r\n            // If valid address but token format\r\n        } else if (!isValidTokenPrefix(address)) {\r\n            error = `Cashtab only supports sending to ${currency.tokenPrefixes[0]} prefixed addresses`;\r\n        }\r\n        setSendTokenAddressError(error);\r\n\r\n        setFormData(p => ({\r\n            ...p,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const handlePostageCheck = (e) => {\r\n        setUsePostage(e.target.checked);\r\n    }\r\n\r\n    const onMax = async () => {\r\n        // Clear this error before updating field\r\n        setSendTokenAmountError(false);\r\n        let postageAmount = 0;\r\n        if (usePostage) {\r\n            const postageBaseCost = calculatePostage(\r\n                tokenUtxos.length,\r\n                1,\r\n                postageData\r\n            );\r\n            postageAmount = postageBaseCost / 10 ** postageData.stamp.decimals;\r\n        }\r\n        try {\r\n            let value = tokenFormattedBalance - postageAmount;\r\n\r\n            setFormData({\r\n                ...formData,\r\n                value,\r\n            });\r\n        } catch (err) {\r\n            console.log(`Error in onMax:`);\r\n            console.log(err);\r\n            message.error(\r\n                'Unable to calculate the max value due to network errors',\r\n            );\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // If the balance has changed, unlock the UI\r\n        // This is redundant, if backend has refreshed in 1.75s timeout below, UI will already be unlocked\r\n\r\n        passLoadingStatus(false);\r\n    }, [token]);\r\n\r\n    // For token image\r\n    const srcUrls = [`${currency.tokenIconsUrl}/32/${tokenId}.png`]\r\n    const authPubKey = authPubKeys.find(authObj => \r\n        authObj.tokenId == tokenId && authObj.imageUrl\r\n    );\r\n    if (authPubKey)\r\n        srcUrls.push(authPubKey.imageUrl);\r\n\r\n    return (\r\n        <>\r\n            {!token && <Redirect to=\"/\" />}\r\n\r\n            {token && (\r\n                <>\r\n                    <BalanceHeader\r\n                        balance={tokenFormattedBalance}\r\n                        ticker={token.info.ticker}\r\n                    />\r\n                    {/* <TokenIconAlert /> */}\r\n                    <Row type=\"flex\">\r\n                        <Col span={24}>\r\n                            <Form\r\n                                style={{\r\n                                    width: 'auto',\r\n                                }}\r\n                            >\r\n                                <DestinationAddressSingle\r\n                                    loadWithCameraOpen={scannerSupported}\r\n                                    validateStatus={\r\n                                        sendTokenAddressError ? 'error' : ''\r\n                                    }\r\n                                    help={\r\n                                        sendTokenAddressError\r\n                                            ? sendTokenAddressError\r\n                                            : ''\r\n                                    }\r\n                                    onScan={result =>\r\n                                        handleTokenAddressChange({\r\n                                            target: {\r\n                                                name: 'address',\r\n                                                value: result,\r\n                                            },\r\n                                        })\r\n                                    }\r\n                                    inputProps={{\r\n                                        placeholder: `${currency.tokenTicker} Address`,\r\n                                        name: 'address',\r\n                                        onChange: e =>\r\n                                            handleTokenAddressChange(e),\r\n                                        required: true,\r\n                                        value: formData.address,\r\n                                    }}\r\n                                />\r\n                                <FormItemWithMaxAddon\r\n                                    validateStatus={\r\n                                        sendTokenAmountError ? 'error' : ''\r\n                                    }\r\n                                    help={\r\n                                        sendTokenAmountError\r\n                                            ? sendTokenAmountError\r\n                                            : ''\r\n                                    }\r\n                                    onMax={onMax}\r\n                                    inputProps={{\r\n                                        name: 'value',\r\n                                        step: 1 / 10 ** token.info.decimals,\r\n                                        placeholder: 'Amount',\r\n                                        prefix:\r\n                                            currency.tokenIconsUrl !== '' ? (\r\n                                                <Img\r\n                                                    src={srcUrls}\r\n                                                    width={16}\r\n                                                    height={16}\r\n                                                    unloader={\r\n                                                        <img\r\n                                                            alt={`identicon of tokenId ${tokenId} `}\r\n                                                            heigh=\"16\"\r\n                                                            width=\"16\"\r\n                                                            style={{\r\n                                                                borderRadius:\r\n                                                                    '50%',\r\n                                                            }}\r\n                                                            key={`identicon-${tokenId}`}\r\n                                                            src={makeBlockie(\r\n                                                                tokenId,\r\n                                                            )}\r\n                                                        />\r\n                                                    }\r\n                                                />\r\n                                            ) : (\r\n                                                <img\r\n                                                    alt={`identicon of tokenId ${tokenId} `}\r\n                                                    heigh=\"16\"\r\n                                                    width=\"16\"\r\n                                                    style={{\r\n                                                        borderRadius: '50%',\r\n                                                    }}\r\n                                                    key={`identicon-${tokenId}`}\r\n                                                    src={makeBlockie(tokenId)}\r\n                                                />\r\n                                            ),\r\n                                        suffix: token.info.ticker,\r\n                                        onChange: e => handleSlpAmountChange(e),\r\n                                        required: true,\r\n                                        value: formData.value,\r\n                                    }}\r\n                                />\r\n                                {postageData && (\r\n                                    <StyledCheckbox\r\n                                        defaultChecked={true}\r\n                                        onChange={handlePostageCheck}\r\n                                    >Use Post Office? (pay miner fee in {token.info.ticker})</StyledCheckbox>\r\n                                )}\r\n                                <div\r\n                                    style={{\r\n                                        paddingTop: '12px',\r\n                                    }}\r\n                                >\r\n                                    {apiError ||\r\n                                    sendTokenAmountError ||\r\n                                    sendTokenAddressError ? (\r\n                                        <>\r\n                                            <SecondaryButton>\r\n                                                Send {token.info.name}\r\n                                            </SecondaryButton>\r\n                                        </>\r\n                                    ) : (\r\n                                        <PrimaryButton onClick={() => submit()}>\r\n                                            Send {token.info.name}\r\n                                        </PrimaryButton>\r\n                                    )}\r\n                                </div>\r\n\r\n                                {queryStringText && (\r\n                                    <Alert\r\n                                        message={`You are sending a transaction to an address including query parameters \"${queryStringText}.\" Token transactions do not support query parameters and they will be ignored.`}\r\n                                        type=\"warning\"\r\n                                    />\r\n                                )}\r\n                                {apiError && <ApiError />}\r\n                            </Form>\r\n                            <Descriptions\r\n                                column={1}\r\n                                bordered\r\n                                title={`Token info for \"${token.info.name}\"`}\r\n                            >\r\n                                <Descriptions.Item label=\"Token ID\">\r\n                                    {token.tokenId}\r\n                                </Descriptions.Item>\r\n                                <Descriptions.Item label=\"Decimals\">\r\n                                    {token.info.decimals}\r\n                                </Descriptions.Item>\r\n                                <Descriptions.Item label=\"Document URI\">\r\n                                    {token.info.uri}\r\n                                </Descriptions.Item>\r\n                                <Descriptions.Item label=\"Document Hash\">\r\n                                    {token.info.hash}\r\n                                </Descriptions.Item>\r\n                                <Descriptions.Item label=\"Version\">\r\n                                    {token.info.version}\r\n                                </Descriptions.Item>\r\n                                {tokenStats && (\r\n                                    <>\r\n                                        <Descriptions.Item label=\"Genesis Date\">\r\n                                            {tokenStats.timestampUnix !==\r\n                                            null\r\n                                                ? new Date(\r\n                                                        tokenStats.timestampUnix *\r\n                                                            1000,\r\n                                                    ).toLocaleDateString()\r\n                                                : 'Just now (Genesis tx confirming)'}\r\n                                        </Descriptions.Item>\r\n                                        <Descriptions.Item label=\"Fixed Supply?\">\r\n                                            {tokenStats.containsBaton\r\n                                                ? 'No'\r\n                                                : 'Yes'}\r\n                                        </Descriptions.Item>\r\n                                        <Descriptions.Item label=\"Initial Quantity\">\r\n                                            {tokenStats.initialTokenQty.toLocaleString()}\r\n                                        </Descriptions.Item>\r\n                                        <Descriptions.Item label=\"Total Burned\">\r\n                                            {tokenStats.totalBurned.toLocaleString()}\r\n                                        </Descriptions.Item>\r\n                                        <Descriptions.Item label=\"Total Minted\">\r\n                                            {tokenStats.totalMinted.toLocaleString()}\r\n                                        </Descriptions.Item>\r\n                                        <Descriptions.Item label=\"Circulating Supply\">\r\n                                            {tokenStats.circulatingSupply.toLocaleString()}\r\n                                        </Descriptions.Item>\r\n                                    </>\r\n                                )}\r\n                            </Descriptions>\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\n/*\r\npassLoadingStatus must receive a default prop that is a function\r\nin order to pass the rendering unit test in SendToken.test.js\r\n\r\nstatus => {console.log(status)} is an arbitrary stub function\r\n*/\r\n\r\nSendToken.defaultProps = {\r\n    passLoadingStatus: status => {\r\n        console.log(status);\r\n    },\r\n};\r\n\r\nSendToken.propTypes = {\r\n    tokenId: PropTypes.string,\r\n    passLoadingStatus: PropTypes.func,\r\n};\r\n\r\nexport default SendToken;\r\n"],"sourceRoot":""}